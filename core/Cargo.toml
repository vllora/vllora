[package]
name = "vllora_core"
version = "0.3.2"
edition = "2021"
authors = ["Vllora Team<api@vllora.dev>"]
description = "AI gateway Core for Vllora."
license = "Apache-2.0"
repository = "https://github.com/vllora/vllora"
documentation = "https://docs.vllora.dev"
readme = "../README.md"
keywords = ["llm", "openai", "anthropic", "gemini", "mcp"]
categories = ["web-programming", "network-programming"]

[lib]
name = "vllora_core"
path = "src/lib.rs"

[dependencies]
tokio = { workspace = true }
tokio-stream = { version = "0.1.17", features = ["io-util"] }
tracing-futures = { workspace = true }
tracing-opentelemetry = { workspace = true }
uuid = { version = "1.18.1", features = ["serde", "v4"] }
serde = { workspace = true }
serde_json = { workspace = true }
chrono = { workspace = true }
async-trait = { workspace = true }
thiserror = { workspace = true }
async-openai = { workspace = true }
futures = "0.3"

serde_with = { version = "3.15.1", features = ["json"] }
validator = { version = "0.20", features = ["derive"] }
clust = { version = "0.9.8", package = "langdb_clust" }
indexmap = { version = "2.11.4", features = ["serde"] }
serde_tuple = "1.1.2"
minijinja = "2.12.0"
base64 = "0.22.1"
aws-smithy-types = { version = "1.3.2", features = [
  "serde-deserialize",
  "serde-serialize",
] }
aws-credential-types = "1.2.6"
aws-sdk-bedrock = "1.112.0"
aws-sdk-bedrockruntime = "1.105.0"
aws-smithy-runtime-api = "1.9.0"
aws-config = { version = "1.8.6", features = ["behavior-version-latest"] }
bytemuck = { version = "1.23", features = ["derive"] }
reqwest-eventsource = "0.6.0"
reqwest = { version = "0.12.23", default-features = false, features = [
  "json",
  "stream",
] }
jsonwebtoken = { version = "9.3.0", default-features = false, features = ["use_pem"] }
regex = "1.11.1"
secrecy = { version = "0.10.3", features = ["serde"] }
actix-web = "4"
tonic = { workspace = true }
dashmap = "6.1.0"
bytes = { version = "1", features = ["serde"] }
either = "1.15.0"
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
valuable = { workspace = true }
opentelemetry = { workspace = true }
opentelemetry_sdk = { workspace = true }
opentelemetry-proto = { version = "0.30.0", features = [
  "gen-tonic",
  "trace",
  "with-serde",
] }
openssh = { version = "0.11.5", optional = true }
clickhouse = { version = "0.11.6", package = "langdb_clickhouse", features = [
  "uuid",
], optional = true }
tokio-util = { version = "0.7.16", optional = true }
rmcp = { version = "0.8.2", default-features = true, features = [
  "reqwest",
  "client",
  "server",
  "transport-streamable-http-client-reqwest",
  "transport-sse-client-reqwest"
] }
rmcp-macros = { version = "0.8.2", default-features = true}
parking_lot = "0.12.4"
rand = "0.9"

diesel = { version = "2.3.1", features = [
  "chrono",
  "sqlite",
  "serde_json",
  "r2d2",
  "uuid",
  "numeric",
] }
libsqlite3-sys = { version = "0.27.0", features = ["bundled"] }
diesel_migrations = { version = "2.3.0", features = ["sqlite"] }
r2d2 = "0.8.10"
opentelemetry-semantic-conventions = "0.30.0"
actix-http = "3.11.1"

[features]
default = []
clickhouse = ["dep:openssh", "dep:clickhouse", "dep:tokio-util"]
postgres = ["diesel/postgres"]
sqlite = []
