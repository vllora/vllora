[
  {
    "model": "claude-sonnet-4.5",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-sonnet-4-5-20250929",
      "endpoint": null
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 15.0,
      "per_cached_input_token": 0.3,
      "per_cached_input_write_token": 3.75
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Claude Sonnet 4.5 is the best coding model in the world. It's the strongest model for building complex agents. It’s the best model at using computers. And it shows substantial gains in reasoning and math.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "reasoning": {
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 49.8,
        "artificial_analysis_intelligence_index": 62.7,
        "artificial_analysis_math_index": 88,
        "drop": null,
        "gpqa": 83.39999999999999,
        "hle": 17.299999999999997,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 71.39999999999999,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 87.5,
        "mmmu": null,
        "scicode": 44.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 5,
        "finance": 6,
        "marketing": 6,
        "maths": 8,
        "programming": 5,
        "science": 8,
        "writing": 12
      },
      "scores": {
        "academia": 73.05,
        "finance": 75.35,
        "marketing": 69.215,
        "maths": 88,
        "programming": 49.8,
        "science": 77.65,
        "writing": 66.865
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-09-29",
    "knowledge_cutoff_date": "2025-04-02",
    "langdb_release_date": "2025-09-30",
    "is_private": false
  },
  {
    "model": "claude-sonnet-4",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-sonnet-4-20250514",
      "endpoint": null
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 15.0,
      "per_cached_input_token": 0.3,
      "per_cached_input_write_token": 3.75
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Our high-performance model with exceptional reasoning and efficiency",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 77.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 45.1,
        "artificial_analysis_intelligence_index": 56.5,
        "artificial_analysis_math_index": 74.3,
        "drop": null,
        "gpqa": 77.7,
        "hle": 9.6,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 65.5,
        "math_500": 99.1,
        "mmlu": null,
        "mmlu_pro": 84.2,
        "mmmu": null,
        "scicode": 40.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 10,
        "finance": 14,
        "marketing": 11,
        "maths": 14,
        "programming": 10
      },
      "scores": {
        "academia": 67.1,
        "finance": 65.4,
        "marketing": 66.405,
        "maths": 74.3,
        "programming": 45.1,
        "science": 72.66111111111113,
        "writing": 63.51499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-05-22",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-03-01",
    "langdb_release_date": "2025-05-22",
    "is_private": false
  },
  {
    "model": "claude-opus-4",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-opus-4-20250514",
      "endpoint": null
    },
    "price": {
      "per_input_token": 15.0,
      "per_output_token": 75.0,
      "per_cached_input_token": 1.5,
      "per_cached_input_write_token": 18.75
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Our most capable and intelligent model yet. Claude Opus 4 sets new standards in complex reasoning and advanced coding",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 56.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 42.3,
        "artificial_analysis_math_index": 36.3,
        "drop": null,
        "gpqa": 70.1,
        "hle": 5.8999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 54.2,
        "math_500": 94.1,
        "mmlu": null,
        "mmlu_pro": 86.0,
        "mmmu": null,
        "scicode": 40.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 56.2,
        "finance": 39.3,
        "marketing": 53.025,
        "maths": 36.3,
        "science": 69.14999999999999,
        "writing": 52.43000000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-08-05",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-03-01",
    "langdb_release_date": "2025-08-05",
    "is_private": false
  },
  {
    "model": "gemini-2.5-pro",
    "model_provider": "google",
    "inference_provider": {
      "provider": "gemini",
      "model_name": "gemini-2.5-pro",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.25,
      "per_output_token": 10.0
    },
    "input_formats": [
      "text",
      "image",
      "audio",
      "video"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Gemini 2.5 Pro is our most advanced reasoning Gemini model, capable of solving complex problems.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 88.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 49.3,
        "artificial_analysis_intelligence_index": 59.6,
        "artificial_analysis_math_index": 87.7,
        "drop": null,
        "gpqa": 83.7,
        "hle": 21.1,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 80.10000000000001,
        "math_500": 96.7,
        "mmlu": null,
        "mmlu_pro": 86.2,
        "mmmu": 79.60000000000001,
        "scicode": 42.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 6,
        "finance": 8,
        "marketing": 12,
        "maths": 9,
        "programming": 6,
        "science": 7,
        "vision": 5,
        "writing": 17
      },
      "scores": {
        "academia": 71.65,
        "finance": 73.65,
        "marketing": 66.105,
        "maths": 87.7,
        "programming": 49.3,
        "science": 77.905,
        "vision": 79.60000000000001,
        "writing": 64.89
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-05-20",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-01-31",
    "langdb_release_date": "2025-05-20",
    "is_private": false
  },
  {
    "model": "gpt-4.1",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4.1",
      "endpoint": null
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 8.0,
      "per_cached_input_token": 0.5
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1047576
    },
    "description": "GPT-4.1 is OpenAI's flagship model for complex tasks. It is well suited for problem solving across domains.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 43.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 32.2,
        "artificial_analysis_intelligence_index": 43.4,
        "artificial_analysis_math_index": 34.7,
        "drop": null,
        "gpqa": 66.45,
        "hle": 4.6,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 45.7,
        "math_500": 91.3,
        "mmlu": null,
        "mmlu_pro": 80.60000000000001,
        "mmmu": 74.8,
        "scicode": 38.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 8
      },
      "scores": {
        "academia": 54.925,
        "finance": 39.05,
        "marketing": 59.01250000000001,
        "maths": 34.7,
        "programming": 32.2,
        "science": 66.05250000000001,
        "vision": 74.8,
        "writing": 56.5775
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-04-14",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-06-01",
    "langdb_release_date": "2025-04-14",
    "is_private": false
  },
  {
    "model": "gemini-2.5-pro-preview",
    "model_provider": "google",
    "inference_provider": {
      "provider": "gemini",
      "model_name": "gemini-2.5-pro-preview-03-25",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.25,
      "per_output_token": 10.0
    },
    "input_formats": [
      "text",
      "image",
      "audio",
      "video"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Gemini 2.5 Pro Experimental is Google's state-of-the-art thinking model, capable of reasoning over complex problems in code, math, and STEM, as well as analyzing large datasets, codebases, and documents using long context.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 86.4,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": 82.0,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 1,
        "vision": 2,
        "writing": 1
      },
      "scores": {
        "science": 85.6,
        "vision": 82.0,
        "writing": 86.4
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-06-05",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-01-31",
    "langdb_release_date": "2025-06-05",
    "is_private": false
  },
  {
    "model": "grok-4",
    "model_provider": "xai",
    "inference_provider": {
      "provider": "xai",
      "model_name": "grok-4",
      "endpoint": "https://api.x.ai/v1"
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 15.0,
      "per_cached_input_token": 0.75
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 256000
    },
    "description": "Grok 4 is the latest and greatest flagship model, offering unparalleled performance in natural language, math and reasoning - the perfect jack of all trades.",
    "parameters": {
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 94.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 55.1,
        "artificial_analysis_intelligence_index": 65.3,
        "artificial_analysis_math_index": 92.7,
        "drop": null,
        "gpqa": 87.6,
        "hle": 23.9,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 81.89999999999999,
        "math_500": 99.0,
        "mmlu": null,
        "mmlu_pro": 86.6,
        "mmmu": null,
        "scicode": 45.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 2,
        "finance": 2,
        "marketing": 7,
        "maths": 3,
        "programming": 1,
        "science": 5,
        "writing": 11
      },
      "scores": {
        "academia": 76.44999999999999,
        "finance": 79.0,
        "marketing": 69.07,
        "maths": 92.7,
        "programming": 55.1,
        "science": 80.13333333333334,
        "writing": 67.605
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-07-09",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-12-31",
    "langdb_release_date": "2025-07-09",
    "is_private": false
  },
  {
    "model": "gemini-2.5-flash",
    "model_provider": "google",
    "inference_provider": {
      "provider": "gemini",
      "model_name": "gemini-2.5-flash",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text",
      "image",
      "audio",
      "video"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Google's best model in terms of price-performance, offering well-rounded capabilities. ",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 50.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 30,
        "artificial_analysis_intelligence_index": 40.4,
        "artificial_analysis_math_index": 60.3,
        "drop": null,
        "gpqa": 82.8,
        "hle": 5.1,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 49.5,
        "math_500": 93.2,
        "mmlu": null,
        "mmlu_pro": 80.9,
        "mmmu": 79.7,
        "scicode": 29.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 17,
        "vision": 4
      },
      "scores": {
        "academia": 61.599999999999994,
        "finance": 50.349999999999994,
        "marketing": 53.875,
        "maths": 60.3,
        "programming": 30,
        "science": 74.055,
        "vision": 79.7,
        "writing": 54.38
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-05-20",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-01-31",
    "langdb_release_date": "2025-05-20",
    "is_private": false
  },
  {
    "model": "gemini-2.5-flash-preview",
    "model_provider": "google",
    "inference_provider": {
      "provider": "gemini",
      "model_name": "gemini-2.5-flash-preview-05-20",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text",
      "image",
      "audio",
      "video"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Google's best model in terms of price-performance, offering well-rounded capabilities. Gemini 2.5 Flash rate limits are more restricted since it is an experimental / preview model.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "license": "Proprietary",
    "is_private": false
  },
  {
    "model": "gemini-2.0-flash",
    "model_provider": "google",
    "inference_provider": {
      "provider": "gemini",
      "model_name": "gemini-2.0-flash",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text",
      "image",
      "audio",
      "video"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Google's most capable multi-modal model with great performance across all tasks, with a 1 million token context window, and built for the era of Agents.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 33.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 23.4,
        "artificial_analysis_intelligence_index": 33.6,
        "artificial_analysis_math_index": 21.7,
        "drop": null,
        "gpqa": 62.2,
        "hle": 5.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 33.4,
        "math_500": 93.0,
        "mmlu": null,
        "mmlu_pro": 77.9,
        "mmmu": 70.7,
        "scicode": 33.300000000000004,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 12
      },
      "scores": {
        "academia": 47.900000000000006,
        "finance": 27.65,
        "marketing": 46.495000000000005,
        "maths": 21.7,
        "programming": 23.4,
        "science": 62.855,
        "vision": 70.7,
        "writing": 46.46000000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-01",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-08-01",
    "langdb_release_date": "2024-12-01",
    "is_private": false
  },
  {
    "model": "claude-3.7-sonnet",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-3-7-sonnet-20250219",
      "endpoint": null
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 15.0,
      "per_cached_input_token": 0.3,
      "per_cached_input_write_token": 3.75
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Intelligent model, with visible step‑by‑step reasoning",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 22.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 32.3,
        "artificial_analysis_intelligence_index": 41.1,
        "artificial_analysis_math_index": 21,
        "drop": null,
        "gpqa": 65.60000000000001,
        "hle": 4.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 39.4,
        "math_500": 85.0,
        "mmlu": null,
        "mmlu_pro": 80.30000000000001,
        "mmmu": null,
        "scicode": 37.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 53.35000000000001,
        "finance": 31.05,
        "marketing": 55.155,
        "maths": 21,
        "programming": 32.3,
        "science": 64.56111111111113,
        "writing": 53.470000000000006
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-02-24",
    "knowledge_cutoff_date": "2023-08-01",
    "is_private": false
  },
  {
    "model": "gemini-2.0-flash-lite",
    "model_provider": "google",
    "inference_provider": {
      "provider": "gemini",
      "model_name": "gemini-2.0-flash-lite",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.075,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text",
      "image",
      "audio",
      "video"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Google's smallest and most cost effective model, built for at scale usage.\n\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 51.5,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": 68.0,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 14
      },
      "scores": {
        "science": 54.49999999999999,
        "vision": 68.0,
        "writing": 51.5
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-02-05",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-06-01",
    "langdb_release_date": "2025-02-05",
    "is_private": false
  },
  {
    "model": "gpt-4.1-mini",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4.1-mini",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.4,
      "per_output_token": 1.6,
      "per_cached_input_token": 0.1
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1047576
    },
    "description": "GPT-4.1 mini provides a balance between intelligence, speed, and cost that makes it an attractive model for many use cases.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 65.0,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": 72.7,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 11,
        "writing": 16
      },
      "scores": {
        "science": 66.39999999999999,
        "vision": 72.7,
        "writing": 65.0
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-14",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-05-31",
    "langdb_release_date": "2025-04-14",
    "is_private": false
  },
  {
    "model": "gpt-4.1-nano",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4.1-nano",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.4,
      "per_cached_input_token": 0.025
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1047576
    },
    "description": "GPT-4.1 nano is the fastest, most cost-effective GPT-4.1 model.\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 50.3,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": 55.400000000000006,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "science": 51.22727272727272,
        "vision": 55.400000000000006,
        "writing": 50.3
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-14",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-05-31",
    "langdb_release_date": "2025-04-14",
    "is_private": false
  },
  {
    "model": "gpt-4o-search-preview",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4o-search-preview",
      "endpoint": null
    },
    "price": {
      "per_input_token": 2.5,
      "per_output_token": 10.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "GPT-4o Search Preview is a specialized model trained to understand and execute web search queries with the Chat Completions API",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "o1-mini",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "o1-mini",
      "endpoint": null
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 12.0,
      "per_cached_input_token": 0.55
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "The o1 series of large language models are trained with reinforcement learning to perform complex reasoning. o1 models think before they answer, producing a long internal chain of thought before responding to the user. Faster and cheaper reasoning model particularly good at coding, math, and science",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 60.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 39.2,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 60.14999999999999,
        "hle": 4.9,
        "humaneval": 92.4,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 57.599999999999994,
        "math_500": 94.4,
        "mmlu": null,
        "mmlu_pro": 74.2,
        "mmmu": null,
        "scicode": 32.300000000000004,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "marketing": 14
      },
      "scores": {
        "academia": 49.675,
        "marketing": 63.693749999999994,
        "science": 59.475,
        "writing": 56.12499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-09-12",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2021-09-01",
    "langdb_release_date": "2024-09-12",
    "is_private": false
  },
  {
    "model": "gpt-4o",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4o",
      "endpoint": null
    },
    "price": {
      "per_input_token": 2.5,
      "per_output_token": 10.0,
      "per_cached_input_token": 1.25
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "High-intelligence flagship model for complex, multi-step tasks. GPT-4o is cheaper and faster than GPT-4 Turbo. It is multimodal (accepting text or image inputs and outputting text), and it has the same high intelligence as GPT-4 Turbo but is much more efficient—it generates text 2x faster and is 50% cheaper. Additionally, GPT-4o has the best vision and performance across non-English languages of any of our models. GPT-4o is available in the OpenAI API to paying customers.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 15.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 24,
        "artificial_analysis_intelligence_index": 27,
        "artificial_analysis_math_index": 6,
        "drop": null,
        "gpqa": 54.3,
        "hle": 3.3000000000000003,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 30.9,
        "math_500": 75.9,
        "mmlu": null,
        "mmlu_pro": 74.8,
        "mmmu": null,
        "scicode": 33.300000000000004,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 40.650000000000006,
        "finance": 16.5,
        "marketing": 34.405,
        "maths": 6,
        "programming": 24,
        "science": 56.60555555555556,
        "writing": 35.75
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-11-20",
    "knowledge_cutoff_date": "2023-10-01",
    "langdb_release_date": "2024-11-20",
    "is_private": false
  },
  {
    "model": "gpt-4o-mini",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4o-mini",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.6,
      "per_cached_input_token": 0.075
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "GPT-4o mini (o for omni) is a fast, affordable small model for focused tasks. It accepts both text and image inputs, and produces text outputs (including Structured Outputs). It is ideal for fine-tuning, and model outputs from a larger model like GPT-4o can be distilled to GPT-4o-mini to produce similar results at lower cost and latency.The knowledge cutoff for GPT-4o-mini models is October, 2023.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 11.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 21.2,
        "artificial_analysis_math_index": 14.7,
        "drop": null,
        "gpqa": 42.6,
        "hle": 4.0,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 23.4,
        "math_500": 78.9,
        "mmlu": null,
        "mmlu_pro": 64.8,
        "mmmu": null,
        "scicode": 22.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 31.9,
        "finance": 17.95,
        "marketing": 42.5,
        "maths": 14.7,
        "science": 46.94444444444444,
        "writing": 40.98666666666666
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-18",
    "knowledge_cutoff_date": "2023-10-01",
    "langdb_release_date": "2024-07-18",
    "is_private": false
  },
  {
    "model": "claude-3-5-sonnet-20240620",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-3-5-sonnet-20240620",
      "endpoint": null
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 15.0,
      "per_cached_input_token": 0.3,
      "per_cached_input_write_token": 3.75
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Claude most intelligent model. Highest level of intelligence and capability",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 15.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 30.2,
        "artificial_analysis_intelligence_index": 29.9,
        "artificial_analysis_math_index": null,
        "drop": 87.1,
        "gpqa": 59.650000000000006,
        "hle": 3.9,
        "humaneval": 92.0,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 38.1,
        "math_500": 77.10000000000001,
        "mmlu": null,
        "mmlu_pro": 77.2,
        "mmmu": null,
        "scicode": 36.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "marketing": 15
      },
      "scores": {
        "academia": 44.775000000000006,
        "marketing": 63.181250000000006,
        "programming": 30.2,
        "science": 60.28055555555556,
        "writing": 57.275000000000006
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-06-21",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-04-01",
    "langdb_release_date": "2024-06-21",
    "is_private": false
  },
  {
    "model": "llama3-2-3b-instruct-v1.0",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "us.meta.llama3-2-3b-instruct-v1:0",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.15
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Text-only lightweight model built to deliver highly accurate and relevant results. Designed for applications requiring low-latency inferencing and limited computational resources. Ideal for query and prompt rewriting, mobile AI-powered writing assistants, and customer service applications, particularly on edge devices where its efficiency and low latency enable seamless integration into various applications, including mobile AI-powered writing assistants and customer service chatbots.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gpt-4o-mini-search-preview",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4o-mini-search-preview",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "GPT-4o mini Search Preview is a specialized model trained to understand and execute web search queries with the Chat Completions API.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": 79.7,
        "gpqa": 40.2,
        "hle": null,
        "humaneval": 87.2,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": 59.4,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 18
      },
      "scores": {
        "science": 43.69090909090909,
        "vision": 59.4,
        "writing": 40.2
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-18",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2023-10-01",
    "langdb_release_date": "2024-07-18",
    "is_private": false
  },
  {
    "model": "mistral-7b-instruct-v0.2",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "mistral.mistral-7b-instruct-v0:2",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32000
    },
    "description": "A 7B dense Transformer, fast-deployed and easily customizable. Small, yet powerful for a variety of use cases.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 1,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 17.7,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 4.6,
        "math_500": 12.1,
        "mmlu": null,
        "mmlu_pro": 24.5,
        "mmmu": null,
        "scicode": 2.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 9.35,
        "marketing": 17.775,
        "science": 18.85555555555556,
        "writing": 18.42
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2023-09-27",
    "knowledge_cutoff_date": "2023-03-31",
    "langdb_release_date": "2023-09-27",
    "is_private": false
  },
  {
    "model": "grok-2",
    "model_provider": "xai",
    "inference_provider": {
      "provider": "xai",
      "model_name": "grok-2",
      "endpoint": "https://api.x.ai/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 10.0,
      "per_cached_input_token": 0.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Grok-2 is an advanced AI model developed by xAI, designed to provide highly accurate and helpful responses to a wide range of questions, often with a unique perspective on humanity.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 56.00000000000001,
        "hle": null,
        "humaneval": 88.4,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": 66.10000000000001,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 15
      },
      "scores": {
        "science": 57.83636363636363,
        "vision": 66.10000000000001,
        "writing": 56.00000000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-08-13",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-02-15",
    "langdb_release_date": "2024-08-13",
    "is_private": false
  },
  {
    "model": "grok-2-vision-1212",
    "model_provider": "xai",
    "inference_provider": {
      "provider": "xai",
      "model_name": "grok-2-vision-1212",
      "endpoint": "https://api.x.ai/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 10.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Grok-2-vision-1212 is an advanced AI model developed by xAI that integrates multimodal capabilities, allowing it to process and understand both text and visual inputs to provide more comprehensive and context-aware responses",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "deepseek-reasoner",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepseek",
      "model_name": "deepseek-reasoner",
      "endpoint": "https://api.deepseek.com/v1"
    },
    "price": {
      "per_input_token": 0.28,
      "per_output_token": 0.42,
      "per_cached_input_token": 0.028
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "DeepSeek-V3.2-Exp (Thinking Mode) is an advanced AI model designed to enhance logical reasoning and problem-solving capabilities, leveraging deep learning techniques to provide accurate and contextually relevant insights across various domains.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 47.2,
        "artificial_analysis_intelligence_index": 54,
        "artificial_analysis_math_index": 89.7,
        "drop": null,
        "gpqa": 77.9,
        "hle": 13.0,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 78.4,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 85.1,
        "mmmu": null,
        "scicode": 39.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 12,
        "finance": 9,
        "maths": 5,
        "programming": 8,
        "science": 18
      },
      "scores": {
        "academia": 65.95,
        "finance": 71.85,
        "marketing": 59.010000000000005,
        "maths": 89.7,
        "programming": 47.2,
        "science": 73.4888888888889,
        "writing": 57.96
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-29",
    "knowledge_cutoff_date": "2025-02-22",
    "langdb_release_date": "2025-09-29",
    "is_private": false
  },
  {
    "model": "deepseek-chat",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepseek",
      "model_name": "deepseek-chat",
      "endpoint": "https://api.deepseek.com/v1"
    },
    "price": {
      "per_input_token": 0.28,
      "per_output_token": 0.42,
      "per_cached_input_token": 0.028
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "DeepSeek-V3.2-Exp (Non-thinking Mode) is an advanced conversational AI model designed to provide intelligent",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 39,
        "artificial_analysis_intelligence_index": 44.8,
        "artificial_analysis_math_index": 49.7,
        "drop": null,
        "gpqa": 73.5,
        "hle": 6.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 57.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 83.3,
        "mmmu": null,
        "scicode": 36.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "programming": 19
      },
      "scores": {
        "academia": 59.15,
        "finance": 47.25,
        "marketing": 53.81999999999999,
        "maths": 49.7,
        "programming": 39,
        "science": 69.84444444444445,
        "writing": 53.18
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-29",
    "knowledge_cutoff_date": "2025-02-22",
    "langdb_release_date": "2025-09-29",
    "is_private": false
  },
  {
    "model": "chatgpt-4o-latest",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "chatgpt-4o-latest",
      "endpoint": null
    },
    "price": {
      "per_input_token": 5.0,
      "per_output_token": 15.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "OpenAI ChatGPT 4o is continually updated by OpenAI to point to the current version of GPT-4o used by ChatGPT. It therefore differs slightly from the API version of [GPT-4o](/models/openai/gpt-4o) in that it has additional RLHF. It is intended for research and evaluation.\n\nOpenAI notes that this model is not suited for production use-cases as it may be removed or redirected to another model in the future.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 32.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 35.6,
        "artificial_analysis_math_index": 25.7,
        "drop": null,
        "gpqa": 65.5,
        "hle": 5.0,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 42.5,
        "math_500": 89.3,
        "mmlu": null,
        "mmlu_pro": 80.30000000000001,
        "mmmu": null,
        "scicode": 36.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "marketing": 10
      },
      "scores": {
        "academia": 50.55,
        "finance": 30.65,
        "marketing": 67.275,
        "maths": 25.7,
        "science": 64.53333333333335,
        "writing": 60.8
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-03-27",
    "knowledge_cutoff_date": "2023-10-01",
    "langdb_release_date": "2025-03-27",
    "is_private": false
  },
  {
    "model": "dall-e-2",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "dall-e-2",
      "endpoint": null
    },
    "price": {
      "type_prices": {
        "standard": {
          "256x256": 0.016,
          "1024x1024": 0.02,
          "512x512": 0.018
        }
      },
      "mp_price": 1.23,
      "valid_from": null
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "image"
    ],
    "capabilities": [],
    "type": "image_generation",
    "limits": {
      "max_context_size": 0
    },
    "description": "DALL·E 2 is an advanced AI model by OpenAI that generates high-quality images from text descriptions, allowing for creative visualizations and edits of images based on user prompts.",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "dall-e-3",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "dall-e-3",
      "endpoint": null
    },
    "price": {
      "type_prices": {
        "hd": {
          "1024x1024": 0.08,
          "1792x1024": 0.12,
          "1024x1792": 0.12
        },
        "standard": {
          "1024x1792": 0.08,
          "1792x1024": 0.08,
          "1024x1024": 0.04
        }
      },
      "mp_price": null,
      "valid_from": null
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "image"
    ],
    "capabilities": [],
    "type": "image_generation",
    "limits": {
      "max_context_size": 0
    },
    "description": "DALL·E 3 is the latest iteration of OpenAI's image generation model, offering even more accurate, detailed, and creative image creation from text prompts, with improved coherence and understanding of complex requests.",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gpt-3.5-turbo",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-3.5-turbo-0125",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 1.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 16385
    },
    "description": "The latest GPT-3.5 Turbo model with higher accuracy at responding in requested formats and a fix for a bug which caused a text encoding issue for non-English language function calls.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 10.7,
        "artificial_analysis_intelligence_index": 8.3,
        "artificial_analysis_math_index": null,
        "drop": 70.19999999999999,
        "gpqa": 30.25,
        "hle": null,
        "humaneval": 68.0,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": 44.1,
        "mmlu": null,
        "mmlu_pro": 46.2,
        "mmmu": 0,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 19.275,
        "marketing": 34.73125,
        "programming": 10.7,
        "science": 33.09166666666667,
        "vision": 0,
        "writing": 40.21875
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2023-03-21",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2021-09-30",
    "langdb_release_date": "2023-03-21",
    "is_private": false
  },
  {
    "model": "gpt-3.5-turbo-0613",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-3.5-turbo-0613",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 2.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 4095
    },
    "description": "GPT-3.5 Turbo is OpenAI's fastest model. It can understand and generate natural language or code, and is optimized for chat and traditional completion tasks.\n\nTraining data up to Sep 2021.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gpt-3.5-turbo-instruct",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-3.5-turbo-instruct",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.5,
      "per_output_token": 2.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 4095
    },
    "description": "This model is a variant of GPT-3.5 Turbo tuned for instructional prompts and omitting chat-related optimizations. Training data: up to Sep 2021.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gpt-4-0314",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4-0314",
      "endpoint": null
    },
    "price": {
      "per_input_token": 30.0,
      "per_output_token": 60.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 8191
    },
    "description": "GPT-4-0314 is the first version of GPT-4 released, with a context length of 8,192 tokens, and was supported until June 14. Training data: up to Sep 2021.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "gpt-4-1106-preview",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4-1106-preview",
      "endpoint": null
    },
    "price": {
      "per_input_token": 10.0,
      "per_output_token": 30.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "The latest GPT-4 Turbo model with vision capabilities. Vision requests can now use JSON mode and function calling.\n\nTraining data: up to April 2023.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "gpt-4o-2024-05-13",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-4o-2024-05-13",
      "endpoint": null
    },
    "price": {
      "per_input_token": 5.0,
      "per_output_token": 15.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "GPT-4o (\"o\" for \"omni\") is OpenAI's latest AI model, supporting both text and image inputs with text outputs. It maintains the intelligence level of [GPT-4 Turbo](/models/openai/gpt-4-turbo) while being twice as fast and 50% more cost-effective. GPT-4o also offers improved performance in processing non-English languages and enhanced visual capabilities.\n\nFor benchmarking against other models, it was briefly called [\"im-also-a-good-gpt2-chatbot\"](https://twitter.com/LiamFedus/status/1790064963966370209)\n\n#multimodal",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 15.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 24,
        "artificial_analysis_intelligence_index": 27,
        "artificial_analysis_math_index": 6,
        "drop": 83.39999999999999,
        "gpqa": 53.95000000000001,
        "hle": 3.3000000000000003,
        "humaneval": 90.2,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 30.9,
        "math_500": 75.9,
        "mmlu": null,
        "mmlu_pro": 74.8,
        "mmmu": null,
        "scicode": 33.300000000000004,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 40.47500000000001,
        "finance": 16.5,
        "marketing": 34.3875,
        "maths": 6,
        "programming": 24,
        "science": 56.43055555555557,
        "writing": 35.6975
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-05-13",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2023-10-01",
    "langdb_release_date": "2024-05-13",
    "is_private": false
  },
  {
    "model": "gpt-5",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-5",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.25,
      "per_output_token": 10.0,
      "per_cached_input_token": 0.125
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 400000
    },
    "description": "GPT-5 is OpenAI’s most advanced model, offering major improvements in reasoning, code quality, and user experience. It is optimized for complex tasks that require step-by-step reasoning, instruction following, and accuracy in high-stakes use cases. It supports test-time routing features and advanced prompt understanding, including user-specified intent like \"think hard about this.\" Improvements include reductions in hallucination, sycophancy, and better performance in coding, writing, and health-related tasks.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 95.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 52.7,
        "artificial_analysis_intelligence_index": 68.5,
        "artificial_analysis_math_index": 94.3,
        "drop": null,
        "gpqa": 85.39999999999999,
        "hle": 26.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 84.6,
        "math_500": 99.4,
        "mmlu": null,
        "mmlu_pro": 87.1,
        "mmmu": null,
        "scicode": 42.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 1,
        "finance": 1,
        "marketing": 1,
        "maths": 1,
        "programming": 2,
        "science": 6,
        "writing": 7
      },
      "scores": {
        "academia": 76.94999999999999,
        "finance": 81.4,
        "marketing": 77.50499999999998,
        "maths": 94.3,
        "programming": 52.7,
        "science": 79.51666666666667,
        "writing": 74.41
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-08-07",
    "knowledge_cutoff_date": "2024-10-01",
    "langdb_release_date": "2025-08-07",
    "is_private": false
  },
  {
    "model": "gpt-5-chat",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-5-chat-latest",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.25,
      "per_output_token": 10.0,
      "per_cached_input_token": 0.125
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 400000
    },
    "description": "GPT-5 Chat is designed for advanced, natural, multimodal, and context-aware conversations for enterprise applications.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 34.7,
        "artificial_analysis_intelligence_index": 41.8,
        "artificial_analysis_math_index": 48.3,
        "drop": null,
        "gpqa": 68.60000000000001,
        "hle": 5.800000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 54.3,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 82.0,
        "mmmu": null,
        "scicode": 37.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "marketing": 18
      },
      "scores": {
        "academia": 55.2,
        "finance": 45.05,
        "marketing": 60.72,
        "maths": 48.3,
        "programming": 34.7,
        "science": 66.83333333333334,
        "writing": 58.545
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-08-07",
    "knowledge_cutoff_date": "2024-10-01",
    "is_private": false
  },
  {
    "model": "gpt-5-mini",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-5-mini",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.25,
      "per_output_token": 2.0,
      "per_cached_input_token": 0.025
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 400000
    },
    "description": "GPT-5 Mini is a compact version of GPT-5, designed to handle lighter-weight reasoning tasks. It provides the same instruction-following and safety-tuning benefits as GPT-5, but with reduced latency and cost. GPT-5 Mini is the successor to OpenAI's o4-mini model.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 51.4,
        "artificial_analysis_intelligence_index": 64.3,
        "artificial_analysis_math_index": 90.7,
        "drop": null,
        "gpqa": 82.8,
        "hle": 19.7,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 83.8,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 83.7,
        "mmmu": null,
        "scicode": 39.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 4,
        "finance": 3,
        "marketing": 2,
        "maths": 4,
        "programming": 4,
        "science": 11,
        "writing": 8
      },
      "scores": {
        "academia": 73.55,
        "finance": 77.5,
        "marketing": 74.515,
        "maths": 90.7,
        "programming": 51.4,
        "science": 76.13888888888889,
        "writing": 71.16499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-07",
    "knowledge_cutoff_date": "2024-10-01",
    "langdb_release_date": "2025-08-07",
    "is_private": false
  },
  {
    "model": "gpt-5-nano",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "gpt-5-nano",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.4,
      "per_cached_input_token": 0.005
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 400000
    },
    "description": "GPT-5-Nano is the smallest and fastest variant in the GPT-5 system, optimized for developer tools, rapid interactions, and ultra-low latency environments. While limited in reasoning depth compared to its larger counterparts, it retains key instruction-following and safety features. It is the successor to GPT-4.1-nano and offers a lightweight option for cost-sensitive or real-time applications.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 42.3,
        "artificial_analysis_intelligence_index": 51,
        "artificial_analysis_math_index": 83.7,
        "drop": null,
        "gpqa": 67.60000000000001,
        "hle": 8.200000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 78.9,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 78.0,
        "mmmu": null,
        "scicode": 36.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 13,
        "marketing": 17,
        "maths": 10,
        "programming": 14
      },
      "scores": {
        "academia": 59.3,
        "finance": 67.35,
        "marketing": 60.77,
        "maths": 83.7,
        "programming": 42.3,
        "science": 65.04444444444445,
        "writing": 57.785
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-07",
    "knowledge_cutoff_date": "2024-10-01",
    "langdb_release_date": "2025-08-07",
    "is_private": false
  },
  {
    "model": "o1",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "o1",
      "endpoint": null
    },
    "price": {
      "per_input_token": 15.0,
      "per_output_token": 60.0,
      "per_cached_input_token": 7.5
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "The latest and strongest model family from OpenAI, o1 is designed to spend more time thinking before responding. The o1 model series is trained with large-scale reinforcement learning to reason using chain of thought. \n\nThe o1 models are optimized for math, science, programming, and other STEM-related tasks. They consistently exhibit PhD-level accuracy on benchmarks in physics, chemistry, and biology. Learn more in the [launch announcement](https://openai.com/o1).\n",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 72.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 38.6,
        "artificial_analysis_intelligence_index": 47.2,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 76.35000000000001,
        "hle": 7.7,
        "humaneval": 88.1,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 67.9,
        "math_500": 97.0,
        "mmlu": null,
        "mmlu_pro": 84.1,
        "mmmu": 77.60000000000001,
        "scicode": 35.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "marketing": 4,
        "vision": 7,
        "writing": 13
      },
      "scores": {
        "academia": 61.775000000000006,
        "marketing": 73.90625,
        "programming": 38.6,
        "science": 72.3225,
        "vision": 77.60000000000001,
        "writing": 66.495
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-12-17",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2021-09-01",
    "langdb_release_date": "2024-12-17",
    "is_private": false
  },
  {
    "model": "o3",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "o3",
      "endpoint": null
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 8.0,
      "per_cached_input_token": 0.5
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "o3 is a well-rounded and powerful model across domains. It sets a new standard for math, science, coding, and visual reasoning tasks. It also excels at technical writing and instruction-following. Use it to think through multi-step problems that involve analysis across text, code, and images.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 90.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 52.2,
        "artificial_analysis_intelligence_index": 65.5,
        "artificial_analysis_math_index": 88.3,
        "drop": null,
        "gpqa": 83.0,
        "hle": 20.0,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 80.80000000000001,
        "math_500": 99.2,
        "mmlu": null,
        "mmlu_pro": 85.3,
        "mmmu": 82.89999999999999,
        "scicode": 41.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 3,
        "finance": 4,
        "marketing": 3,
        "maths": 7,
        "programming": 3,
        "science": 9,
        "vision": 1,
        "writing": 9
      },
      "scores": {
        "academia": 74.25,
        "finance": 76.9,
        "marketing": 74.235,
        "maths": 88.3,
        "programming": 52.2,
        "science": 77.495,
        "vision": 82.89999999999999,
        "writing": 70.95
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-04-16",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-05-31",
    "langdb_release_date": "2025-04-16",
    "is_private": false
  },
  {
    "model": "o3-mini",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "o3-mini",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.1,
      "per_output_token": 4.4,
      "per_cached_input_token": 0.55
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "OpenAI o3-mini is a cost-efficient language model optimized for STEM reasoning tasks, particularly excelling in science, mathematics, and coding.\n\nThis model supports the `reasoning_effort` parameter, which can be set to \"high\", \"medium\", or \"low\" to control the thinking time of the model. The default is \"medium\". OpenRouter also offers the model slug `openai/o3-mini-high` to default the parameter to \"high\".\n\nThe model features three adjustable reasoning effort levels and supports key developer capabilities including function calling, structured outputs, and streaming, though it does not include vision processing capabilities.\n\nThe model demonstrates significant improvements over its predecessor, with expert testers preferring its responses 56% of the time and noting a 39% reduction in major errors on complex questions. With medium reasoning effort settings, o3-mini matches the performance of the larger o1 model on challenging reasoning evaluations like AIME and GPQA, while maintaining lower latency and cost.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 77.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 39.4,
        "artificial_analysis_intelligence_index": 48.1,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 76.0,
        "hle": 8.7,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 71.7,
        "math_500": 97.3,
        "mmlu": null,
        "mmlu_pro": 79.10000000000001,
        "mmmu": null,
        "scicode": 39.900000000000006,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "marketing": 5,
        "programming": 18,
        "writing": 18
      },
      "scores": {
        "academia": 62.05,
        "marketing": 70.9625,
        "programming": 39.4,
        "science": 69.72777777777779,
        "writing": 64.09
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-30",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2023-09-30",
    "langdb_release_date": "2025-01-30",
    "is_private": false
  },
  {
    "model": "o4-mini",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "o4-mini",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.1,
      "per_output_token": 4.4,
      "per_cached_input_token": 0.275
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "o4-mini is latest small o-series model. It's optimized for fast, effective reasoning with exceptionally efficient performance in coding and visual tasks.\n\n",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 94.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 48.9,
        "artificial_analysis_intelligence_index": 59.6,
        "artificial_analysis_math_index": 90.7,
        "drop": null,
        "gpqa": 79.89999999999999,
        "hle": 17.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 85.9,
        "math_500": 98.9,
        "mmlu": null,
        "mmlu_pro": 83.2,
        "mmmu": 81.6,
        "scicode": 46.5,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 8,
        "finance": 7,
        "marketing": 9,
        "maths": 4,
        "programming": 7,
        "science": 15,
        "vision": 3,
        "writing": 15
      },
      "scores": {
        "academia": 69.75,
        "finance": 75.15,
        "marketing": 67.86500000000001,
        "maths": 90.7,
        "programming": 48.9,
        "science": 74.98499999999999,
        "vision": 81.6,
        "writing": 65.46
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-16",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-05-31",
    "langdb_release_date": "2025-04-16",
    "is_private": false
  },
  {
    "model": "text-embedding-3-large",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "text-embedding-3-large",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.13,
      "per_output_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "embeddings",
    "limits": {
      "max_context_size": 8191
    },
    "description": "Most capable embedding model for both english and non-english tasks",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "text-embedding-3-small",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "text-embedding-3-small",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.02,
      "per_output_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "embeddings",
    "limits": {
      "max_context_size": 8191
    },
    "description": "Increased performance over 2nd generation ada embedding model",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "text-embedding-ada-002",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "openai",
      "model_name": "text-embedding-ada-002",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "embeddings",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Most capable 2nd generation embedding model, replacing 16 first generation models",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "claude-3.5-haiku",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-3-5-haiku-20241022",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.8,
      "per_output_token": 4.0,
      "per_cached_input_token": 0.08,
      "per_cached_input_write_token": 1.6
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Claude 3.5 Haiku features offers enhanced capabilities in speed, coding accuracy, and tool use. Engineered to excel in real-time applications, it delivers quick response times that are essential for dynamic tasks such as chat interactions and immediate coding suggestions.\n\nThis makes it highly suitable for environments that demand both speed and precision, such as software development, customer service bots, and data management systems.\n\nThis model is currently pointing to [Claude 3.5 Haiku (2024-10-22)](/anthropic/claude-3-5-haiku-20241022).",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 3.3000000000000003,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 20.2,
        "artificial_analysis_math_index": null,
        "drop": 83.1,
        "gpqa": 41.2,
        "hle": 3.5000000000000004,
        "humaneval": 88.1,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 31.4,
        "math_500": 72.1,
        "mmlu": null,
        "mmlu_pro": 63.4,
        "mmmu": null,
        "scicode": 27.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 30.699999999999996,
        "marketing": 49.825,
        "science": 45.644444444444446,
        "writing": 44.76
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-10-22",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-04-01",
    "is_private": false
  },
  {
    "model": "claude-3-haiku-20240307",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-3-haiku-20240307",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.25,
      "per_output_token": 1.25,
      "per_cached_input_token": 0.025,
      "per_cached_input_write_token": 0.3125
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Fastest and most compact model for near-instant responsiveness. Quick and accurate targeted performance",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 1.0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 9.6,
        "artificial_analysis_math_index": null,
        "drop": 78.4,
        "gpqa": 33.300000000000004,
        "hle": null,
        "humaneval": 75.9,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 15.4,
        "math_500": 39.4,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": 18.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 21.450000000000003,
        "marketing": 17.500000000000004,
        "science": 33.300000000000004,
        "writing": 33.300000000000004
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-03-13",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2023-08-01",
    "langdb_release_date": "2024-03-13",
    "is_private": false
  },
  {
    "model": "claude-3-opus-20240229",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-3-opus-20240229",
      "endpoint": null
    },
    "price": {
      "per_input_token": 5.0,
      "per_output_token": 75.0,
      "per_cached_input_token": 0.5,
      "per_cached_input_write_token": 6.25
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Powerful model for highly complex tasks. Top-level intelligence, fluency, and understanding",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 3.3000000000000003,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.5,
        "artificial_analysis_intelligence_index": 20.6,
        "artificial_analysis_math_index": null,
        "drop": 83.1,
        "gpqa": 49.65,
        "hle": 3.1,
        "humaneval": 84.89999999999999,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 27.9,
        "math_500": 64.1,
        "mmlu": null,
        "mmlu_pro": 69.6,
        "mmmu": null,
        "scicode": 23.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 35.125,
        "marketing": 54.85625,
        "programming": 19.5,
        "science": 52.23611111111111,
        "writing": 50.31499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-02-29",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2023-08-01",
    "langdb_release_date": "2024-02-29",
    "is_private": false
  },
  {
    "model": "claude-haiku-4.5",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-haiku-4-5-20251001",
      "endpoint": null
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 5.0,
      "per_cached_input_token": 0.1,
      "per_cached_input_write_token": 1.5
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Claude Haiku 4.5 is our fastest, most cost-efficient model, matching Sonnet 4’s performance on coding, computer use, and agent tasks. Claude Haiku 4.5 scores 73.3% on SWE-bench Verified, making it one of the world's best coding models.",
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-10-15",
    "langdb_release_date": "2025-10-15",
    "is_private": false
  },
  {
    "model": "claude-opus-4.1",
    "model_provider": "anthropic",
    "inference_provider": {
      "provider": "anthropic",
      "model_name": "claude-opus-4-1-20250805",
      "endpoint": null
    },
    "price": {
      "per_input_token": 15.0,
      "per_output_token": 75.0,
      "per_cached_input_token": 1.5,
      "per_cached_input_write_token": 18.75
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Claude Opus 4.1 is an updated version of Anthropic’s flagship model, offering improved performance in coding, reasoning, and agentic tasks. It achieves 74.5% on SWE-bench Verified and shows notable gains in multi-file code refactoring, debugging precision, and detail-oriented reasoning. The model supports extended thinking up to 64K tokens and is optimized for tasks involving research, data analysis, and tool-assisted reasoning.",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 46.1,
        "artificial_analysis_intelligence_index": 59.3,
        "artificial_analysis_math_index": 80.3,
        "drop": null,
        "gpqa": 80.9,
        "hle": 11.9,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 65.4,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 88.0,
        "mmmu": null,
        "scicode": 40.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 7,
        "finance": 11,
        "marketing": 8,
        "maths": 12,
        "programming": 9,
        "science": 12,
        "writing": 14
      },
      "scores": {
        "academia": 70.1,
        "finance": 69.8,
        "marketing": 68.485,
        "maths": 80.3,
        "programming": 46.1,
        "science": 75.99444444444445,
        "writing": 65.75
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-05-22",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-03-01",
    "langdb_release_date": "2025-05-22",
    "is_private": false
  },
  {
    "model": "gemini-embedding-001",
    "model_provider": "google",
    "inference_provider": {
      "provider": "gemini",
      "model_name": "gemini-embedding-001\n\n",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "embeddings",
    "limits": {
      "max_context_size": 2048
    },
    "description": "The Gemini embedding model, gemini-embedding-001, is trained using the Matryoshka Representation Learning (MRL) technique which teaches a model to learn high-dimensional embeddings that have initial segments (or prefixes) which are also useful, simpler versions of the same data.",
    "virtual_model_id": null,
    "min_service_level": 0,
    "license": "Proprietary",
    "is_private": false
  },
  {
    "model": "command-r-plus-v1.0",
    "model_provider": "cohere",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "cohere.command-r-plus-v1:0",
      "endpoint": null
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 15.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Command R+ is an instruction-following conversational model that performs language tasks at a higher quality, more reliably, and with a longer context than previous models. It is best suited for complex RAG workflows and multi-step tool use.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "command-r-v1.0",
    "model_provider": "cohere",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "cohere.command-r-v1:0",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 1.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "instruction-following conversational model that performs language tasks with high quality, more reliably and with a longer context than our base generative models.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama3-1-70b-instruct-v1.0",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "meta.llama3-1-70b-instruct-v1:0",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.72,
      "per_output_token": 0.72
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Ideal for content creation, conversational AI, language understanding, research development, and enterprise applications. With new latency-optimized inference capabilities available in public preview, this model sets a new performance benchmark for AI solutions that process extensive text inputs, enabling applications to respond more quickly and handle longer queries more efficiently.",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama3-1-8b-instruct-v1.0",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "us.meta.llama3-1-8b-instruct-v1:0",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.22,
      "per_output_token": 0.22
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Ideal for limited computational power and resources, faster training times, and edge devices.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama3-2-1b-instruct-v1.0",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "us.meta.llama3-2-1b-instruct-v1:0",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Text-only lightweight model built to deliver fast and accurate responses. Ideal for edge devices and mobile applications. The model enables on-device AI capabilities while preserving user privacy and minimizing latency.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama3-70b-instruct-v1.0",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "us.meta.llama3-70b-instruct-v1:0",
      "endpoint": null
    },
    "price": {
      "per_input_token": 2.65,
      "per_output_token": 3.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32000
    },
    "description": "ideal for content creation, conversational AI, language understanding, research development, and enterprise applications. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama3-8b-instruct-v1.0",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "meta.llama3-8b-instruct-v1:0",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32000
    },
    "description": "ideal for limited computational power and resources, and edge devices. The model excels at text summarization, text classification, sentiment analysis, and language translation.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "mixtral-8x7b-instruct-v0.1",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "bedrock",
      "model_name": "mistral.mixtral-8x7b-instruct-v0:1",
      "endpoint": null
    },
    "price": {
      "per_input_token": 0.45,
      "per_output_token": 0.7
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32000
    },
    "description": "A 7B sparse Mixture-of-Experts model with stronger capabilities than Mistral AI 7B. Uses 12B active parameters out of 45B total.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2023-12-11",
    "knowledge_cutoff_date": "2023-06-14",
    "langdb_release_date": "2023-12-11",
    "is_private": false
  },
  {
    "model": "grok-3",
    "model_provider": "xai",
    "inference_provider": {
      "provider": "xai",
      "model_name": "grok-3",
      "endpoint": "https://api.x.ai/v1"
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 15.0,
      "per_cached_input_token": 0.75
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Grok 3 is the latest model from xAI. It's their flagship model that excels at enterprise use cases like data extraction, coding, and text summarization. Possesses deep domain knowledge in finance, healthcare, law, and science.\n\nExcels in structured tasks and benchmarks like GPQA, LCB, and MMLU-Pro where it outperforms Grok 3 Mini even on high thinking.\n\nNote: That there are two xAI endpoints for this model. By default when using this model we will always route you to the base endpoint. If you want the fast endpoint you can add `provider: { sort: throughput}`, to sort by throughput instead.\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 33.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 30,
        "artificial_analysis_intelligence_index": 45.3,
        "artificial_analysis_math_index": 58,
        "drop": null,
        "gpqa": 84.6,
        "hle": 5.1,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 42.5,
        "math_500": 87.0,
        "mmlu": null,
        "mmlu_pro": 79.9,
        "mmmu": 78.0,
        "scicode": 36.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 15,
        "marketing": 19,
        "science": 16,
        "vision": 6
      },
      "scores": {
        "academia": 64.94999999999999,
        "finance": 51.65,
        "marketing": 59.215,
        "maths": 58,
        "programming": 30,
        "science": 74.345,
        "vision": 78.0,
        "writing": 58.575
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-02-17",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-11-17",
    "langdb_release_date": "2025-02-17",
    "is_private": false
  },
  {
    "model": "grok-3-mini",
    "model_provider": "xai",
    "inference_provider": {
      "provider": "xai",
      "model_name": "grok-3-mini",
      "endpoint": "https://api.x.ai/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 0.5,
      "per_cached_input_token": 0.075
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Grok 3 Mini is a lightweight, smaller thinking model. Unlike traditional models that generate answers immediately, Grok 3 Mini thinks before responding. It’s ideal for reasoning-heavy tasks that don’t demand extensive domain knowledge, and shines in math-specific and quantitative use cases, such as solving challenging puzzles or math problems.\n\nTransparent \"thinking\" traces accessible. Defaults to low reasoning, can boost with setting `reasoning: { effort: \"high\" }`\n\nNote: That there are two xAI endpoints for this model. By default when using this model we will always route you to the base endpoint. If you want the fast endpoint you can add `provider: { sort: throughput}`, to sort by throughput instead.\n",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 84.0,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 2,
        "writing": 2
      },
      "scores": {
        "science": 84.0,
        "writing": 84.0
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-02-17",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-11-17",
    "langdb_release_date": "2025-02-17",
    "is_private": false
  },
  {
    "model": "grok-code-fast-1",
    "model_provider": "xai",
    "inference_provider": {
      "provider": "xai",
      "model_name": "grok-code-fast",
      "endpoint": "https://api.x.ai/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 1.5,
      "per_cached_input_token": 0.02
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 256000
    },
    "description": "grok-code-fast-1 is exceptionally versatile across the full software development stack and is particularly adept at TypeScript, Python, Java, Rust, C++, and Go. It can complete common programming tasks with minimal oversight, ranging from building zero-to-one projects and providing insightful answers to codebase questions to performing surgical bug fixes.",
    "parameters": {
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 39.4,
        "artificial_analysis_intelligence_index": 48.6,
        "artificial_analysis_math_index": 43.3,
        "drop": null,
        "gpqa": 72.7,
        "hle": 7.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 65.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 79.3,
        "mmmu": null,
        "scicode": 36.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "programming": 18
      },
      "scores": {
        "academia": 60.650000000000006,
        "finance": 45.95,
        "marketing": 55.23,
        "maths": 43.3,
        "programming": 39.4,
        "science": 68.02222222222223,
        "writing": 53.905
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-10",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-03-01",
    "langdb_release_date": "2025-09-10",
    "is_private": false
  },
  {
    "model": "deepseek-chat-v3-0324",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "deepseek-ai/DeepSeek-V3-0324",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.28,
      "per_output_token": 0.88
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek V3, a 685B-parameter, mixture-of-experts model, is the latest iteration of the flagship chat model family from the DeepSeek team.\n\nIt succeeds the [DeepSeek V3](/deepseek/deepseek-chat-v3) model and performs really well on a variety of tasks.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 39,
        "artificial_analysis_intelligence_index": 44.8,
        "artificial_analysis_math_index": 49.7,
        "drop": null,
        "gpqa": 73.5,
        "hle": 6.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 57.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 83.3,
        "mmmu": null,
        "scicode": 36.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "programming": 19
      },
      "scores": {
        "academia": 59.15,
        "finance": 47.25,
        "marketing": 53.81999999999999,
        "maths": 49.7,
        "programming": 39,
        "science": 69.84444444444445,
        "writing": 53.18
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-21",
    "knowledge_cutoff_date": "2025-02-22",
    "langdb_release_date": "2025-08-21",
    "is_private": false
  },
  {
    "model": "deepseek-chat-v3.1",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "deepseek-ai/DeepSeek-V3.1",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek-V3.1 is a large hybrid reasoning model (671B parameters, 37B active) that supports both thinking and non-thinking modes via prompt templates. It extends the DeepSeek-V3 base with a two-phase long-context training process, reaching up to 128K tokens, and uses FP8 microscaling for efficient inference. \n\nThe model improves tool use, code generation, and reasoning efficiency, achieving performance comparable to DeepSeek-R1 on difficult benchmarks while responding more quickly. It supports structured tool calling, code agents, and search agents, making it suitable for research, coding, and agentic workflows. \n\nIt succeeds the [DeepSeek V3-0324](/deepseek/deepseek-chat-v3-0324) model and performs well on a variety of tasks.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 39,
        "artificial_analysis_intelligence_index": 44.8,
        "artificial_analysis_math_index": 49.7,
        "drop": null,
        "gpqa": 73.5,
        "hle": 6.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 57.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 83.3,
        "mmmu": null,
        "scicode": 36.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "programming": 19
      },
      "scores": {
        "academia": 59.15,
        "finance": 47.25,
        "marketing": 53.81999999999999,
        "maths": 49.7,
        "programming": 39,
        "science": 69.84444444444445,
        "writing": 53.18
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-21",
    "knowledge_cutoff_date": "2025-02-22",
    "langdb_release_date": "2025-08-21",
    "is_private": false
  },
  {
    "model": "deepseek-prover-v2",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "deepseek-ai/DeepSeek-Prover-V2-671B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 2.18
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek Prover V2 is a 671B parameter model, speculated to be geared towards logic and mathematics. Likely an upgrade from [DeepSeek-Prover-V1.5](https://huggingface.co/deepseek-ai/DeepSeek-Prover-V1.5-RL) Not much is known about the model yet, as DeepSeek released it on Hugging Face without an announcement or description.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "DeepSeek-R1",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "deepseek-ai/DeepSeek-R1",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.75,
      "per_output_token": 2.4
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 16000
    },
    "description": "DeepSeek-Reasoner is an advanced AI model designed to enhance logical reasoning and problem-solving capabilities, leveraging deep learning techniques to provide accurate and contextually relevant insights across various domains.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 89.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 44.1,
        "artificial_analysis_intelligence_index": 52,
        "artificial_analysis_math_index": 76,
        "drop": null,
        "gpqa": 81.3,
        "hle": 14.9,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 77.0,
        "math_500": 98.3,
        "mmlu": null,
        "mmlu_pro": 84.89999999999999,
        "mmmu": null,
        "scicode": 40.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 11,
        "finance": 16,
        "maths": 13,
        "programming": 12,
        "science": 13
      },
      "scores": {
        "academia": 66.65,
        "finance": 64.0,
        "marketing": 58.78,
        "maths": 76,
        "programming": 44.1,
        "science": 75.32222222222221,
        "writing": 58.48499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "deepseek-r1-0528",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "deepseek-ai/DeepSeek-R1-0528",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 2.15
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "May 28th update to the [original DeepSeek R1](/deepseek/deepseek-r1) Performance on par with [OpenAI o1](/openai/o1), but open-sourced and with fully open reasoning tokens. It's 671B parameters in size, with 37B active in an inference pass.\n\nFully open-source model.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 81.0,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 4,
        "writing": 4
      },
      "scores": {
        "science": 81.0,
        "writing": 81.0
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-05-28",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-11-29",
    "langdb_release_date": "2025-05-28",
    "is_private": false
  },
  {
    "model": "deepseek-r1-05-28",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/deepseek-r1-0528",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 8.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "May 28th update to the [original DeepSeek R1](/deepseek/deepseek-r1) Performance on par with [OpenAI o1](/openai/o1), but open-sourced and with fully open reasoning tokens. It's 671B parameters in size, with 37B active in an inference pass.\n\nFully open-source model.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "default": null,
        "required": false,
        "type": "string"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 89.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 44.1,
        "artificial_analysis_intelligence_index": 52,
        "artificial_analysis_math_index": 76,
        "drop": null,
        "gpqa": 81.3,
        "hle": 14.9,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 77.0,
        "math_500": 98.3,
        "mmlu": null,
        "mmlu_pro": 84.89999999999999,
        "mmmu": null,
        "scicode": 40.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 11,
        "finance": 16,
        "maths": 13,
        "programming": 12,
        "science": 13
      },
      "scores": {
        "academia": 66.65,
        "finance": 64.0,
        "marketing": 58.78,
        "maths": 76,
        "programming": 44.1,
        "science": 75.32222222222221,
        "writing": 58.48499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "DeepSeek-R1-Distill-Llama-70B",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "deepseek-ai/DeepSeek-R1-Distill-Llama-70B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "DeepSeek-R1-Distill models are fine-tuned based on open-source models, using samples generated by DeepSeek-R1.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 67.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.7,
        "artificial_analysis_intelligence_index": 29.9,
        "artificial_analysis_math_index": 53.7,
        "drop": null,
        "gpqa": 65.2,
        "hle": 6.1,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 26.6,
        "math_500": 93.5,
        "mmlu": null,
        "mmlu_pro": 79.5,
        "mmmu": null,
        "scicode": 31.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 47.55,
        "finance": 41.8,
        "marketing": 37.705,
        "maths": 53.7,
        "programming": 19.7,
        "science": 64.19444444444446,
        "writing": 39.915
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "DeepSeek-R1-Distill-Llama-70B",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "deepseek-ai/DeepSeek-R1-Distill-Llama-70B",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 2.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "DeepSeek-R1-Distill models are fine-tuned based on open-source models, using samples generated by DeepSeek-R1.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 67.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.7,
        "artificial_analysis_intelligence_index": 29.9,
        "artificial_analysis_math_index": 53.7,
        "drop": null,
        "gpqa": 65.2,
        "hle": 6.1,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 26.6,
        "math_500": 93.5,
        "mmlu": null,
        "mmlu_pro": 79.5,
        "mmmu": null,
        "scicode": 31.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 47.55,
        "finance": 41.8,
        "marketing": 37.705,
        "maths": 53.7,
        "programming": 19.7,
        "science": 64.19444444444446,
        "writing": 39.915
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "DeepSeek-R1-Distill-Qwen-14B",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "deepseek-ai/DeepSeek-R1-Distill-Qwen-14B",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 1.6,
      "per_output_token": 1.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "DeepSeek-R1-Distill models are fine-tuned based on open-source models, using samples generated by DeepSeek-R1.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 66.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 29.7,
        "artificial_analysis_math_index": 55.7,
        "drop": null,
        "gpqa": 59.099999999999994,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 37.6,
        "math_500": 94.9,
        "mmlu": null,
        "mmlu_pro": 74.0,
        "mmmu": null,
        "scicode": 23.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 44.4,
        "finance": 42.7,
        "marketing": 33.155,
        "maths": 55.7,
        "science": 58.81666666666667,
        "writing": 35.08
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "DeepSeek-R1-Distill-Qwen-1.5B",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 0.18,
      "per_output_token": 0.18
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "DeepSeek-R1-Distill models are fine-tuned based on open-source models, using samples generated by DeepSeek-R1.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 17.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 8.6,
        "artificial_analysis_math_index": 22,
        "drop": null,
        "gpqa": 33.800000000000004,
        "hle": 3.3000000000000003,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 7.000000000000001,
        "math_500": 68.7,
        "mmlu": null,
        "mmlu_pro": 26.9,
        "mmmu": null,
        "scicode": 6.6000000000000005,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 21.200000000000003,
        "finance": 15.3,
        "marketing": 13.325000000000005,
        "maths": 22,
        "science": 27.72777777777778,
        "writing": 15.500000000000002
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "DeepSeek-V3",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "deepseek-ai/DeepSeek-V3",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 1.25,
      "per_output_token": 1.25
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "A strong Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token from Deepseek.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 25.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 25.9,
        "artificial_analysis_intelligence_index": 32.5,
        "artificial_analysis_math_index": 26,
        "drop": 91.6,
        "gpqa": 57.400000000000006,
        "hle": 3.5999999999999996,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 35.9,
        "math_500": 88.7,
        "mmlu": null,
        "mmlu_pro": 75.2,
        "mmmu": null,
        "scicode": 35.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 44.95,
        "finance": 29.25,
        "marketing": 44.059999999999995,
        "maths": 26,
        "programming": 25.9,
        "science": 58.344444444444456,
        "writing": 43.72
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-25",
    "license": "MIT + Model License (Commercial use allowed)",
    "knowledge_cutoff_date": "2024-06-28",
    "langdb_release_date": "2024-12-25",
    "is_private": false
  },
  {
    "model": "DeepSeek-V3",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "deepseek-ai/DeepSeek-V3",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.49,
      "per_output_token": 0.89
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 16000
    },
    "description": "A strong Mixture-of-Experts (MoE) language model with 671B total parameters with 37B activated for each token from Deepseek.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 25.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 25.9,
        "artificial_analysis_intelligence_index": 32.5,
        "artificial_analysis_math_index": 26,
        "drop": 91.6,
        "gpqa": 57.400000000000006,
        "hle": 3.5999999999999996,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 35.9,
        "math_500": 88.7,
        "mmlu": null,
        "mmlu_pro": 75.2,
        "mmmu": null,
        "scicode": 35.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 44.95,
        "finance": 29.25,
        "marketing": 44.059999999999995,
        "maths": 26,
        "programming": 25.9,
        "science": 58.344444444444456,
        "writing": 43.72
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-25",
    "license": "MIT + Model License (Commercial use allowed)",
    "knowledge_cutoff_date": "2024-06-28",
    "langdb_release_date": "2024-12-25",
    "is_private": false
  },
  {
    "model": "deepseek-v3-03-24",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/deepseek-v3-0324",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 0.9,
      "per_output_token": 0.9
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek V3, a 685B-parameter, mixture-of-experts model, is the latest iteration of the flagship chat model family from the DeepSeek team.\n\nIt succeeds the [DeepSeek V3](/deepseek/deepseek-chat-v3) model and performs really well on a variety of tasks.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 25.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 25.9,
        "artificial_analysis_intelligence_index": 32.5,
        "artificial_analysis_math_index": 26,
        "drop": 91.6,
        "gpqa": 57.400000000000006,
        "hle": 3.5999999999999996,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 35.9,
        "math_500": 88.7,
        "mmlu": null,
        "mmlu_pro": 75.2,
        "mmmu": null,
        "scicode": 35.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 44.95,
        "finance": 29.25,
        "marketing": 44.059999999999995,
        "maths": 26,
        "programming": 25.9,
        "science": 58.344444444444456,
        "writing": 43.72
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-25",
    "license": "MIT + Model License (Commercial use allowed)",
    "knowledge_cutoff_date": "2024-06-28",
    "langdb_release_date": "2024-12-25",
    "is_private": false
  },
  {
    "model": "devstral-small",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "mistralai/Devstral-Small-2507",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.07,
      "per_output_token": 0.28
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Devstral Small 1.1 is a 24B parameter open-weight language model for software engineering agents, developed by Mistral AI in collaboration with All Hands AI. Finetuned from Mistral Small 3.1 and released under the Apache 2.0 license, it features a 128k token context window and supports both Mistral-style function calling and XML output formats.\n\nDesigned for agentic coding workflows, Devstral Small 1.1 is optimized for tasks such as codebase exploration, multi-file edits, and integration into autonomous development agents like OpenHands and Cline. It achieves 53.6% on SWE-Bench Verified, surpassing all other open models on this benchmark, while remaining lightweight enough to run on a single 4090 GPU or Apple silicon machine. The model uses a Tekken tokenizer with a 131k vocabulary and is deployable via vLLM, Transformers, Ollama, LM Studio, and other OpenAI-compatible runtimes.\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 18.5,
        "artificial_analysis_intelligence_index": 27.2,
        "artificial_analysis_math_index": 29.3,
        "drop": null,
        "gpqa": 41.4,
        "hle": 3.7,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 25.4,
        "math_500": 63.5,
        "mmlu": null,
        "mmlu_pro": 62.2,
        "mmmu": null,
        "scicode": 24.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 34.3,
        "finance": 28.25,
        "marketing": 35.82,
        "maths": 29.3,
        "programming": 18.5,
        "science": 45.3,
        "writing": 35.029999999999994
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-10",
    "knowledge_cutoff_date": "2025-01-11",
    "langdb_release_date": "2025-07-10",
    "is_private": false
  },
  {
    "model": "devstral-small-2505",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "mistralai/Devstral-Small-2505",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.06,
      "per_output_token": 0.12
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Devstral-Small-2505 is a 24B parameter agentic LLM fine-tuned from Mistral-Small-3.1, jointly developed by Mistral AI and All Hands AI for advanced software engineering tasks. It is optimized for codebase exploration, multi-file editing, and integration into coding agents, achieving state-of-the-art results on SWE-Bench Verified (46.8%).\n\nDevstral supports a 128k context window and uses a custom Tekken tokenizer. It is text-only, with the vision encoder removed, and is suitable for local deployment on high-end consumer hardware (e.g., RTX 4090, 32GB RAM Macs). Devstral is best used in agentic workflows via the OpenHands scaffold and is compatible with inference frameworks like vLLM, Transformers, and Ollama. It is released under the Apache 2.0 license.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 19.6,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 43.4,
        "hle": 4.0,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 25.8,
        "math_500": 68.4,
        "mmlu": null,
        "mmlu_pro": 63.2,
        "mmmu": null,
        "scicode": 24.5,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 31.5,
        "marketing": 49.825,
        "science": 46.72222222222223,
        "writing": 45.42
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-05-21",
    "knowledge_cutoff_date": "2024-11-22",
    "langdb_release_date": "2025-05-21",
    "is_private": false
  },
  {
    "model": "gemma-2-27b-it",
    "model_provider": "google",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "google/gemma-2-27b-it",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Gemma 2 offers best-in-class performance, runs at incredible speed across different hardware and easily integrates with other AI tools.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 29.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 17.2,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 35.699999999999996,
        "hle": 3.7,
        "humaneval": 51.8,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 27.9,
        "math_500": 54.1,
        "mmlu": null,
        "mmlu_pro": 57.49999999999999,
        "mmmu": null,
        "scicode": 12.5,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 26.449999999999996,
        "marketing": 44.69999999999999,
        "science": 40.62222222222222,
        "writing": 40.2
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-06-27",
    "license": "Gemma",
    "knowledge_cutoff_date": "2023-12-30",
    "langdb_release_date": "2024-06-27",
    "is_private": false
  },
  {
    "model": "gemma-3-12b-it",
    "model_provider": "google",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "google/gemma-3-12b-it",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Gemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling. Gemma 3 12B is the second largest in the family of Gemma 3 models after [Gemma 3 27B](google/gemma-3-27b-it)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 22.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 10.6,
        "artificial_analysis_intelligence_index": 20.4,
        "artificial_analysis_math_index": 18.3,
        "drop": null,
        "gpqa": 40.9,
        "hle": 4.8,
        "humaneval": 85.39999999999999,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 13.7,
        "math_500": 85.3,
        "mmlu": null,
        "mmlu_pro": 59.5,
        "mmmu": null,
        "scicode": 17.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 30.65,
        "finance": 19.35,
        "marketing": 31.980000000000004,
        "maths": 18.3,
        "programming": 10.6,
        "science": 44.12222222222222,
        "writing": 32.339999999999996
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-03-12",
    "license": "Gemma",
    "knowledge_cutoff_date": "2024-09-13",
    "langdb_release_date": "2025-03-12",
    "is_private": false
  },
  {
    "model": "gemma-3-27b-it",
    "model_provider": "google",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "google/gemma-3-27b-it",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.09,
      "per_output_token": 0.17
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Gemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling. Gemma 3 27B is Google's latest open source model, successor to [Gemma 2](google/gemma-2-27b-it)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 25.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 12.8,
        "artificial_analysis_intelligence_index": 22.1,
        "artificial_analysis_math_index": 20.7,
        "drop": null,
        "gpqa": 42.6,
        "hle": 4.7,
        "humaneval": 87.8,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 13.7,
        "math_500": 88.3,
        "mmlu": null,
        "mmlu_pro": 66.9,
        "mmmu": null,
        "scicode": 21.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 32.35,
        "finance": 21.4,
        "marketing": 32.315000000000005,
        "maths": 20.7,
        "programming": 12.8,
        "science": 47.8388888888889,
        "writing": 32.96
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-03-12",
    "license": "Gemma",
    "knowledge_cutoff_date": "2024-09-13",
    "langdb_release_date": "2025-03-12",
    "is_private": false
  },
  {
    "model": "gemma-3-4b-it",
    "model_provider": "google",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "google/gemma-3-4b-it",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.02,
      "per_output_token": 0.04
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Gemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 6.4,
        "artificial_analysis_intelligence_index": 14.7,
        "artificial_analysis_math_index": 12.7,
        "drop": null,
        "gpqa": 29.95,
        "hle": 5.2,
        "humaneval": 71.3,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 11.2,
        "math_500": 76.6,
        "mmlu": null,
        "mmlu_pro": 41.7,
        "mmmu": null,
        "scicode": 7.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 22.325,
        "finance": 13.7,
        "marketing": 23.5925,
        "maths": 12.7,
        "programming": 6.4,
        "science": 31.76944444444445,
        "writing": 23.9375
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-03-12",
    "license": "Gemma",
    "knowledge_cutoff_date": "2024-08-01",
    "langdb_release_date": "2025-03-12",
    "is_private": false
  },
  {
    "model": "gpt-oss-120b",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "openai/gpt-oss-120b",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.09,
      "per_output_token": 0.45
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "gpt-oss-120b is an open-weight, 117B-parameter Mixture-of-Experts (MoE) language model from OpenAI designed for high-reasoning, agentic, and general-purpose production use cases. It activates 5.1B parameters per forward pass and is optimized to run on a single H100 GPU with native MXFP4 quantization. The model supports configurable reasoning depth, full chain-of-thought access, and native tool use, including function calling, browsing, and structured output generation.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 41.2,
        "artificial_analysis_intelligence_index": 58,
        "artificial_analysis_math_index": 93.4,
        "drop": null,
        "gpqa": 79.15,
        "hle": 18.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 65.3,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 80.80000000000001,
        "mmmu": null,
        "scicode": 36.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 9,
        "finance": 5,
        "marketing": 13,
        "maths": 2,
        "programming": 15,
        "writing": 19
      },
      "scores": {
        "academia": 68.575,
        "finance": 75.7,
        "marketing": 65.8675,
        "maths": 93.4,
        "programming": 41.2,
        "science": 73.05277777777779,
        "writing": 63.8475
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-05",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-02-06",
    "langdb_release_date": "2025-08-05",
    "is_private": false
  },
  {
    "model": "gpt-oss-120b",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/gpt-oss-120b",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "gpt-oss-120b is an open-weight, 117B-parameter Mixture-of-Experts (MoE) language model from OpenAI designed for high-reasoning, agentic, and general-purpose production use cases. It activates 5.1B parameters per forward pass and is optimized to run on a single H100 GPU with native MXFP4 quantization. The model supports configurable reasoning depth, full chain-of-thought access, and native tool use, including function calling, browsing, and structured output generation.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "default": null,
        "required": false,
        "type": "string"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 41.2,
        "artificial_analysis_intelligence_index": 58,
        "artificial_analysis_math_index": 93.4,
        "drop": null,
        "gpqa": 79.15,
        "hle": 18.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 65.3,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 80.80000000000001,
        "mmmu": null,
        "scicode": 36.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 9,
        "finance": 5,
        "marketing": 13,
        "maths": 2,
        "programming": 15,
        "writing": 19
      },
      "scores": {
        "academia": 68.575,
        "finance": 75.7,
        "marketing": 65.8675,
        "maths": 93.4,
        "programming": 41.2,
        "science": 73.05277777777779,
        "writing": 63.8475
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-05",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-02-06",
    "langdb_release_date": "2025-08-05",
    "is_private": false
  },
  {
    "model": "gpt-oss-20b",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "openai/gpt-oss-20b",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.04,
      "per_output_token": 0.16
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "gpt-oss-20b is an open-weight 21B parameter model released by OpenAI under the Apache 2.0 license. It uses a Mixture-of-Experts (MoE) architecture with 3.6B active parameters per forward pass, optimized for lower-latency inference and deployability on consumer or single-GPU hardware. The model is trained in OpenAI’s Harmony response format and supports reasoning level configuration, fine-tuning, and agentic capabilities including function calling, tool use, and structured outputs.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 40.7,
        "artificial_analysis_intelligence_index": 52.4,
        "artificial_analysis_math_index": 89.3,
        "drop": null,
        "gpqa": 70.15,
        "hle": 9.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 77.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 74.8,
        "mmmu": null,
        "scicode": 34.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 10,
        "maths": 6,
        "programming": 16
      },
      "scores": {
        "academia": 61.275000000000006,
        "finance": 70.85,
        "marketing": 57.267500000000005,
        "maths": 89.3,
        "programming": 40.7,
        "science": 65.25277777777778,
        "writing": 55.0525
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-05",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-02-06",
    "langdb_release_date": "2025-08-05",
    "is_private": false
  },
  {
    "model": "gpt-oss-20b",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/gpt-oss-20b",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 0.07,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "gpt-oss-20b is an open-weight 21B parameter model released by OpenAI under the Apache 2.0 license. It uses a Mixture-of-Experts (MoE) architecture with 3.6B active parameters per forward pass, optimized for lower-latency inference and deployability on consumer or single-GPU hardware. The model is trained in OpenAI’s Harmony response format and supports reasoning level configuration, fine-tuning, and agentic capabilities including function calling, tool use, and structured outputs.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "default": null,
        "required": false,
        "type": "string"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 40.7,
        "artificial_analysis_intelligence_index": 52.4,
        "artificial_analysis_math_index": 89.3,
        "drop": null,
        "gpqa": 70.15,
        "hle": 9.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 77.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 74.8,
        "mmmu": null,
        "scicode": 34.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 10,
        "maths": 6,
        "programming": 16
      },
      "scores": {
        "academia": 61.275000000000006,
        "finance": 70.85,
        "marketing": 57.267500000000005,
        "maths": 89.3,
        "programming": 40.7,
        "science": 65.25277777777778,
        "writing": 55.0525
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-05",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-02-06",
    "langdb_release_date": "2025-08-05",
    "is_private": false
  },
  {
    "model": "hermes-3-llama-3.1-405b",
    "model_provider": "nousresearch",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "NousResearch/Hermes-3-Llama-3.1-405B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.7,
      "per_output_token": 0.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Hermes 3 is a generalist language model with many improvements over Hermes 2, including advanced agentic capabilities, much better roleplaying, reasoning, multi-turn conversation, long context coherence, and improvements across the board.\n\nHermes 3 405B is a frontier-level, full-parameter finetune of the Llama-3.1 405B foundation model, focused on aligning LLMs to the user, with powerful steering capabilities and control given to the end user.\n\nThe Hermes 3 series builds and expands on the Hermes 2 set of capabilities, including more powerful and reliable function calling and structured output capabilities, generalist assistant capabilities, and improved code generation skills.\n\nHermes 3 is competitive, if not superior, to Llama-3.1 Instruct models at general capabilities, with varying strengths and weaknesses attributable between the two.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "hermes-3-llama-3.1-70b",
    "model_provider": "nousresearch",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "NousResearch/Hermes-3-Llama-3.1-70B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.28
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Hermes 3 is a generalist language model with many improvements over [Hermes 2](/models/nousresearch/nous-hermes-2-mistral-7b-dpo), including advanced agentic capabilities, much better roleplaying, reasoning, multi-turn conversation, long context coherence, and improvements across the board.\n\nHermes 3 70B is a competitive, if not superior finetune of the [Llama-3.1 70B foundation model](/models/meta-llama/llama-3.1-70b-instruct), focused on aligning LLMs to the user, with powerful steering capabilities and control given to the end user.\n\nThe Hermes 3 series builds and expands on the Hermes 2 set of capabilities, including more powerful and reliable function calling and structured output capabilities, generalist assistant capabilities, and improved code generation skills.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "kimi-k2-instruct",
    "model_provider": "moonshotai",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/kimi-k2-instruct",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 0.6,
      "per_output_token": 2.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Kimi K2 Instruct is a large-scale Mixture-of-Experts (MoE) language model developed by Moonshot AI, featuring 1 trillion total parameters with 32 billion active per forward pass. It is optimized for agentic capabilities, including advanced tool use, reasoning, and code synthesis. Kimi K2 excels across a broad range of benchmarks, particularly in coding (LiveCodeBench, SWE-bench), reasoning (ZebraLogic, GPQA), and tool-use (Tau2, AceBench) tasks. It supports long-context inference up to 128K tokens and is designed with a novel training stack that includes the MuonClip optimizer for stable large-scale MoE training.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 75.1,
        "hle": null,
        "humaneval": 93.3,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 14,
        "writing": 6
      },
      "scores": {
        "science": 75.1,
        "writing": 75.1
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-01",
    "license": "Modified MIT License",
    "knowledge_cutoff_date": "2024-07-05",
    "langdb_release_date": "2025-01-01",
    "is_private": false
  },
  {
    "model": "l3.1-euryale-70b",
    "model_provider": "sao10k",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Sao10K/L3.1-70B-Euryale-v2.2",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.65,
      "per_output_token": 0.75
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Euryale L3.1 70B v2.2 is a model focused on creative roleplay from [Sao10k](https://ko-fi.com/sao10k). It is the successor of [Euryale L3 70B v2.1](/models/sao10k/l3-euryale-70b).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "l3.3-euryale-70b",
    "model_provider": "sao10k",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Sao10K/L3.3-70B-Euryale-v2.3",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.65,
      "per_output_token": 0.75
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Euryale L3.3 70B is a model focused on creative roleplay from [Sao10k](https://ko-fi.com/sao10k). It is the successor of [Euryale L3 70B v2.2](/models/sao10k/l3-euryale-70b).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "l3-lunaris-8b",
    "model_provider": "sao10k",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Sao10K/L3-8B-Lunaris-v1",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.02,
      "per_output_token": 0.05
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Lunaris 8B is a versatile generalist and roleplaying model based on Llama 3. It's a strategic merge of multiple models, designed to balance creativity with improved logic and general knowledge.\n\nCreated by [Sao10k](https://huggingface.co/Sao10k), this model aims to offer an improved experience over Stheno v3.2, with enhanced creativity and logical reasoning.\n\nFor best results, use with Llama 3 Instruct context template, temperature 1.4, and min_p 0.1.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-3.1-405b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Meta-Llama-3.1-405B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.8,
      "per_output_token": 0.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "The highly anticipated 400B class of Llama3 is here! Clocking in at 128k context with impressive eval scores, the Meta AI team continues to push the frontier of open-source LLMs.\n\nMeta's latest class of model (Llama 3.1) launched with a variety of sizes & flavors. This 405B instruct-tuned version is optimized for high quality dialogue usecases.\n\nIt has demonstrated strong performance compared to leading closed-source models including GPT-4o and Claude 3.5 Sonnet in evaluations.\n\nTo read more about the model release, [click here](https://ai.meta.com/blog/meta-llama-3-1/). Usage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 21.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 22.2,
        "artificial_analysis_intelligence_index": 28.1,
        "artificial_analysis_math_index": 3,
        "drop": 84.8,
        "gpqa": 51.1,
        "hle": 4.2,
        "humaneval": 89.0,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 30.5,
        "math_500": 70.3,
        "mmlu": null,
        "mmlu_pro": 73.2,
        "mmmu": null,
        "scicode": 29.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 39.6,
        "finance": 15.55,
        "marketing": 42.655,
        "maths": 3,
        "programming": 22.2,
        "science": 54.48333333333334,
        "writing": 42.21000000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-23",
    "license": "llama_3_1_community_license",
    "knowledge_cutoff_date": "2024-01-25",
    "langdb_release_date": "2024-07-23",
    "is_private": false
  },
  {
    "model": "llama-3.1-70b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.28
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Meta's latest class of model (Llama 3.1) launched with a variety of sizes & flavors. This 70B instruct-tuned version is optimized for high quality dialogue usecases.\n\nIt has demonstrated strong performance compared to leading closed-source models in human evaluations.\n\nTo read more about the model release, [click here](https://ai.meta.com/blog/meta-llama-3-1/). Usage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 17.299999999999997,
        "aime_25": null,
        "artificial_analysis_coding_index": 17.6,
        "artificial_analysis_intelligence_index": 22.6,
        "artificial_analysis_math_index": 4,
        "drop": 79.60000000000001,
        "gpqa": 41.3,
        "hle": 4.6,
        "humaneval": 80.5,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 23.200000000000003,
        "math_500": 64.9,
        "mmlu": null,
        "mmlu_pro": 67.60000000000001,
        "mmmu": null,
        "scicode": 26.700000000000003,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 31.95,
        "finance": 13.3,
        "marketing": 33.435,
        "maths": 4,
        "programming": 17.6,
        "science": 47.45000000000001,
        "writing": 33.730000000000004
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-23",
    "license": "llama_3_1_community_license",
    "knowledge_cutoff_date": "2024-01-25",
    "langdb_release_date": "2024-07-23",
    "is_private": false
  },
  {
    "model": "llama-3.1-8b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.015,
      "per_output_token": 0.02
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Meta's latest class of model (Llama 3.1) launched with a variety of sizes & flavors. This 8B instruct-tuned version is fast and efficient.\n\nIt has demonstrated strong performance compared to leading closed-source models in human evaluations.\n\nTo read more about the model release, [click here](https://ai.meta.com/blog/meta-llama-3-1/). Usage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 7.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 8.5,
        "artificial_analysis_intelligence_index": 16.9,
        "artificial_analysis_math_index": 4.3,
        "drop": 59.5,
        "gpqa": 28.15,
        "hle": 5.1,
        "humaneval": 72.6,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 11.6,
        "math_500": 51.9,
        "mmlu": null,
        "mmlu_pro": 47.599999999999994,
        "mmmu": null,
        "scicode": 13.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 22.525,
        "finance": 10.6,
        "marketing": 28.28749999999999,
        "maths": 4.3,
        "programming": 8.5,
        "science": 33.15277777777778,
        "writing": 27.7075
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-23",
    "license": "llama_3_1_community_license",
    "knowledge_cutoff_date": "2023-12-31",
    "langdb_release_date": "2024-07-23",
    "is_private": false
  },
  {
    "model": "llama-3.1-nemotron-70b-instruct",
    "model_provider": "nvidia",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "nvidia/Llama-3.1-Nemotron-70B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.12,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "NVIDIA's Llama 3.1 Nemotron 70B is a language model designed for generating precise and useful responses. Leveraging [Llama 3.1 70B](/models/meta-llama/llama-3.1-70b-instruct) architecture and Reinforcement Learning from Human Feedback (RLHF), it excels in automatic alignment benchmarks. This model is tailored for applications requiring high accuracy in helpfulness and response generation, suitable for diverse user queries across multiple domains.\n\nUsage of this model is subject to [Meta's Acceptable Use Policy](https://www.llama.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 24.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 14.8,
        "artificial_analysis_intelligence_index": 23.6,
        "artificial_analysis_math_index": 11,
        "drop": null,
        "gpqa": 46.5,
        "hle": 4.6,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 16.900000000000002,
        "math_500": 73.3,
        "mmlu": null,
        "mmlu_pro": 69.0,
        "mmmu": null,
        "scicode": 23.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 35.05,
        "finance": 17.3,
        "marketing": 33.245000000000005,
        "maths": 11,
        "programming": 14.8,
        "science": 50.594444444444456,
        "writing": 34.11000000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-10-01",
    "license": "llama_3_1_community_license",
    "knowledge_cutoff_date": "2023-12-01",
    "langdb_release_date": "2024-10-01",
    "is_private": false
  },
  {
    "model": "Llama-3.1-Nemotron-70B-Instruct-HF",
    "model_provider": "nvidia",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "nvidia/Llama-3.1-Nemotron-70B-Instruct-HF",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 0.9,
      "per_output_token": 0.9
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Llama-3.1-Nemotron-70B-Instruct is a large language model customized by NVIDIA in order to improve the helpfulness of LLM generated responses.",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-3.2-11b-vision-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-3.2-11B-Vision-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.049,
      "per_output_token": 0.049
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Llama 3.2 11B Vision is a multimodal model with 11 billion parameters, designed to handle tasks combining visual and textual data. It excels in tasks such as image captioning and visual question answering, bridging the gap between language generation and visual reasoning. Pre-trained on a massive dataset of image-text pairs, it performs well in complex, high-accuracy image analysis.\n\nIts ability to integrate visual understanding with language processing makes it an ideal solution for industries requiring comprehensive visual-linguistic AI applications, such as content creation, AI-driven customer service, and research.\n\nClick here for the [original model card](https://github.com/meta-llama/llama-models/blob/main/models/llama3_2/MODEL_CARD_VISION.md).\n\nUsage of this model is subject to [Meta's Acceptable Use Policy](https://www.llama.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-3.2-1b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-3.2-1B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.005,
      "per_output_token": 0.01
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Llama 3.2 1B is a 1-billion-parameter language model focused on efficiently performing natural language tasks, such as summarization, dialogue, and multilingual text analysis. Its smaller size allows it to operate efficiently in low-resource environments while maintaining strong task performance.\n\nSupporting eight core languages and fine-tunable for more, Llama 1.3B is ideal for businesses or developers seeking lightweight yet powerful AI solutions that can operate in diverse multilingual settings without the high computational demand of larger models.\n\nClick here for the [original model card](https://github.com/meta-llama/llama-models/blob/main/models/llama3_2/MODEL_CARD.md).\n\nUsage of this model is subject to [Meta's Acceptable Use Policy](https://www.llama.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-3.2-3b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-3.2-3B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.012,
      "per_output_token": 0.024
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Llama 3.2 3B is a 3-billion-parameter multilingual large language model, optimized for advanced natural language processing tasks like dialogue generation, reasoning, and summarization. Designed with the latest transformer architecture, it supports eight languages, including English, Spanish, and Hindi, and is adaptable for additional languages.\n\nTrained on 9 trillion tokens, the Llama 3.2 3B model excels in instruction-following, complex reasoning, and tool use. Its balanced performance makes it ideal for applications needing accuracy and efficiency in text generation across multilingual settings.\n\nClick here for the [original model card](https://github.com/meta-llama/llama-models/blob/main/models/llama3_2/MODEL_CARD.md).\n\nUsage of this model is subject to [Meta's Acceptable Use Policy](https://www.llama.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 11.2,
        "artificial_analysis_math_index": 3.3,
        "drop": null,
        "gpqa": 32.800000000000004,
        "hle": 5.2,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 8.3,
        "math_500": 48.9,
        "mmlu": null,
        "mmlu_pro": 34.699999999999996,
        "mmmu": null,
        "scicode": 5.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 22.0,
        "finance": 7.25,
        "marketing": 19.895,
        "maths": 3.3,
        "science": 30.472222222222225,
        "writing": 21.165
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-25",
    "license": "llama_3_2_community_license",
    "knowledge_cutoff_date": "2024-03-29",
    "langdb_release_date": "2024-09-25",
    "is_private": false
  },
  {
    "model": "llama-3.2-90b-vision-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-3.2-90B-Vision-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.35,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "The Llama 90B Vision model is a top-tier, 90-billion-parameter multimodal model designed for the most challenging visual reasoning and language tasks. It offers unparalleled accuracy in image captioning, visual question answering, and advanced image-text comprehension. Pre-trained on vast multimodal datasets and fine-tuned with human feedback, the Llama 90B Vision is engineered to handle the most demanding image-based AI tasks.\n\nThis model is perfect for industries requiring cutting-edge multimodal AI capabilities, particularly those dealing with complex, real-time visual and textual analysis.\n\nClick here for the [original model card](https://github.com/meta-llama/llama-models/blob/main/models/llama3_2/MODEL_CARD_VISION.md).\n\nUsage of this model is subject to [Meta's Acceptable Use Policy](https://www.llama.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-3.3-70b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-3.3-70B-Instruct-Turbo",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.038,
      "per_output_token": 0.12
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "The Meta Llama 3.3 multilingual large language model (LLM) is a pretrained and instruction tuned generative model in 70B (text in/text out). The Llama 3.3 instruction tuned text only model is optimized for multilingual dialogue use cases and outperforms many of the available open source and closed chat models on common industry benchmarks.\n\nSupported languages: English, German, French, Italian, Portuguese, Hindi, Spanish, and Thai.\n\n[Model Card](https://github.com/meta-llama/llama-models/blob/main/models/llama3_3/MODEL_CARD.md)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 30.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.2,
        "artificial_analysis_intelligence_index": 27.9,
        "artificial_analysis_math_index": 7.7,
        "drop": null,
        "gpqa": 50.150000000000006,
        "hle": 4.0,
        "humaneval": 88.4,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 28.799999999999997,
        "math_500": 77.3,
        "mmlu": null,
        "mmlu_pro": 71.3,
        "mmmu": null,
        "scicode": 26.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 39.025000000000006,
        "finance": 17.8,
        "marketing": 41.7525,
        "maths": 7.7,
        "programming": 19.2,
        "science": 53.24722222222223,
        "writing": 41.2725
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-06",
    "license": "llama_3_3_community_license_agreement",
    "knowledge_cutoff_date": "2024-06-09",
    "langdb_release_date": "2024-12-06",
    "is_private": false
  },
  {
    "model": "llama-3-70b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Meta-Llama-3-70B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Meta's latest class of model (Llama 3) launched with a variety of sizes & flavors. This 70B instruct-tuned version was optimized for high quality dialogue usecases.\n\nIt has demonstrated strong performance compared to leading closed-source models in human evaluations.\n\nTo read more about the model release, [click here](https://ai.meta.com/blog/meta-llama-3/). Usage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-3-8b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Meta-Llama-3-8B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.03,
      "per_output_token": 0.06
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Meta's latest class of model (Llama 3) launched with a variety of sizes & flavors. This 8B instruct-tuned version was optimized for high quality dialogue usecases.\n\nIt has demonstrated strong performance compared to leading closed-source models in human evaluations.\n\nTo read more about the model release, [click here](https://ai.meta.com/blog/meta-llama-3/). Usage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-4-maverick",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Llama 4 Maverick 17B Instruct (128E) is a high-capacity multimodal language model from Meta, built on a mixture-of-experts (MoE) architecture with 128 experts and 17 billion active parameters per forward pass (400B total). It supports multilingual text and image input, and produces multilingual text and code output across 12 supported languages. Optimized for vision-language tasks, Maverick is instruction-tuned for assistant-like behavior, image reasoning, and general-purpose multimodal interaction.\n\nMaverick features early fusion for native multimodality and a 1 million token context window. It was trained on a curated mixture of public, licensed, and Meta-platform data, covering ~22 trillion tokens, with a knowledge cutoff in August 2024. Released on April 5, 2025 under the Llama 4 Community License, Maverick is suited for research and commercial applications requiring advanced multimodal understanding and high model throughput.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 39.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 26.4,
        "artificial_analysis_intelligence_index": 35.8,
        "artificial_analysis_math_index": 19.3,
        "drop": null,
        "gpqa": 68.45,
        "hle": 4.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 39.7,
        "math_500": 88.9,
        "mmlu": null,
        "mmlu_pro": 80.9,
        "mmmu": 73.4,
        "scicode": 33.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 9
      },
      "scores": {
        "academia": 52.125,
        "finance": 27.549999999999997,
        "marketing": 53.9275,
        "maths": 19.3,
        "programming": 26.4,
        "science": 66.9375,
        "vision": 73.4,
        "writing": 53.2225
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-05",
    "license": "llama_4_community_license_agreement",
    "knowledge_cutoff_date": "2024-10-07",
    "langdb_release_date": "2025-04-05",
    "is_private": false
  },
  {
    "model": "llama-4-scout",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-4-Scout-17B-16E-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.08,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 327680
    },
    "description": "Llama 4 Scout 17B Instruct (16E) is a mixture-of-experts (MoE) language model developed by Meta, activating 17 billion parameters out of a total of 109B. It supports native multimodal input (text and image) and multilingual output (text and code) across 12 supported languages. Designed for assistant-style interaction and visual reasoning, Scout uses 16 experts per forward pass and features a context length of 10 million tokens, with a training corpus of ~40 trillion tokens.\n\nBuilt for high efficiency and local or commercial deployment, Llama 4 Scout incorporates early fusion for seamless modality integration. It is instruction-tuned for use in multilingual chat, captioning, and image understanding tasks. Released under the Llama 4 Community License, it was last trained on data up to August 2024 and launched publicly on April 5, 2025.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 28.299999999999997,
        "aime_25": null,
        "artificial_analysis_coding_index": 16.1,
        "artificial_analysis_intelligence_index": 28.1,
        "artificial_analysis_math_index": 14,
        "drop": null,
        "gpqa": 57.94999999999999,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 29.9,
        "math_500": 84.39999999999999,
        "mmlu": null,
        "mmlu_pro": 75.2,
        "mmmu": 69.39999999999999,
        "scicode": 17.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 13
      },
      "scores": {
        "academia": 43.02499999999999,
        "finance": 21.05,
        "marketing": 44.0975,
        "maths": 14,
        "programming": 16.1,
        "science": 59.76749999999999,
        "vision": 69.39999999999999,
        "writing": 44.2475
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-05",
    "license": "llama_4_community_license_agreement",
    "knowledge_cutoff_date": "2024-10-07",
    "langdb_release_date": "2025-04-05",
    "is_private": false
  },
  {
    "model": "llama-guard-3-8b",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-Guard-3-8B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.055,
      "per_output_token": 0.055
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Llama Guard 3 is a Llama-3.1-8B pretrained model, fine-tuned for content safety classification. Similar to previous versions, it can be used to classify content in both LLM inputs (prompt classification) and in LLM responses (response classification). It acts as an LLM – it generates text in its output that indicates whether a given prompt or response is safe or unsafe, and if unsafe, it also lists the content categories violated.\n\nLlama Guard 3 was aligned to safeguard against the MLCommons standardized hazards taxonomy and designed to support Llama 3.1 capabilities. Specifically, it provides content moderation in 8 languages, and was optimized to support safety and security for search and code interpreter tool calls.\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-guard-4-12b",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "meta-llama/Llama-Guard-4-12B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.18,
      "per_output_token": 0.18
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "Llama Guard 4 is a Llama 4 Scout-derived multimodal pretrained model, fine-tuned for content safety classification. Similar to previous versions, it can be used to classify content in both LLM inputs (prompt classification) and in LLM responses (response classification). It acts as an LLM—generating text in its output that indicates whether a given prompt or response is safe or unsafe, and if unsafe, it also lists the content categories violated.\n\nLlama Guard 4 was aligned to safeguard against the standardized MLCommons hazards taxonomy and designed to support multimodal Llama 4 capabilities. Specifically, it combines features from previous Llama Guard models, providing content moderation for English and multiple supported languages, along with enhanced capabilities to handle mixed text-and-image prompts, including multiple images. Additionally, Llama Guard 4 is integrated into the Llama Moderations API, extending robust safety classification to text and images.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-v3p1-405b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/llama-v3p1-405b-instruct",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 3.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Text-only lightweight model built to deliver fast and accurate responses. Ideal for edge devices and mobile applications. The model enables on-device AI capabilities while preserving user privacy and minimizing latency.",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "mistral-7b-instruct",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.028,
      "per_output_token": 0.054
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "A high-performing, industry-standard 7.3B parameter model, with optimizations for speed and context length.\n\n*Mistral 7B Instruct has multiple version variants, and this is intended to be the latest version.*",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 1,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 17.7,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 4.6,
        "math_500": 12.1,
        "mmlu": null,
        "mmlu_pro": 24.5,
        "mmmu": null,
        "scicode": 2.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 9.35,
        "marketing": 17.775,
        "science": 18.85555555555556,
        "writing": 18.42
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2023-09-27",
    "knowledge_cutoff_date": "2023-03-31",
    "langdb_release_date": "2023-09-27",
    "is_private": false
  },
  {
    "model": "mistral-nemo",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "mistralai/Mistral-Nemo-Instruct-2407",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.02,
      "per_output_token": 0.04
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "A 12B parameter model with a 128k token context length built by Mistral in collaboration with NVIDIA.\n\nThe model is multilingual, supporting English, French, German, Spanish, Italian, Portuguese, Chinese, Japanese, Korean, Arabic, and Hindi.\n\nIt supports function calling and is released under the Apache 2.0 license.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 5.2,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 31.4,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 5.7,
        "math_500": 39.5,
        "mmlu": null,
        "mmlu_pro": 39.900000000000006,
        "mmmu": null,
        "scicode": 10.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 18.3,
        "marketing": 30.162500000000005,
        "science": 31.705555555555556,
        "writing": 30.250000000000004
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-18",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-01-20",
    "langdb_release_date": "2024-07-18",
    "is_private": false
  },
  {
    "model": "mistral-small-24b-instruct-2501",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "mistralai/Mistral-Small-24B-Instruct-2501",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.08
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Mistral Small 3 is a 24B-parameter language model optimized for low-latency performance across common AI tasks. Released under the Apache 2.0 license, it features both pre-trained and instruction-tuned versions designed for efficient local deployment.\n\nThe model achieves 81% accuracy on the MMLU benchmark and performs competitively with larger models like Llama 3.3 70B and Qwen 32B, while operating at three times the speed on equivalent hardware. [Read the blog post about the model here.](https://mistral.ai/news/mistral-small-3/)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 45.3,
        "hle": null,
        "humaneval": 84.8,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "science": 45.3,
        "writing": 45.3
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-30",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2023-10-01",
    "langdb_release_date": "2025-01-30",
    "is_private": false
  },
  {
    "model": "mistral-small-3.1-24b-instruct",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "mistralai/Mistral-Small-3.1-24B-Instruct-2503",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mistral Small 3.1 24B Instruct is an upgraded variant of Mistral Small 3 (2501), featuring 24 billion parameters with advanced multimodal capabilities. It provides state-of-the-art performance in text-based reasoning and vision tasks, including image analysis, programming, mathematical reasoning, and multilingual support across dozens of languages. Equipped with an extensive 128k token context window and optimized for efficient local inference, it supports use cases such as conversational agents, function calling, long-document comprehension, and privacy-sensitive deployments. The updated version is [Mistral Small 3.2](mistralai/mistral-small-3.2-24b-instruct)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 13,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 38.1,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 14.099999999999998,
        "math_500": 56.3,
        "mmlu": null,
        "mmlu_pro": 52.900000000000006,
        "mmmu": null,
        "scicode": 15.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.55,
        "marketing": 41.075,
        "science": 40.1,
        "writing": 38.74
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-17",
    "knowledge_cutoff_date": "2024-03-21",
    "langdb_release_date": "2024-09-17",
    "is_private": false
  },
  {
    "model": "mistral-small-3.2-24b-instruct",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "mistralai/Mistral-Small-3.2-24B-Instruct-2506",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mistral-Small-3.2-24B-Instruct-2506 is an updated 24B parameter model from Mistral optimized for instruction following, repetition reduction, and improved function calling. Compared to the 3.1 release, version 3.2 significantly improves accuracy on WildBench and Arena Hard, reduces infinite generations, and delivers gains in tool use and structured output tasks.\n\nIt supports image and text inputs with structured outputs, function/tool calling, and strong performance across coding (HumanEval+, MBPP), STEM (MMLU, MATH, GPQA), and vision benchmarks (ChartQA, DocVQA).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 13,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 38.1,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 14.099999999999998,
        "math_500": 56.3,
        "mmlu": null,
        "mmlu_pro": 52.900000000000006,
        "mmmu": null,
        "scicode": 15.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.55,
        "marketing": 41.075,
        "science": 40.1,
        "writing": 38.74
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-17",
    "knowledge_cutoff_date": "2024-03-21",
    "langdb_release_date": "2024-09-17",
    "is_private": false
  },
  {
    "model": "mixtral-8x22b-instruct",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/mixtral-8x22b-instruct",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 1.2,
      "per_output_token": 1.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "Mistral's official instruct fine-tuned version of [Mixtral 8x22B](/models/mistralai/mixtral-8x22b). It uses 39B active parameters out of 141B, offering unparalleled cost efficiency for its size. Its strengths include:\n- strong math, coding, and reasoning\n- large context length (64k)\n- fluency in English, French, Italian, German, and Spanish\n\nSee benchmarks on the launch announcement [here](https://mistral.ai/news/mixtral-8x22b/).\n#moe",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-04-17",
    "knowledge_cutoff_date": "2023-10-20",
    "langdb_release_date": "2024-04-17",
    "is_private": false
  },
  {
    "model": "mixtral-8x7b-instruct",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "mistralai/Mixtral-8x7B-Instruct-v0.1",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.08,
      "per_output_token": 0.24
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Mixtral 8x7B Instruct is a pretrained generative Sparse Mixture of Experts, by Mistral AI, for chat and instruction use. Incorporates 8 experts (feed-forward networks) for a total of 47 billion parameters.\n\nInstruct model fine-tuned by Mistral. #moe",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 2.6,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 29.2,
        "hle": 4.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 6.6000000000000005,
        "math_500": 29.9,
        "mmlu": null,
        "mmlu_pro": 38.7,
        "mmmu": null,
        "scicode": 2.8000000000000003,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 15.9,
        "marketing": 28.487499999999997,
        "science": 30.15000000000001,
        "writing": 29.01
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2023-12-11",
    "knowledge_cutoff_date": "2023-06-14",
    "langdb_release_date": "2023-12-11",
    "is_private": false
  },
  {
    "model": "mythomax-l2-13b",
    "model_provider": "gryphe",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Gryphe/MythoMax-L2-13b",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.072,
      "per_output_token": 0.072
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 4096
    },
    "description": "One of the highest performing and most popular fine-tunes of Llama 2 13B, with rich descriptions and roleplay. #merge",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "nemotron-nano-9b-v2",
    "model_provider": "nvidia",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "nvidia/NVIDIA-Nemotron-Nano-9B-v2",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.04,
      "per_output_token": 0.16
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "NVIDIA-Nemotron-Nano-9B-v2 is a large language model (LLM) trained from scratch by NVIDIA, and designed as a unified model for both reasoning and non-reasoning tasks. It responds to user queries and tasks by first generating a reasoning trace and then concluding with a final response. \n\nThe model's reasoning capabilities can be controlled via a system prompt. If the user prefers the model to provide its final answer without intermediate reasoning traces, it can be configured to do so.",
    "parameters": {
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 30.6,
        "artificial_analysis_intelligence_index": 36.1,
        "artificial_analysis_math_index": 62.3,
        "drop": null,
        "gpqa": 55.7,
        "hle": 4.0,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 70.1,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 73.9,
        "mmmu": null,
        "scicode": 20.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 45.900000000000006,
        "finance": 49.2,
        "marketing": 39.81,
        "maths": 62.3,
        "programming": 30.6,
        "science": 57.03333333333334,
        "writing": 39.68
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-18",
    "license": "nvidia_open_model_license_agreement",
    "knowledge_cutoff_date": "2025-02-19",
    "is_private": false
  },
  {
    "model": "Nous-Hermes-2-Mixtral-8x7B-DPO",
    "model_provider": "nousresearch",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "NousResearch/Nous-Hermes-2-Mixtral-8x7B-DPO",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 0.9,
      "per_output_token": 0.9
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Nous Hermes 2 - Mixtral 8x7B-DPO (46.7B) is a large model by NousResearch, utilizing advanced training techniques for improved performance.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "phi-4",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "microsoft/phi-4",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.07,
      "per_output_token": 0.14
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 16384
    },
    "description": "[Microsoft Research](/microsoft) Phi-4 is designed to perform well in complex reasoning tasks and can operate efficiently in situations with limited memory or where quick responses are needed. \n\nAt 14 billion parameters, it was trained on a mix of high-quality synthetic datasets, data from curated websites, and academic materials. It has undergone careful improvement to follow instructions accurately and maintain strong safety standards. It works best with English language inputs.\n\nFor more information, please see [Phi-4 Technical Report](https://arxiv.org/pdf/2412.08905)\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 14.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 17.6,
        "artificial_analysis_intelligence_index": 22.7,
        "artificial_analysis_math_index": 18,
        "drop": 75.5,
        "gpqa": 56.8,
        "hle": 4.1000000000000005,
        "humaneval": 82.6,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 23.1,
        "math_500": 81.0,
        "mmlu": null,
        "mmlu_pro": 71.39999999999999,
        "mmmu": null,
        "scicode": 26.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 39.75,
        "finance": 20.35,
        "marketing": 30.01,
        "maths": 18,
        "programming": 17.6,
        "science": 56.62222222222223,
        "writing": 32.654999999999994
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-12",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-06-01",
    "langdb_release_date": "2024-12-12",
    "is_private": false
  },
  {
    "model": "phi-4-multimodal-instruct",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "microsoft/Phi-4-multimodal-instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Phi-4 Multimodal Instruct is a versatile 5.6B parameter foundation model that combines advanced reasoning and instruction-following capabilities across both text and visual inputs, providing accurate text outputs. The unified architecture enables efficient, low-latency inference, suitable for edge and mobile deployments. Phi-4 Multimodal Instruct supports text inputs in multiple languages including Arabic, Chinese, English, French, German, Japanese, Spanish, and more, with visual input optimized primarily for English. It delivers impressive performance on multimodal tasks involving mathematical, scientific, and document reasoning, providing developers and enterprises a powerful yet compact model for sophisticated interactive applications. For more information, see the [Phi-4 Multimodal blog post](https://azure.microsoft.com/en-us/blog/empowering-innovation-the-next-generation-of-the-phi-family/).\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 9.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 12.4,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 31.5,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 13.1,
        "math_500": 69.3,
        "mmlu": null,
        "mmlu_pro": 48.5,
        "mmmu": 55.1,
        "scicode": 11.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 21.95,
        "marketing": 37.35,
        "science": 37.1,
        "vision": 55.1,
        "writing": 34.580000000000005
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-02-01",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-06-01",
    "langdb_release_date": "2025-02-01",
    "is_private": false
  },
  {
    "model": "phi-4-reasoning-plus",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "microsoft/phi-4-reasoning-plus",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.07,
      "per_output_token": 0.35
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Phi-4-reasoning-plus is an enhanced 14B parameter model from Microsoft, fine-tuned from Phi-4 with additional reinforcement learning to boost accuracy on math, science, and code reasoning tasks. It uses the same dense decoder-only transformer architecture as Phi-4, but generates longer, more comprehensive outputs structured into a step-by-step reasoning trace and final answer.\n\nWhile it offers improved benchmark scores over Phi-4-reasoning across tasks like AIME, OmniMath, and HumanEvalPlus, its responses are typically ~50% longer, resulting in higher latency. Designed for English-only applications, it is well-suited for structured reasoning workflows where output quality takes priority over response speed.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 68.89999999999999,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "writing": 10
      },
      "scores": {
        "science": 68.89999999999999,
        "writing": 68.89999999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-30",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-03-01",
    "langdb_release_date": "2025-04-30",
    "is_private": false
  },
  {
    "model": "qwen-2.5-72b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen2.5-72B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.12,
      "per_output_token": 0.39
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen2.5 72B is the latest series of Qwen large language models. Qwen2.5 brings the following improvements upon Qwen2:\n\n- Significantly more knowledge and has greatly improved capabilities in coding and mathematics, thanks to our specialized expert models in these domains.\n\n- Significant improvements in instruction following, generating long texts (over 8K tokens), understanding structured data (e.g, tables), and generating structured outputs especially JSON. More resilient to the diversity of system prompts, enhancing role-play implementation and condition-setting for chatbots.\n\n- Long-context Support up to 128K tokens and can generate up to 8K tokens.\n\n- Multilingual support for over 29 languages, including Chinese, English, French, Spanish, Portuguese, German, Italian, Russian, Japanese, Korean, Vietnamese, Thai, Arabic, and more.\n\nUsage of this model is subject to [Tongyi Qianwen LICENSE AGREEMENT](https://huggingface.co/Qwen/Qwen1.5-110B-Chat/blob/main/LICENSE).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 16.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.5,
        "artificial_analysis_intelligence_index": 29,
        "artificial_analysis_math_index": 14,
        "drop": null,
        "gpqa": 49.05,
        "hle": 4.2,
        "humaneval": 86.6,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 27.6,
        "math_500": 85.8,
        "mmlu": null,
        "mmlu_pro": 72.0,
        "mmmu": null,
        "scicode": 26.700000000000003,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 39.025,
        "finance": 21.5,
        "marketing": 40.5125,
        "maths": 14,
        "programming": 19.5,
        "science": 52.991666666666674,
        "writing": 40.0775
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-19",
    "license": "Tongyi Qianwen",
    "knowledge_cutoff_date": "2024-03-23",
    "langdb_release_date": "2024-09-19",
    "is_private": false
  },
  {
    "model": "Qwen2.5-72B-Instruct-Turbo",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "Qwen/Qwen2.5-72B-Instruct-Turbo",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 1.2,
      "per_output_token": 1.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen 2.5 72B Instruct is a large-scale model by Qwen, offering advanced capabilities for complex language tasks.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen-2.5-7b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen2.5-7B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.04,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen2.5 7B is the latest series of Qwen large language models. Qwen2.5 brings the following improvements upon Qwen2:\n\n- Significantly more knowledge and has greatly improved capabilities in coding and mathematics, thanks to our specialized expert models in these domains.\n\n- Significant improvements in instruction following, generating long texts (over 8K tokens), understanding structured data (e.g, tables), and generating structured outputs especially JSON. More resilient to the diversity of system prompts, enhancing role-play implementation and condition-setting for chatbots.\n\n- Long-context Support up to 128K tokens and can generate up to 8K tokens.\n\n- Multilingual support for over 29 languages, including Chinese, English, French, Spanish, Portuguese, German, Italian, Russian, Japanese, Korean, Vietnamese, Thai, Arabic, and more.\n\nUsage of this model is subject to [Tongyi Qianwen LICENSE AGREEMENT](https://huggingface.co/Qwen/Qwen1.5-110B-Chat/blob/main/LICENSE).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 36.4,
        "hle": null,
        "humaneval": 84.8,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "science": 36.4,
        "writing": 36.4
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-19",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-03-23",
    "langdb_release_date": "2024-09-19",
    "is_private": false
  },
  {
    "model": "Qwen2.5-7B-Instruct-Turbo",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "Qwen/Qwen2.5-7B-Instruct-Turbo",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen 2.5 7B Instruct is a fast and efficient model by Qwen, optimized for quick responses in instruction-following tasks.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "Qwen2.5-Coder-32B-Instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 0.8,
      "per_output_token": 0.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen2.5-Coder is the latest series of Code-Specific Qwen large language models (formerly known as CodeQwen)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "Qwen2.5-Coder-32B-Instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen2.5-Coder-32B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.07,
      "per_output_token": 0.16
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen2.5-Coder is the latest series of Code-Specific Qwen large language models (formerly known as CodeQwen).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen2-5-vl-32b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/qwen2-5-vl-32b-instruct",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 0.9,
      "per_output_token": 0.9
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Qwen2.5-VL-32B is a multimodal vision-language model fine-tuned through reinforcement learning for enhanced mathematical reasoning, structured outputs, and visual problem-solving capabilities. It excels at visual analysis tasks, including object recognition, textual interpretation within images, and precise event localization in extended videos. Qwen2.5-VL-32B demonstrates state-of-the-art performance across multimodal benchmarks such as MMMU, MathVista, and VideoMME, while maintaining strong reasoning and clarity in text-based tasks like MMLU, mathematical problem-solving, and code generation.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen2.5-vl-32b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen2.5-VL-32B-Instruct",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Qwen2.5-VL-32B is a multimodal vision-language model fine-tuned through reinforcement learning for enhanced mathematical reasoning, structured outputs, and visual problem-solving capabilities. It excels at visual analysis tasks, including object recognition, textual interpretation within images, and precise event localization in extended videos. Qwen2.5-VL-32B demonstrates state-of-the-art performance across multimodal benchmarks such as MMMU, MathVista, and VideoMME, while maintaining strong reasoning and clarity in text-based tasks like MMLU, mathematical problem-solving, and code generation.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "Qwen2-72B-Instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "Qwen/Qwen2-72B-Instruct",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 1.2,
      "per_output_token": 1.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen 2 Instruct (72B) is a large-scale model by Qwen, offering advanced capabilities for complex language tasks.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 14.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 18.1,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 42.4,
        "hle": 3.7,
        "humaneval": 86.0,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 15.9,
        "math_500": 70.1,
        "mmlu": null,
        "mmlu_pro": 62.2,
        "mmmu": null,
        "scicode": 22.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 30.25,
        "marketing": 48.7,
        "science": 45.8,
        "writing": 44.56
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-23",
    "license": "Tongyi Qianwen",
    "knowledge_cutoff_date": "2024-01-25",
    "langdb_release_date": "2024-07-23",
    "is_private": false
  },
  {
    "model": "qwen3-14b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen3-14B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.06,
      "per_output_token": 0.24
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 40960
    },
    "description": "Qwen3-14B is a dense 14.8B parameter causal language model from the Qwen3 series, designed for both complex reasoning and efficient dialogue. It supports seamless switching between a \"thinking\" mode for tasks like math, programming, and logical inference, and a \"non-thinking\" mode for general-purpose conversation. The model is fine-tuned for instruction-following, agent tool use, creative writing, and multilingual tasks across 100+ languages and dialects. It natively handles 32K token contexts and can extend to 131K tokens using YaRN-based scaling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 76.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 29.1,
        "artificial_analysis_intelligence_index": 36,
        "artificial_analysis_math_index": 55.7,
        "drop": null,
        "gpqa": 60.4,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 52.3,
        "math_500": 96.1,
        "mmlu": null,
        "mmlu_pro": 77.4,
        "mmmu": null,
        "scicode": 31.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 48.2,
        "finance": 45.85,
        "marketing": 38.120000000000005,
        "maths": 55.7,
        "programming": 29.1,
        "science": 60.777777777777786,
        "writing": 38.965
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-28",
    "knowledge_cutoff_date": "2024-10-30",
    "langdb_release_date": "2025-04-28",
    "is_private": false
  },
  {
    "model": "qwen3-235b-a22b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen3-235B-A22B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.13,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 40960
    },
    "description": "Qwen3-235B-A22B is a 235B parameter mixture-of-experts (MoE) model developed by Qwen, activating 22B parameters per forward pass. It supports seamless switching between a \"thinking\" mode for complex reasoning, math, and code tasks, and a \"non-thinking\" mode for general conversational efficiency. The model demonstrates strong reasoning ability, multilingual support (100+ languages and dialects), advanced instruction-following, and agent tool-calling capabilities. It natively handles a 32K token context window and extends up to 131K tokens using YaRN-based scaling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 32.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 23.3,
        "artificial_analysis_intelligence_index": 29.9,
        "artificial_analysis_math_index": 23.7,
        "drop": null,
        "gpqa": 61.3,
        "hle": 4.7,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 34.300000000000004,
        "math_500": 90.2,
        "mmlu": null,
        "mmlu_pro": 76.2,
        "mmmu": null,
        "scicode": 29.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 45.599999999999994,
        "finance": 26.799999999999997,
        "marketing": 36.085,
        "maths": 23.7,
        "programming": 23.3,
        "science": 60.80555555555557,
        "writing": 37.864999999999995
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-235b-a22b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/qwen3-235b-a22b",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 0.22,
      "per_output_token": 0.88
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Qwen3-235B-A22B is a 235B parameter mixture-of-experts (MoE) model developed by Qwen, activating 22B parameters per forward pass. It supports seamless switching between a \"thinking\" mode for complex reasoning, math, and code tasks, and a \"non-thinking\" mode for general conversational efficiency. The model demonstrates strong reasoning ability, multilingual support (100+ languages and dialects), advanced instruction-following, and agent tool-calling capabilities. It natively handles a 32K token context window and extends up to 131K tokens using YaRN-based scaling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "default": null,
        "required": false,
        "type": "string"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 32.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 23.3,
        "artificial_analysis_intelligence_index": 29.9,
        "artificial_analysis_math_index": 23.7,
        "drop": null,
        "gpqa": 61.3,
        "hle": 4.7,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 34.300000000000004,
        "math_500": 90.2,
        "mmlu": null,
        "mmlu_pro": 76.2,
        "mmmu": null,
        "scicode": 29.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 45.599999999999994,
        "finance": 26.799999999999997,
        "marketing": 36.085,
        "maths": 23.7,
        "programming": 23.3,
        "science": 60.80555555555557,
        "writing": 37.864999999999995
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-235b-a22b-2507",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen3-235B-A22B-Instruct-2507",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.13,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-235B-A22B-Instruct-2507 is a multilingual, instruction-tuned mixture-of-experts language model based on the Qwen3-235B architecture, with 22B active parameters per forward pass. It is optimized for general-purpose text generation, including instruction following, logical reasoning, math, code, and tool usage. The model supports a native 262K context length and does not implement \"thinking mode\" (<think> blocks).\n\nCompared to its base variant, this version delivers significant gains in knowledge coverage, long-context reasoning, coding benchmarks, and alignment with open-ended tasks. It is particularly strong on multilingual understanding, math reasoning (e.g., AIME, HMMT), and alignment evaluations like Arena-Hard and WritingBench.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 32.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 23.3,
        "artificial_analysis_intelligence_index": 29.9,
        "artificial_analysis_math_index": 23.7,
        "drop": null,
        "gpqa": 61.3,
        "hle": 4.7,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 34.300000000000004,
        "math_500": 90.2,
        "mmlu": null,
        "mmlu_pro": 76.2,
        "mmmu": null,
        "scicode": 29.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 45.599999999999994,
        "finance": 26.799999999999997,
        "marketing": 36.085,
        "maths": 23.7,
        "programming": 23.3,
        "science": 60.80555555555557,
        "writing": 37.864999999999995
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-235b-a22b-thinking-2507",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen3-235B-A22B-Thinking-2507",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.13,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-235B-A22B-Thinking-2507 is a high-performance, open-weight Mixture-of-Experts (MoE) language model optimized for complex reasoning tasks. It activates 22B of its 235B parameters per forward pass and natively supports up to 262,144 tokens of context. This \"thinking-only\" variant enhances structured logical reasoning, mathematics, science, and long-form generation, showing strong benchmark performance across AIME, SuperGPQA, LiveCodeBench, and MMLU-Redux. It enforces a special reasoning mode (</think>) and is designed for high-token outputs (up to 81,920 tokens) in challenging domains.\n\nThe model is instruction-tuned and excels at step-by-step reasoning, tool use, agentic workflows, and multilingual tasks. This release represents the most capable open-source variant in the Qwen3-235B series, surpassing many closed models in structured reasoning use cases.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 81.10000000000001,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 3,
        "writing": 3
      },
      "scores": {
        "science": 81.10000000000001,
        "writing": 81.10000000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-30b-a3b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen3-30B-A3B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.08,
      "per_output_token": 0.29
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 40960
    },
    "description": "Qwen3, the latest generation in the Qwen large language model series, features both dense and mixture-of-experts (MoE) architectures to excel in reasoning, multilingual support, and advanced agent tasks. Its unique ability to switch seamlessly between a thinking mode for complex reasoning and a non-thinking mode for efficient dialogue ensures versatile, high-quality performance.\n\nSignificantly outperforming prior models like QwQ and Qwen2.5, Qwen3 delivers superior mathematics, coding, commonsense reasoning, creative writing, and interactive dialogue capabilities. The Qwen3-30B-A3B variant includes 30.5 billion parameters (3.3 billion activated), 48 layers, 128 experts (8 activated per task), and supports up to 131K token contexts with YaRN, setting a new standard among open-source models.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 72.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 29.2,
        "artificial_analysis_intelligence_index": 37,
        "artificial_analysis_math_index": 66.3,
        "drop": null,
        "gpqa": 65.85000000000001,
        "hle": 6.800000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 51.5,
        "math_500": 97.5,
        "mmlu": null,
        "mmlu_pro": 77.7,
        "mmmu": null,
        "scicode": 30.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "maths": 17
      },
      "scores": {
        "academia": 51.425,
        "finance": 51.65,
        "marketing": 43.1575,
        "maths": 66.3,
        "programming": 29.2,
        "science": 63.89722222222223,
        "writing": 43.9325
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-32b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen3-32B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 40960
    },
    "description": "Qwen3-32B is a dense 32.8B parameter causal language model from the Qwen3 series, optimized for both complex reasoning and efficient dialogue. It supports seamless switching between a \"thinking\" mode for tasks like math, coding, and logical inference, and a \"non-thinking\" mode for faster, general-purpose conversation. The model demonstrates strong performance in instruction-following, agent tool use, creative writing, and multilingual tasks across 100+ languages and dialects. It natively handles 32K token contexts and can extend to 131K tokens using YaRN-based scaling. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 80.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 30.9,
        "artificial_analysis_intelligence_index": 38.7,
        "artificial_analysis_math_index": 73,
        "drop": null,
        "gpqa": 66.8,
        "hle": 8.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 54.6,
        "math_500": 96.1,
        "mmlu": null,
        "mmlu_pro": 79.80000000000001,
        "mmmu": null,
        "scicode": 35.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 18,
        "maths": 16
      },
      "scores": {
        "academia": 52.75,
        "finance": 55.85,
        "marketing": 38.05,
        "maths": 73,
        "programming": 30.9,
        "science": 65.35555555555555,
        "writing": 39.875
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-coder",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/Qwen3-Coder-480B-A35B-Instruct-Turbo",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 1.2,
      "per_cached_input_token": 0.15
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-Coder-480B-A35B-Instruct is a Mixture-of-Experts (MoE) code generation model developed by the Qwen team. It is optimized for agentic coding tasks such as function calling, tool use, and long-context reasoning over repositories. The model features 480 billion total parameters, with 35 billion active per forward pass (8 out of 160 experts).\n\nPricing for the Alibaba endpoints varies by context length. Once a request is greater than 128k input tokens, the higher pricing is used.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 47.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 37.4,
        "artificial_analysis_intelligence_index": 42.3,
        "artificial_analysis_math_index": 39.3,
        "drop": null,
        "gpqa": 61.8,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 58.5,
        "math_500": 94.2,
        "mmlu": null,
        "mmlu_pro": 78.8,
        "mmmu": null,
        "scicode": 35.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 52.05,
        "finance": 40.8,
        "marketing": 51.86,
        "maths": 39.3,
        "programming": 37.4,
        "science": 62.03333333333334,
        "writing": 50.11
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-22",
    "knowledge_cutoff_date": "2025-01-23",
    "langdb_release_date": "2025-07-22",
    "is_private": false
  },
  {
    "model": "qwen3-coder-480b-a35b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "fireworksai",
      "model_name": "accounts/fireworks/models/qwen3-coder-480b-a35b-instruct",
      "endpoint": "https://api.fireworks.ai/inference/v1"
    },
    "price": {
      "per_input_token": 0.45,
      "per_output_token": 1.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-Coder-480B-A35B-Instruct is a Mixture-of-Experts (MoE) code generation model developed by the Qwen team. It is optimized for agentic coding tasks such as function calling, tool use, and long-context reasoning over repositories. The model features 480 billion total parameters, with 35 billion active per forward pass (8 out of 160 experts).\n\nPricing for the Alibaba endpoints varies by context length. Once a request is greater than 128k input tokens, the higher pricing is used.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1.0,
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 47.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 37.4,
        "artificial_analysis_intelligence_index": 42.3,
        "artificial_analysis_math_index": 39.3,
        "drop": null,
        "gpqa": 61.8,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 58.5,
        "math_500": 94.2,
        "mmlu": null,
        "mmlu_pro": 78.8,
        "mmmu": null,
        "scicode": 35.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 52.05,
        "finance": 40.8,
        "marketing": 51.86,
        "maths": 39.3,
        "programming": 37.4,
        "science": 62.03333333333334,
        "writing": 50.11
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-22",
    "knowledge_cutoff_date": "2025-01-23",
    "langdb_release_date": "2025-07-22",
    "is_private": false
  },
  {
    "model": "qwq-32b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "Qwen/QwQ-32B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.075,
      "per_output_token": 0.15
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "QwQ is the reasoning model of the Qwen series. Compared with conventional instruction-tuned models, QwQ, which is capable of thinking and reasoning, can achieve significantly enhanced performance in downstream tasks, especially hard problems. QwQ-32B is the medium-sized reasoning model, which is capable of achieving competitive performance against state-of-the-art reasoning models, e.g., DeepSeek-R1, o1-mini.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 78.0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 37.9,
        "artificial_analysis_math_index": 29,
        "drop": null,
        "gpqa": 65.2,
        "hle": 8.200000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 63.1,
        "math_500": 95.7,
        "mmlu": null,
        "mmlu_pro": 76.4,
        "mmmu": null,
        "scicode": 35.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 51.55,
        "finance": 33.45,
        "marketing": 45.29,
        "maths": 29,
        "science": 63.22222222222223,
        "writing": 45.650000000000006
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-03-05",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-11-28",
    "langdb_release_date": "2025-03-05",
    "is_private": false
  },
  {
    "model": "QwQ-32B-Preview",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "Qwen/QwQ-32B-Preview",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 1.2,
      "per_output_token": 1.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "QwQ-32B-Preview is an experimental research model developed by the Qwen Team, focused on advancing AI reasoning capabilities.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 45.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 28,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 65.2,
        "hle": 4.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 33.7,
        "math_500": 91.0,
        "mmlu": null,
        "mmlu_pro": 64.8,
        "mmmu": null,
        "scicode": 3.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 46.6,
        "marketing": 55.65,
        "science": 58.333333333333336,
        "writing": 52.919999999999995
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-11-28",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-11-28",
    "langdb_release_date": "2024-11-28",
    "is_private": false
  },
  {
    "model": "SOLAR-10.7B-Instruct-v1.0",
    "model_provider": "upstage",
    "inference_provider": {
      "provider": "togetherai",
      "model_name": "upstage/SOLAR-10.7B-Instruct-v1.0",
      "endpoint": "https://api.together.xyz/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 4096
    },
    "description": "Upstage SOLAR Instruct v1 (11B) is a versatile model by Upstage, focused on following instructions across various domains.",
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "wizardlm-2-8x22b",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "deepinfra",
      "model_name": "microsoft/WizardLM-2-8x22B",
      "endpoint": "https://api.deepinfra.com/v1/openai"
    },
    "price": {
      "per_input_token": 0.48,
      "per_output_token": 0.48
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "WizardLM-2 8x22B is Microsoft AI's most advanced Wizard model. It demonstrates highly competitive performance compared to leading proprietary models, and it consistently outperforms all existing state-of-the-art opensource models.\n\nIt is an instruct finetune of [Mixtral 8x22B](/models/mistralai/mixtral-8x22b).\n\nTo read more about the model release, [click here](https://wizardlm.github.io/WizardLM2/).\n\n#moe",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "afm-4.5b",
    "model_provider": "arcee-ai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "arcee-ai/afm-4.5b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "AFM-4.5B is a 4.5 billion parameter instruction-tuned language model developed by Arcee AI. The model was pretrained on approximately 8 trillion tokens, including 6.5 trillion tokens of general data and 1.5 trillion tokens with an emphasis on mathematical reasoning and code generation. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "aion-1.0",
    "model_provider": "aion-labs",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "aion-labs/aion-1.0",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 4.0,
      "per_output_token": 8.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Aion-1.0 is a multi-model system designed for high performance across various tasks, including reasoning and coding. It is built on DeepSeek-R1, augmented with additional models and techniques such as Tree of Thoughts (ToT) and Mixture of Experts (MoE). It is Aion Lab's most powerful reasoning model.",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "aion-1.0-mini",
    "model_provider": "aion-labs",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "aion-labs/aion-1.0-mini",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.7,
      "per_output_token": 1.4
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Aion-1.0-Mini 32B parameter model is a distilled version of the DeepSeek-R1 model, designed for strong performance in reasoning domains such as mathematics, coding, and logic. It is a modified variant of a FuseAI model that outperforms R1-Distill-Qwen-32B and R1-Distill-Llama-70B, with benchmark results available on its [Hugging Face page](https://huggingface.co/FuseAI/FuseO1-DeepSeekR1-QwQ-SkyT1-32B-Preview), independently replicated for verification.",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "aion-rp-llama-3.1-8b",
    "model_provider": "aion-labs",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "aion-labs/aion-rp-llama-3.1-8b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Aion-RP-Llama-3.1-8B ranks the highest in the character evaluation portion of the RPBench-Auto benchmark, a roleplaying-specific variant of Arena-Hard-Auto, where LLMs evaluate each other’s responses. It is a fine-tuned base model rather than an instruct model, designed to produce more natural and varied writing.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "anubis-70b-v1.1",
    "model_provider": "thedrummer",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-drummer-anubis-70b-1-1",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 0.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "TheDrummer's Anubis v1.1 is an unaligned, creative Llama 3.3 70B model focused on providing character-driven roleplay & stories. It excels at gritty, visceral prose, unique character adherence, and coherent narratives, while maintaining the instruction following Llama 3.3 70B is known for.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "anubis-pro-105b-v1",
    "model_provider": "thedrummer",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-anubis-pro",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Anubis Pro 105B v1 is an expanded and refined variant of Meta’s Llama 3.3 70B, featuring 50% additional layers and further fine-tuning to leverage its increased capacity. Designed for advanced narrative, roleplay, and instructional tasks, it demonstrates enhanced emotional intelligence, creativity, nuanced character portrayal, and superior prompt adherence compared to smaller models. Its larger parameter count allows for deeper contextual understanding and extended reasoning capabilities, optimized for engaging, intelligent, and coherent interactions.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "codellama-7b-instruct-solidity",
    "model_provider": "alfredpros",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "positron-internal-codellama7b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.7,
      "per_output_token": 1.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "A finetuned 7 billion parameters Code LLaMA - Instruct model to generate Solidity smart contract using 4-bit QLoRA finetuning provided by PEFT library.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "coder-large",
    "model_provider": "arcee-ai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "arcee-ai/coder-large",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 0.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Coder‑Large is a 32 B‑parameter offspring of Qwen 2.5‑Instruct that has been further trained on permissively‑licensed GitHub, CodeSearchNet and synthetic bug‑fix corpora. It supports a 32k context window, enabling multi‑file refactoring or long diff review in a single call, and understands 30‑plus programming languages with special attention to TypeScript, Go and Terraform. Internal benchmarks show 5–8 pt gains over CodeLlama‑34 B‑Python on HumanEval and competitive BugFix scores thanks to a reinforcement pass that rewards compilable output. The model emits structured explanations alongside code blocks by default, making it suitable for educational tooling as well as production copilot scenarios. Cost‑wise, Together AI prices it well below proprietary incumbents, so teams can scale interactive coding without runaway spend. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "codestral-2501",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "codestral-2501",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 0.9
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 256000
    },
    "description": "Mistral's cutting-edge language model for coding. Codestral specializes in low-latency, high-frequency tasks such as fill-in-the-middle (FIM), code correction and test generation. \n\nLearn more on their blog post: https://mistral.ai/news/codestral-2501/",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 4.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 16.3,
        "artificial_analysis_intelligence_index": 20.1,
        "artificial_analysis_math_index": 6,
        "drop": null,
        "gpqa": 31.2,
        "hle": 4.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 24.3,
        "math_500": 60.7,
        "mmlu": null,
        "mmlu_pro": 44.6,
        "mmmu": null,
        "scicode": 24.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.65,
        "finance": 13.05,
        "marketing": 26.66,
        "maths": 6,
        "programming": 16.3,
        "science": 33.44444444444445,
        "writing": 26.23
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-13",
    "knowledge_cutoff_date": "2024-07-17",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "codestral-2508",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "codestral-2508",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 0.9
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 256000
    },
    "description": "Mistral's cutting-edge language model for coding released end of July 2025. Codestral specializes in low-latency, high-frequency tasks such as fill-in-the-middle (FIM), code correction and test generation.\n\n[Blog Post](https://mistral.ai/news/codestral-25-08)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 4.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 16.3,
        "artificial_analysis_intelligence_index": 20.1,
        "artificial_analysis_math_index": 6,
        "drop": null,
        "gpqa": 31.2,
        "hle": 4.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 24.3,
        "math_500": 60.7,
        "mmlu": null,
        "mmlu_pro": 44.6,
        "mmmu": null,
        "scicode": 24.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.65,
        "finance": 13.05,
        "marketing": 26.66,
        "maths": 6,
        "programming": 16.3,
        "science": 33.44444444444445,
        "writing": 26.23
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-13",
    "knowledge_cutoff_date": "2024-07-17",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "cogito-v2-preview-deepseek-671b",
    "model_provider": "deepcogito",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "deepcogito/cogito-v2-preview-deepseek-671b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.25,
      "per_output_token": 1.25
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "Cogito v2 is a multilingual, instruction-tuned Mixture of Experts (MoE) large language model with 671 billion parameters. It supports both standard and reasoning-based generation modes. The model introduces hybrid reasoning via Iterated Distillation and Amplification (IDA)—an iterative self-improvement strategy designed to scale alignment with general intelligence. Cogito v2 has been optimized for STEM, programming, instruction following, and tool use. It supports 128k context length and offers strong performance in both multilingual and code-heavy environments. Users can control the reasoning behaviour with the `reasoning` `enabled` boolean. [Learn more in our docs](https://openrouter.ai/docs/use-cases/reasoning-tokens#enable-reasoning-with-default-config)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "cogito-v2-preview-llama-109b-moe",
    "model_provider": "deepcogito",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "deepcogito/cogito-v2-preview-llama-109b-moe",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.18,
      "per_output_token": 0.59
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32767
    },
    "description": "An instruction-tuned, hybrid-reasoning Mixture-of-Experts model built on Llama-4-Scout-17B-16E. Cogito v2 can answer directly or engage an extended “thinking” phase, with alignment guided by Iterated Distillation & Amplification (IDA). It targets coding, STEM, instruction following, and general helpfulness, with stronger multilingual, tool-calling, and reasoning performance than size-equivalent baselines. The model supports long-context use (up to 10M tokens) and standard Transformers workflows. Users can control the reasoning behaviour with the `reasoning` `enabled` boolean. [Learn more in our docs](https://openrouter.ai/docs/use-cases/reasoning-tokens#enable-reasoning-with-default-config)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "command-a",
    "model_provider": "cohere",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "cohere/command-a",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 2.25,
      "per_output_token": 9.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Command A is an open-weights 111B parameter model with a 256k context window focused on delivering great performance across agentic, multilingual, and coding use cases.\nCompared to other leading proprietary and open-weights models Command A delivers maximum performance with minimum hardware costs, excelling on business-critical agentic and multilingual tasks.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 9.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.2,
        "artificial_analysis_intelligence_index": 26.9,
        "artificial_analysis_math_index": 13,
        "drop": null,
        "gpqa": 52.7,
        "hle": 4.6,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 28.7,
        "math_500": 81.89999999999999,
        "mmlu": null,
        "mmlu_pro": 71.2,
        "mmmu": null,
        "scicode": 28.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 39.8,
        "finance": 19.95,
        "marketing": 39.475,
        "maths": 13,
        "programming": 19.2,
        "science": 54.55,
        "writing": 39.79
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-03-13",
    "knowledge_cutoff_date": "2024-09-14",
    "langdb_release_date": "2025-03-13",
    "is_private": false
  },
  {
    "model": "command-r-08-2024",
    "model_provider": "cohere",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "cohere/command-r-08-2024",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "command-r-08-2024 is an update of the [Command R](/models/cohere/command-r) with improved performance for multilingual retrieval-augmented generation (RAG) and tool use. More broadly, it is better at math, code and reasoning and is competitive with the previous version of the larger Command R+ model.\n\nRead the launch post [here](https://docs.cohere.com/changelog/command-gets-refreshed).\n\nUse of this model is subject to Cohere's [Usage Policy](https://docs.cohere.com/docs/usage-policy) and [SaaS Agreement](https://cohere.com/saas-agreement).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "command-r7b-12-2024",
    "model_provider": "cohere",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "cohere/command-r7b-12-2024",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.0375,
      "per_output_token": 0.15
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Command R7B (12-2024) is a small, fast update of the Command R+ model, delivered in December 2024. It excels at RAG, tool use, agents, and similar tasks requiring complex reasoning and multiple steps.\n\nUse of this model is subject to Cohere's [Usage Policy](https://docs.cohere.com/docs/usage-policy) and [SaaS Agreement](https://cohere.com/saas-agreement).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "command-r-plus-08-2024",
    "model_provider": "cohere",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "cohere/command-r-plus-08-2024",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 2.5,
      "per_output_token": 10.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "command-r-plus-08-2024 is an update of the [Command R+](/models/cohere/command-r-plus) with roughly 50% higher throughput and 25% lower latencies as compared to the previous Command R+ version, while keeping the hardware footprint the same.\n\nRead the launch post [here](https://docs.cohere.com/changelog/command-gets-refreshed).\n\nUse of this model is subject to Cohere's [Usage Policy](https://docs.cohere.com/docs/usage-policy) and [SaaS Agreement](https://cohere.com/saas-agreement).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "cydonia-24b-v4.1",
    "model_provider": "thedrummer",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "thedrummer/cydonia-24b-v4.1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Uncensored and creative writing model based on Mistral Small 3.2 24B with good recall, prompt adherence, and intelligence.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "deepcoder-14b-preview",
    "model_provider": "agentica-org",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "agentica-org/deepcoder-14b-preview",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.015,
      "per_output_token": 0.015
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 96000
    },
    "description": "DeepCoder-14B-Preview is a 14B parameter code generation model fine-tuned from DeepSeek-R1-Distill-Qwen-14B using reinforcement learning with GRPO+ and iterative context lengthening. It is optimized for long-context program synthesis and achieves strong performance across coding benchmarks, including 60.6% on LiveCodeBench v5, competitive with models like o3-Mini",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "deephermes-3-llama-3-8b-preview",
    "model_provider": "nousresearch",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "nousresearch/deephermes-3-llama-3-8b-preview",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.03,
      "per_output_token": 0.11
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "DeepHermes 3 Preview is the latest version of our flagship Hermes series of LLMs by Nous Research, and one of the first models in the world to unify Reasoning (long chains of thought that improve answer accuracy) and normal LLM response modes into one model. We have also improved LLM annotation, judgement, and function calling.\n\nDeepHermes 3 Preview is one of the first LLM models to unify both \"intuitive\", traditional mode responses and long chain of thought reasoning responses into a single model, toggled by a system prompt.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "deephermes-3-mistral-24b-preview",
    "model_provider": "nousresearch",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "nousresearch/deephermes-3-mistral-24b-preview",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.09329544,
      "per_output_token": 0.3733632
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "DeepHermes 3 (Mistral 24B Preview) is an instruction-tuned language model by Nous Research based on Mistral-Small-24B, designed for chat, function calling, and advanced multi-turn reasoning. It introduces a dual-mode system that toggles between intuitive chat responses and structured “deep reasoning” mode using special system prompts. Fine-tuned via distillation from R1, it supports structured output (JSON mode) and function call syntax for agent-based applications.\n\nDeepHermes 3 supports a **reasoning toggle via system prompt**, allowing users to switch between fast, intuitive responses and deliberate, multi-step reasoning. When activated with the following specific system instruction, the model enters a *\"deep thinking\"* mode—generating extended chains of thought wrapped in `<think></think>` tags before delivering a final answer. \n\nSystem Prompt: You are a deep thinking AI, you may use extremely long chains of thought to deeply consider the problem and deliberate with yourself via systematic reasoning processes to help come to a correct solution prior to answering. You should enclose your thoughts and internal monologue inside <think> </think> tags, and then provide your solution or response to the problem.\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 4.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 15.5,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 38.2,
        "hle": 3.9,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 19.5,
        "math_500": 59.5,
        "mmlu": null,
        "mmlu_pro": 57.99999999999999,
        "mmmu": null,
        "scicode": 22.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 26.85,
        "marketing": 44.89999999999999,
        "science": 42.08888888888889,
        "writing": 41.239999999999995
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-03-13",
    "knowledge_cutoff_date": "2024-09-14",
    "langdb_release_date": "2025-03-13",
    "is_private": false
  },
  {
    "model": "deepseek-chat-v3-0324",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-deepseek-v3-0324",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.79,
      "per_output_token": 1.15
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek V3, a 685B-parameter, mixture-of-experts model, is the latest iteration of the flagship chat model family from the DeepSeek team.\n\nIt succeeds the [DeepSeek V3](/deepseek/deepseek-chat-v3) model and performs really well on a variety of tasks.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 39,
        "artificial_analysis_intelligence_index": 44.8,
        "artificial_analysis_math_index": 49.7,
        "drop": null,
        "gpqa": 73.5,
        "hle": 6.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 57.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 83.3,
        "mmmu": null,
        "scicode": 36.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "programming": 19
      },
      "scores": {
        "academia": 59.15,
        "finance": 47.25,
        "marketing": 53.81999999999999,
        "maths": 49.7,
        "programming": 39,
        "science": 69.84444444444445,
        "writing": 53.18
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-21",
    "knowledge_cutoff_date": "2025-02-22",
    "langdb_release_date": "2025-08-21",
    "is_private": false
  },
  {
    "model": "deepseek-chat-v3.1",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-deepseek-31",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.64,
      "per_output_token": 1.65
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek-V3.1 is a large hybrid reasoning model (671B parameters, 37B active) that supports both thinking and non-thinking modes via prompt templates. It extends the DeepSeek-V3 base with a two-phase long-context training process, reaching up to 128K tokens, and uses FP8 microscaling for efficient inference.\nThe model improves tool use, code generation, and reasoning efficiency, achieving performance comparable to DeepSeek-R1 on difficult benchmarks while responding more quickly. It supports structured tool calling, code agents, and search agents, making it suitable for research, coding, and agentic workflows. \n\nIt succeeds the DeepSeek V3-0324",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 39,
        "artificial_analysis_intelligence_index": 44.8,
        "artificial_analysis_math_index": 49.7,
        "drop": null,
        "gpqa": 73.5,
        "hle": 6.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 57.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 83.3,
        "mmmu": null,
        "scicode": 36.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "programming": 19
      },
      "scores": {
        "academia": 59.15,
        "finance": 47.25,
        "marketing": 53.81999999999999,
        "maths": 49.7,
        "programming": 39,
        "science": 69.84444444444445,
        "writing": 53.18
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-21",
    "knowledge_cutoff_date": "2025-02-22",
    "langdb_release_date": "2025-08-21",
    "is_private": false
  },
  {
    "model": "deepseek-r1",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "deepseek/deepseek-r1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.6000000000000001,
      "per_output_token": 2.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek R1 is here: Performance on par with [OpenAI o1](/openai/o1), but open-sourced and with fully open reasoning tokens. It's 671B parameters in size, with 37B active in an inference pass.\n\nFully open-source model & [technical report](https://api-docs.deepseek.com/news/news250120).\n\nMIT licensed: Distill & commercialize freely!",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 89.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 44.1,
        "artificial_analysis_intelligence_index": 52,
        "artificial_analysis_math_index": 76,
        "drop": null,
        "gpqa": 81.3,
        "hle": 14.9,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 77.0,
        "math_500": 98.3,
        "mmlu": null,
        "mmlu_pro": 84.89999999999999,
        "mmmu": null,
        "scicode": 40.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 11,
        "finance": 16,
        "maths": 13,
        "programming": 12,
        "science": 13
      },
      "scores": {
        "academia": 66.65,
        "finance": 64.0,
        "marketing": 58.78,
        "maths": 76,
        "programming": 44.1,
        "science": 75.32222222222221,
        "writing": 58.48499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "is_private": false
  },
  {
    "model": "deepseek-r1-0528",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-deepseek-r1-0528",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.79,
      "per_output_token": 4.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "May 28th update to the [original DeepSeek R1](/deepseek/deepseek-r1) Performance on par with [OpenAI o1](/openai/o1), but open-sourced and with fully open reasoning tokens. It's 671B parameters in size, with 37B active in an inference pass.\n\nFully open-source model.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 81.0,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 4,
        "writing": 4
      },
      "scores": {
        "science": 81.0,
        "writing": 81.0
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-05-28",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-11-29",
    "langdb_release_date": "2025-05-28",
    "is_private": false
  },
  {
    "model": "deepseek-r1-0528-qwen3-8b",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-deepseek-r1-0528-qwen3-8b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "DeepSeek-R1-0528 is a lightly upgraded release of DeepSeek R1 that taps more compute and smarter post-training tricks, pushing its reasoning and inference to the brink of flagship models like O3 and Gemini 2.5 Pro.\nIt now tops math, programming, and logic leaderboards, showcasing a step-change in depth-of-thought.\nThe distilled variant, DeepSeek-R1-0528-Qwen3-8B, transfers this chain-of-thought into an 8 B-parameter form, beating standard Qwen3 8B by +10 pp and tying the 235 B “thinking” giant on AIME 2024.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 89.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 44.1,
        "artificial_analysis_intelligence_index": 52,
        "artificial_analysis_math_index": 76,
        "drop": null,
        "gpqa": 81.3,
        "hle": 14.9,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 77.0,
        "math_500": 98.3,
        "mmlu": null,
        "mmlu_pro": 84.89999999999999,
        "mmmu": null,
        "scicode": 40.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 11,
        "finance": 16,
        "maths": 13,
        "programming": 12,
        "science": 13
      },
      "scores": {
        "academia": 66.65,
        "finance": 64.0,
        "marketing": 58.78,
        "maths": 76,
        "programming": 44.1,
        "science": 75.32222222222221,
        "writing": 58.48499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "deepseek-r1-distill-llama-70b",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "deepseek/deepseek-r1-distill-llama-70b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1111066,
      "per_output_token": 0.3777813333333333
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "DeepSeek R1 Distill Llama 70B is a distilled large language model based on [Llama-3.3-70B-Instruct](/meta-llama/llama-3.3-70b-instruct), using outputs from [DeepSeek R1](/deepseek/deepseek-r1). The model combines advanced distillation techniques to achieve high performance across multiple benchmarks, including:\n\n- AIME 2024 pass@1: 70.0\n- MATH-500 pass@1: 94.5\n- CodeForces Rating: 1633\n\nThe model leverages fine-tuning from DeepSeek R1's outputs, enabling competitive performance comparable to larger frontier models.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 67.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.7,
        "artificial_analysis_intelligence_index": 29.9,
        "artificial_analysis_math_index": 53.7,
        "drop": null,
        "gpqa": 65.2,
        "hle": 6.1,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 26.6,
        "math_500": 93.5,
        "mmlu": null,
        "mmlu_pro": 79.5,
        "mmmu": null,
        "scicode": 31.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 47.55,
        "finance": 41.8,
        "marketing": 37.705,
        "maths": 53.7,
        "programming": 19.7,
        "science": 64.19444444444446,
        "writing": 39.915
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "deepseek-r1-distill-qwen-14b",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "deepseek/deepseek-r1-distill-qwen-14b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.875,
      "per_output_token": 0.875
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 64000
    },
    "description": "DeepSeek R1 Distill Qwen 14B is a distilled large language model based on [Qwen 2.5 14B](https://huggingface.co/deepseek-ai/DeepSeek-R1-Distill-Qwen-14B), using outputs from [DeepSeek R1](/deepseek/deepseek-r1). It outperforms OpenAI's o1-mini across various benchmarks, achieving new state-of-the-art results for dense models.\n\nOther benchmark results include:\n\n- AIME 2024 pass@1: 69.7\n- MATH-500 pass@1: 93.9\n- CodeForces Rating: 1481\n\nThe model leverages fine-tuning from DeepSeek R1's outputs, enabling competitive performance comparable to larger frontier models.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 66.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 29.7,
        "artificial_analysis_math_index": 55.7,
        "drop": null,
        "gpqa": 59.099999999999994,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 37.6,
        "math_500": 94.9,
        "mmlu": null,
        "mmlu_pro": 74.0,
        "mmmu": null,
        "scicode": 23.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 44.4,
        "finance": 42.7,
        "marketing": 33.155,
        "maths": 55.7,
        "science": 58.81666666666667,
        "writing": 35.08
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "deepseek-r1-distill-qwen-32b",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "deepseek/deepseek-r1-distill-qwen-32b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.29166666666666663,
      "per_output_token": 1.7766666666666666
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "DeepSeek R1 Distill Qwen 32B is a distilled large language model based on [Qwen 2.5 32B](https://huggingface.co/Qwen/Qwen2.5-32B), using outputs from [DeepSeek R1](/deepseek/deepseek-r1). It outperforms OpenAI's o1-mini across various benchmarks, achieving new state-of-the-art results for dense models.\\n\\nOther benchmark results include:\\n\\n- AIME 2024 pass@1: 72.6\\n- MATH-500 pass@1: 94.3\\n- CodeForces Rating: 1691\\n\\nThe model leverages fine-tuning from DeepSeek R1's outputs, enabling competitive performance comparable to larger frontier models.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 68.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 32.7,
        "artificial_analysis_math_index": 63,
        "drop": null,
        "gpqa": 61.8,
        "hle": 5.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 27.0,
        "math_500": 94.1,
        "mmlu": null,
        "mmlu_pro": 73.9,
        "mmmu": null,
        "scicode": 37.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "maths": 19
      },
      "scores": {
        "academia": 47.25,
        "finance": 47.85,
        "marketing": 34.615,
        "maths": 63,
        "science": 60.25000000000001,
        "writing": 36.44499999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-20",
    "license": "MIT",
    "knowledge_cutoff_date": "2024-07-24",
    "langdb_release_date": "2025-01-20",
    "is_private": false
  },
  {
    "model": "deepseek-r1t2-chimera",
    "model_provider": "tngtech",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "tngtech/deepseek-r1t2-chimera",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 1.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek-TNG-R1T2-Chimera is the second-generation Chimera model from TNG Tech. It is a 671 B-parameter mixture-of-experts text-generation model assembled from DeepSeek-AI’s R1-0528, R1, and V3-0324 checkpoints with an Assembly-of-Experts merge. The tri-parent design yields strong reasoning performance while running roughly 20 % faster than the original R1 and more than 2× faster than R1-0528 under vLLM, giving a favorable cost-to-intelligence trade-off. The checkpoint supports contexts up to 60 k tokens in standard use (tested to ~130 k) and maintains consistent <think> token behaviour, making it suitable for long-context analysis, dialogue and other open-ended generation tasks.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "deepseek-r1t-chimera",
    "model_provider": "tngtech",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "tngtech/deepseek-r1t-chimera",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.17992692,
      "per_output_token": 0.7200576
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek-R1T-Chimera is created by merging DeepSeek-R1 and DeepSeek-V3 (0324), combining the reasoning capabilities of R1 with the token efficiency improvements of V3. It is based on a DeepSeek-MoE Transformer architecture and is optimized for general text generation tasks.\n\nThe model merges pretrained weights from both source models to balance performance across reasoning, efficiency, and instruction-following tasks. It is released under the MIT license and intended for research and commercial use.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "deepseek-v3.1-terminus",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "deepseek/deepseek-v3.1-terminus",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.25666666666666665,
      "per_output_token": 0.9666666666666668
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek-V3.1 Terminus is an update to [DeepSeek V3.1](/deepseek/deepseek-chat-v3.1) that maintains the model's original capabilities while addressing issues reported by users, including language consistency and agent capabilities, further optimizing the model's performance in coding and search agents. It is a large hybrid reasoning model (671B parameters, 37B active) that supports both thinking and non-thinking modes. It extends the DeepSeek-V3 base with a two-phase long-context training process, reaching up to 128K tokens, and uses FP8 microscaling for efficient inference. Users can control the reasoning behaviour with the `reasoning` `enabled` boolean. [Learn more in our docs](https://openrouter.ai/docs/use-cases/reasoning-tokens#enable-reasoning-with-default-config)\n\nThe model improves tool use, code generation, and reasoning efficiency, achieving performance comparable to DeepSeek-R1 on difficult benchmarks while responding more quickly. It supports structured tool calling, code agents, and search agents, making it suitable for research, coding, and agentic workflows. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 25.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 25.9,
        "artificial_analysis_intelligence_index": 32.5,
        "artificial_analysis_math_index": 26,
        "drop": 91.6,
        "gpqa": 57.400000000000006,
        "hle": 3.5999999999999996,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 35.9,
        "math_500": 88.7,
        "mmlu": null,
        "mmlu_pro": 75.2,
        "mmmu": null,
        "scicode": 35.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 44.95,
        "finance": 29.25,
        "marketing": 44.059999999999995,
        "maths": 26,
        "programming": 25.9,
        "science": 58.344444444444456,
        "writing": 43.72
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-25",
    "license": "MIT + Model License (Commercial use allowed)",
    "knowledge_cutoff_date": "2024-06-28",
    "is_private": false
  },
  {
    "model": "deepseek-v3.2-exp",
    "model_provider": "deepseek",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "deepseek/deepseek-v3.2-exp",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.2766666666666667,
      "per_output_token": 0.4066666666666667,
      "per_cached_input_token": 0.028
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "DeepSeek-V3.2-Exp is an experimental large language model released by DeepSeek as an intermediate step between V3.1 and future architectures. It introduces DeepSeek Sparse Attention (DSA), a fine-grained sparse attention mechanism designed to improve training and inference efficiency in long-context scenarios while maintaining output quality. Users can control the reasoning behaviour with the `reasoning` `enabled` boolean. [Learn more in our docs](https://openrouter.ai/docs/use-cases/reasoning-tokens#enable-reasoning-with-default-config)\n\nThe model was trained under conditions aligned with V3.1-Terminus to enable direct comparison. Benchmarking shows performance roughly on par with V3.1 across reasoning, coding, and agentic tool-use tasks, with minor tradeoffs and gains depending on the domain. This release focuses on validating architectural optimizations for extended context lengths rather than advancing raw task accuracy, making it primarily a research-oriented model for exploring efficient transformer designs.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 39.6,
        "artificial_analysis_intelligence_index": 46.3,
        "artificial_analysis_math_index": 57.7,
        "drop": null,
        "gpqa": 79.9,
        "hle": 8.6,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 55.400000000000006,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 83.6,
        "mmmu": null,
        "scicode": 39.900000000000006,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 17,
        "programming": 17,
        "science": 19
      },
      "scores": {
        "academia": 63.1,
        "finance": 52.0,
        "marketing": 55.355,
        "maths": 57.7,
        "programming": 39.6,
        "science": 73.41666666666666,
        "writing": 55.27
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-29",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-04-02",
    "is_private": false
  },
  {
    "model": "devstral-medium",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "devstral-medium-latest",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.4,
      "per_output_token": 2.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Devstral Medium is a high-performance code generation and agentic reasoning model developed jointly by Mistral AI and All Hands AI. Positioned as a step up from Devstral Small, it achieves 61.6% on SWE-Bench Verified, placing it ahead of Gemini 2.5 Pro and GPT-4.1 in code-related tasks, at a fraction of the cost. It is designed for generalization across prompt styles and tool use in code agents and frameworks.\n\nDevstral Medium is available via API only (not open-weight), and supports enterprise deployment on private infrastructure, with optional fine-tuning capabilities.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 23.9,
        "artificial_analysis_intelligence_index": 27.9,
        "artificial_analysis_math_index": 4.7,
        "drop": null,
        "gpqa": 49.2,
        "hle": 3.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 33.7,
        "math_500": 70.7,
        "mmlu": null,
        "mmlu_pro": 70.8,
        "mmmu": null,
        "scicode": 29.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 38.55,
        "finance": 16.3,
        "marketing": 40.529999999999994,
        "maths": 4.7,
        "programming": 23.9,
        "science": 52.55555555555557,
        "writing": 40.11
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-10",
    "knowledge_cutoff_date": "2025-01-11",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "devstral-small-1",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "devstral-small-2505",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Devstral-Small-2505 is a 24B parameter agentic LLM fine-tuned from Mistral-Small-3.1, jointly developed by Mistral AI and All Hands AI for advanced software engineering tasks. It is optimized for codebase exploration, multi-file editing, and integration into coding agents, achieving state-of-the-art results on SWE-Bench Verified (46.8%).\n\nDevstral supports a 128k context window and uses a custom Tekken tokenizer. It is text-only, with the vision encoder removed, and is suitable for local deployment on high-end consumer hardware (e.g., RTX 4090, 32GB RAM Macs). Devstral is best used in agentic workflows via the OpenHands scaffold and is compatible with inference frameworks like vLLM, Transformers, and Ollama. It is released under the Apache 2.0 license.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "license": "Apache-2.0",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "devstral-small-1.1",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "devstral-small-2507",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Devstral Small 1.1 is a 24B parameter open-weight language model for software engineering agents, developed by Mistral AI in collaboration with All Hands AI. Finetuned from Mistral Small 3.1 and released under the Apache 2.0 license, it features a 128k token context window and supports both Mistral-style function calling and XML output formats.\n\nDesigned for agentic coding workflows, Devstral Small 1.1 is optimized for tasks such as codebase exploration, multi-file edits, and integration into autonomous development agents like OpenHands and Cline. It achieves 53.6% on SWE-Bench Verified, surpassing all other open models on this benchmark, while remaining lightweight enough to run on a single 4090 GPU or Apple silicon machine. The model uses a Tekken tokenizer with a 131k vocabulary and is deployable via vLLM, Transformers, Ollama, LM Studio, and other OpenAI-compatible runtimes.\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "license": "Apache-2.0",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "dolphin3.0-mistral-24b",
    "model_provider": "cognitivecomputations",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "cognitivecomputations/dolphin3.0-mistral-24b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.037022,
      "per_output_token": 0.14816
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Dolphin 3.0 is the next generation of the Dolphin series of instruct-tuned models.  Designed to be the ultimate general purpose local model, enabling coding, math, agentic, function calling, and general use cases.\n\nDolphin aims to be a general purpose instruct model, similar to the models behind ChatGPT, Claude, Gemini. \n\nPart of the [Dolphin 3.0 Collection](https://huggingface.co/collections/cognitivecomputations/dolphin-30-677ab47f73d7ff66743979a3) Curated and trained by [Eric Hartford](https://huggingface.co/ehartford), [Ben Gitter](https://huggingface.co/bigstorm), [BlouseJury](https://huggingface.co/BlouseJury) and [Cognitive Computations](https://huggingface.co/cognitivecomputations)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 44.22,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": 62.5,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 16
      },
      "scores": {
        "science": 47.54363636363636,
        "vision": 62.5,
        "writing": 44.22
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-06-20",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2023-10-01",
    "langdb_release_date": "2025-06-20",
    "is_private": false
  },
  {
    "model": "ernie-4.5-21b-a3b",
    "model_provider": "baidu",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "baidu/ernie-4.5-21b-a3b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.07,
      "per_output_token": 0.28
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 120000
    },
    "description": "A sophisticated text-based Mixture-of-Experts (MoE) model featuring 21B total parameters with 3B activated per token, delivering exceptional multimodal understanding and generation through heterogeneous MoE structures and modality-isolated routing. Supporting an extensive 131K token context length, the model achieves efficient inference via multi-expert parallel collaboration and quantization, while advanced post-training techniques including SFT, DPO, and UPO ensure optimized performance across diverse applications with specialized routing and balancing losses for superior task handling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "ernie-4.5-300b-a47b",
    "model_provider": "baidu",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "baidu/ernie-4.5-300b-a47b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.28,
      "per_output_token": 1.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 123000
    },
    "description": "ERNIE-4.5-300B-A47B is a 300B parameter Mixture-of-Experts (MoE) language model developed by Baidu as part of the ERNIE 4.5 series. It activates 47B parameters per token and supports text generation in both English and Chinese. Optimized for high-throughput inference and efficient scaling, it uses a heterogeneous MoE structure with advanced routing and quantization strategies, including FP8 and 2-bit formats. This version is fine-tuned for language-only tasks and supports reasoning, tool parameters, and extended context lengths up to 131k tokens. Suitable for general-purpose LLM applications with high reasoning and throughput demands.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "ernie-4.5-vl-28b-a3b",
    "model_provider": "baidu",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "baidu/ernie-4.5-vl-28b-a3b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.14,
      "per_output_token": 0.56
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 30000
    },
    "description": "A powerful multimodal Mixture-of-Experts chat model featuring 28B total parameters with 3B activated per token, delivering exceptional text and vision understanding through its innovative heterogeneous MoE structure with modality-isolated routing. Built with scaling-efficient infrastructure for high-throughput training and inference, the model leverages advanced post-training techniques including SFT, DPO, and UPO for optimized performance, while supporting an impressive 131K context length and RLVR alignment for superior cross-modal reasoning and generation capabilities.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "ernie-4.5-vl-424b-a47b",
    "model_provider": "baidu",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "baidu/ernie-4.5-vl-424b-a47b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.42,
      "per_output_token": 1.25
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 123000
    },
    "description": "ERNIE-4.5-VL-424B-A47B is a multimodal Mixture-of-Experts (MoE) model from Baidu’s ERNIE 4.5 series, featuring 424B total parameters with 47B active per token. It is trained jointly on text and image data using a heterogeneous MoE architecture and modality-isolated routing to enable high-fidelity cross-modal reasoning, image understanding, and long-context generation (up to 131k tokens). Fine-tuned with techniques like SFT, DPO, UPO, and RLVR, this model supports both “thinking” and non-thinking inference modes. Designed for vision-language tasks in English and Chinese, it is optimized for efficient scaling and can operate under 4-bit/8-bit quantization.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gemini-2.0-flash-001",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.0-flash-001",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.125,
      "per_output_token": 0.5
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Gemini Flash 2.0 offers a significantly faster time to first token (TTFT) compared to [Gemini Flash 1.5](/google/gemini-flash-1.5), while maintaining quality on par with larger models like [Gemini Pro 1.5](/google/gemini-pro-1.5). It introduces notable enhancements in multimodal understanding, coding capabilities, complex instruction following, and function calling. These advancements come together to deliver more seamless and robust agentic experiences.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gemini-2.0-flash-lite-001",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.0-flash-lite-001",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.075,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Gemini 2.0 Flash Lite offers a significantly faster time to first token (TTFT) compared to [Gemini Flash 1.5](/google/gemini-flash-1.5), while maintaining quality on par with larger models like [Gemini Pro 1.5](/google/gemini-pro-1.5), all at extremely economical token prices.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gemini-2.5-flash-image",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.5-flash-image",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 2.5
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Gemini 2.5 Flash Image, a.k.a. \"Nano Banana,\" is now generally available. It is a state of the art image generation model with contextual understanding. It is capable of image generation, edits, and multi-turn conversations. Aspect ratios can be controlled with the [image_config API Parameter](https://openrouter.ai/docs/features/multimodal/image-generation#image-aspect-ratio-configuration)",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gemini-2.5-flash-image-preview",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.5-flash-image-preview",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 2.5
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Gemini 2.5 Flash Image Preview is a state of the art image generation model with contextual understanding. It is capable of image generation, edits, and multi-turn conversations.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gemini-2.5-flash-lite",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.5-flash-lite",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Gemini 2.5 Flash-Lite is a lightweight reasoning model in the Gemini 2.5 family, optimized for ultra-low latency and cost efficiency. It offers improved throughput, faster token generation, and better performance across common benchmarks compared to earlier Flash models. By default, \"thinking\" (i.e. multi-pass reasoning) is disabled to prioritize speed, but developers can enable it via the [Reasoning API parameter](https://openrouter.ai/docs/use-cases/reasoning-tokens) to selectively trade off cost for intelligence. ",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 50.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.9,
        "artificial_analysis_intelligence_index": 30.1,
        "artificial_analysis_math_index": 35.3,
        "drop": null,
        "gpqa": 64.60000000000001,
        "hle": 3.7,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 40.0,
        "math_500": 92.6,
        "mmlu": null,
        "mmlu_pro": 72.39999999999999,
        "mmmu": 72.89999999999999,
        "scicode": 17.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 10
      },
      "scores": {
        "academia": 47.35000000000001,
        "finance": 32.7,
        "marketing": 43.18000000000001,
        "maths": 35.3,
        "programming": 19.9,
        "science": 62.06999999999999,
        "vision": 72.89999999999999,
        "writing": 43.86
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-06-17",
    "license": "CC-BY-4.0",
    "knowledge_cutoff_date": "2025-01-01",
    "langdb_release_date": "2025-06-17",
    "is_private": false
  },
  {
    "model": "gemini-2.5-flash-lite-preview-06-17",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.5-flash-lite-preview-06-17",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Gemini 2.5 Flash-Lite is a lightweight reasoning model in the Gemini 2.5 family, optimized for ultra-low latency and cost efficiency. It offers improved throughput, faster token generation, and better performance across common benchmarks compared to earlier Flash models. By default, \"thinking\" (i.e. multi-pass reasoning) is disabled to prioritize speed, but developers can enable it via the [Reasoning API parameter](https://openrouter.ai/docs/use-cases/reasoning-tokens) to selectively trade off cost for intelligence. ",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gemini-2.5-flash-lite-preview-09-2025",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.5-flash-lite-preview-09-2025",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Gemini 2.5 Flash-Lite is a lightweight reasoning model in the Gemini 2.5 family, optimized for ultra-low latency and cost efficiency. It offers improved throughput, faster token generation, and better performance across common benchmarks compared to earlier Flash models. By default, \"thinking\" (i.e. multi-pass reasoning) is disabled to prioritize speed, but developers can enable it via the [Reasoning API parameter](https://openrouter.ai/docs/use-cases/reasoning-tokens) to selectively trade off cost for intelligence. ",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gemini-2.5-flash-preview-09-2025",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.5-flash-preview-09-2025",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 2.5
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Gemini 2.5 Flash Preview September 2025 Checkpoint is Google's state-of-the-art workhorse model, specifically designed for advanced reasoning, coding, mathematics, and scientific tasks. It includes built-in \"thinking\" capabilities, enabling it to provide responses with greater accuracy and nuanced context handling. \n\nAdditionally, Gemini 2.5 Flash is configurable through the \"max tokens for reasoning\" parameter, as described in the documentation (https://openrouter.ai/docs/use-cases/reasoning-tokens#max-tokens-for-reasoning).",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "gemini-2.5-pro-preview-05-06",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemini-2.5-pro-preview-05-06",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.25,
      "per_output_token": 10.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Gemini 2.5 Pro is Google’s state-of-the-art AI model designed for advanced reasoning, coding, mathematics, and scientific tasks. It employs “thinking” capabilities, enabling it to reason through responses with enhanced accuracy and nuanced context handling. Gemini 2.5 Pro achieves top-tier performance on multiple benchmarks, including first-place positioning on the LMArena leaderboard, reflecting superior human-preference alignment and complex problem-solving abilities.",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "gemma-2-9b-it",
    "model_provider": "google",
    "inference_provider": {
      "provider": "groq",
      "model_name": "gemma2-9b-it",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.2,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Gemma 2 9B by Google is an advanced, open-source language model that sets a new standard for efficiency and performance in its size class.\n\nDesigned for a wide variety of tasks, it empowers developers and researchers to build innovative applications, while maintaining accessibility, safety, and cost-effectiveness.\n\nSee the [launch announcement](https://blog.google/technology/developers/google-gemma-2/) for more details. Usage of Gemma is subject to Google's [Gemma Terms of Use](https://ai.google.dev/gemma/terms).",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 7.8,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 31.1,
        "hle": 3.9,
        "humaneval": 40.2,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 12.6,
        "math_500": 51.7,
        "mmlu": null,
        "mmlu_pro": 49.5,
        "mmmu": null,
        "scicode": 0.7000000000000001,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 19.45,
        "marketing": 36.775000000000006,
        "science": 35.233333333333334,
        "writing": 34.86
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-06-27",
    "license": "Gemma",
    "knowledge_cutoff_date": "2023-12-30",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "gemma-3-27b-it",
    "model_provider": "google",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-gemma3-27b-it",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Gemma 3 introduces multimodality, supporting vision-language input and text outputs. It handles context windows up to 128k tokens, understands over 140 languages, and offers improved math, reasoning, and chat capabilities, including structured outputs and function calling. Gemma 3 27B is Google's latest open source model, successor to [Gemma 2](google/gemma-2-27b-it)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 25.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 12.8,
        "artificial_analysis_intelligence_index": 22.1,
        "artificial_analysis_math_index": 20.7,
        "drop": null,
        "gpqa": 42.6,
        "hle": 4.7,
        "humaneval": 87.8,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 13.7,
        "math_500": 88.3,
        "mmlu": null,
        "mmlu_pro": 66.9,
        "mmmu": null,
        "scicode": 21.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 32.35,
        "finance": 21.4,
        "marketing": 32.315000000000005,
        "maths": 20.7,
        "programming": 12.8,
        "science": 47.8388888888889,
        "writing": 32.96
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-03-12",
    "license": "Gemma",
    "knowledge_cutoff_date": "2024-09-13",
    "langdb_release_date": "2025-03-12",
    "is_private": false
  },
  {
    "model": "gemma-3n-e4b-it",
    "model_provider": "google",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "google/gemma-3n-e4b-it",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.02,
      "per_output_token": 0.04
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Gemma 3n E4B-it is optimized for efficient execution on mobile and low-resource devices, such as phones, laptops, and tablets. It supports multimodal inputs—including text, visual data, and audio—enabling diverse tasks such as text generation, speech recognition, translation, and image analysis. Leveraging innovations like Per-Layer Embedding (PLE) caching and the MatFormer architecture, Gemma 3n dynamically manages memory usage and computational load by selectively activating model parameters, significantly reducing runtime resource requirements.\n\nThis model supports a wide linguistic range (trained in over 140 languages) and features a flexible 32K token context window. Gemma 3n can selectively load parameters, optimizing memory and computational efficiency based on the task or device capabilities, making it well-suited for privacy-focused, offline-capable applications and on-device AI solutions. [Read more in the blog post](https://developers.googleblog.com/en/introducing-gemma-3n/)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 23.7,
        "hle": null,
        "humaneval": 75.0,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "science": 23.7,
        "writing": 23.7
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-06-26",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-06-01",
    "langdb_release_date": "2025-06-26",
    "is_private": false
  },
  {
    "model": "glm-4.1v-9b-thinking",
    "model_provider": "thudm",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "thudm/glm-4.1v-9b-thinking",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.035,
      "per_output_token": 0.138
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "GLM-4.1V-9B-Thinking is a 9B parameter vision-language model developed by THUDM, based on the GLM-4-9B foundation. It introduces a reasoning-centric \"thinking paradigm\" enhanced with reinforcement learning to improve multimodal reasoning, long-context understanding (up to 64K tokens), and complex problem solving. It achieves state-of-the-art performance among models in its class, outperforming even larger models like Qwen-2.5-VL-72B on a majority of benchmark tasks. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "glm-4-32b",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "zai",
      "model_name": "glm-4-32B-0414-128k",
      "endpoint": "https://api.z.ai/api/paas/v4"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "GLM 4 32B is a cost-effective foundation language model.\n\nIt can efficiently perform complex tasks and has significantly enhanced capabilities in tool use, online search, and code-related intelligent tasks.\n\nIt is made by the same lab behind the thudm models.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "glm-4.5",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "zai",
      "model_name": "glm-4.5",
      "endpoint": "https://api.z.ai/api/paas/v4"
    },
    "price": {
      "per_input_token": 0.6,
      "per_output_token": 2.2,
      "per_cached_input_token": 0.11
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "GLM-4.5 is our latest flagship foundation model, purpose-built for agent-based applications. It leverages a Mixture-of-Experts (MoE) architecture and supports a context length of up to 128k tokens. GLM-4.5 delivers significantly enhanced capabilities in reasoning, code generation, and agent alignment. It supports a hybrid inference mode with two options, a \"thinking mode\" designed for complex reasoning and tool use, and a \"non-thinking mode\" optimized for instant responses.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 87.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 43.3,
        "artificial_analysis_intelligence_index": 51.3,
        "artificial_analysis_math_index": 73.7,
        "drop": null,
        "gpqa": 78.64999999999999,
        "hle": 12.2,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 73.8,
        "math_500": 97.9,
        "mmlu": null,
        "mmlu_pro": 83.5,
        "mmmu": null,
        "scicode": 34.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 14,
        "finance": 17,
        "maths": 15,
        "programming": 13
      },
      "scores": {
        "academia": 64.975,
        "finance": 62.5,
        "marketing": 57.65749999999999,
        "maths": 73.7,
        "programming": 43.3,
        "science": 73.15277777777777,
        "writing": 56.99249999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-28",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-01-29",
    "langdb_release_date": "2025-07-28",
    "is_private": false
  },
  {
    "model": "glm-4.5",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-glm-45",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.59,
      "per_output_token": 2.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "GLM-4.5 is our latest flagship foundation model, purpose-built for agent-based applications. It leverages a Mixture-of-Experts (MoE) architecture and supports a context length of up to 128k tokens. GLM-4.5 delivers significantly enhanced capabilities in reasoning, code generation, and agent alignment. It supports a hybrid inference mode with two options, a \"thinking mode\" designed for complex reasoning and tool use, and a \"non-thinking mode\" optimized for instant responses.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 87.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 43.3,
        "artificial_analysis_intelligence_index": 51.3,
        "artificial_analysis_math_index": 73.7,
        "drop": null,
        "gpqa": 78.64999999999999,
        "hle": 12.2,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 73.8,
        "math_500": 97.9,
        "mmlu": null,
        "mmlu_pro": 83.5,
        "mmmu": null,
        "scicode": 34.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 14,
        "finance": 17,
        "maths": 15,
        "programming": 13
      },
      "scores": {
        "academia": 64.975,
        "finance": 62.5,
        "marketing": 57.65749999999999,
        "maths": 73.7,
        "programming": 43.3,
        "science": 73.15277777777777,
        "writing": 56.99249999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-28",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-01-29",
    "langdb_release_date": "2025-07-28",
    "is_private": false
  },
  {
    "model": "glm-4.5-air",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "zai",
      "model_name": "glm-4.5-air",
      "endpoint": "https://api.z.ai/api/paas/v4"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 1.1,
      "per_cached_input_token": 0.03
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "GLM-4.5-Air is the lightweight variant of our latest flagship model family, also purpose-built for agent-centric applications. Like GLM-4.5, it adopts the Mixture-of-Experts (MoE) architecture but with a more compact parameter size. GLM-4.5-Air also supports hybrid inference modes, offering a \"thinking mode\" for advanced reasoning and tool use, and a \"non-thinking mode\" for real-time interaction.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 67.30000000000001,
        "aime_25": null,
        "artificial_analysis_coding_index": 39.4,
        "artificial_analysis_intelligence_index": 48.8,
        "artificial_analysis_math_index": 80.7,
        "drop": null,
        "gpqa": 74.15,
        "hle": 6.800000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 68.4,
        "math_500": 96.5,
        "mmlu": null,
        "mmlu_pro": 81.5,
        "mmmu": null,
        "scicode": 30.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 15,
        "maths": 11,
        "programming": 18
      },
      "scores": {
        "academia": 61.475,
        "finance": 64.75,
        "marketing": 53.352500000000006,
        "maths": 80.7,
        "programming": 39.4,
        "science": 69.525,
        "writing": 52.502500000000005
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-28",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-01-29",
    "is_private": false
  },
  {
    "model": "glm-4.5-airx",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "zai",
      "model_name": "glm-4.5-airx",
      "endpoint": "https://api.z.ai/api/paas/v4"
    },
    "price": {
      "per_input_token": 1.1,
      "per_output_token": 4.5,
      "per_cached_input_token": 0.22
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "GLM-4.5-AirX is a lightweight, speed-optimized variant of GLM-4.5-Air delivering ultra-fast responses while preserving the same capabilities and context length as the base Air model.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 67.30000000000001,
        "aime_25": null,
        "artificial_analysis_coding_index": 39.4,
        "artificial_analysis_intelligence_index": 48.8,
        "artificial_analysis_math_index": 80.7,
        "drop": null,
        "gpqa": 74.15,
        "hle": 6.800000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 68.4,
        "math_500": 96.5,
        "mmlu": null,
        "mmlu_pro": 81.5,
        "mmmu": null,
        "scicode": 30.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 15,
        "maths": 11,
        "programming": 18
      },
      "scores": {
        "academia": 61.475,
        "finance": 64.75,
        "marketing": 53.352500000000006,
        "maths": 80.7,
        "programming": 39.4,
        "science": 69.525,
        "writing": 52.502500000000005
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-28",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-01-29",
    "is_private": false
  },
  {
    "model": "glm-4.5v",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "zai",
      "model_name": "glm-4.5v",
      "endpoint": "https://api.z.ai/api/paas/v4"
    },
    "price": {
      "per_input_token": 0.6,
      "per_output_token": 1.8,
      "per_cached_input_token": 0.11
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "GLM-4.5V is a vision-language foundation model for multimodal agent applications. Built on a Mixture-of-Experts (MoE) architecture with 106B parameters and 12B activated parameters, it achieves state-of-the-art results in video understanding, image Q&A, OCR, and document parsing, with strong gains in front-end web coding, grounding, and spatial reasoning. It offers a hybrid inference mode: a \"thinking mode\" for deep reasoning and a \"non-thinking mode\" for fast responses.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 20.1,
        "artificial_analysis_intelligence_index": 26,
        "artificial_analysis_math_index": 15.3,
        "drop": null,
        "gpqa": 57.3,
        "hle": 3.5999999999999996,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 35.199999999999996,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 75.1,
        "mmmu": null,
        "scicode": 18.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 41.65,
        "finance": 20.65,
        "marketing": 32.82,
        "maths": 15.3,
        "programming": 20.1,
        "science": 58.25555555555555,
        "writing": 34.879999999999995
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-11",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-02-12",
    "is_private": false
  },
  {
    "model": "glm-4.5v",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-glm-45v",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 1.8
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "GLM-4.5V is a vision-language foundation model for multimodal agent applications. Built on a Mixture-of-Experts (MoE) architecture with 106B parameters and 12B activated parameters, it achieves state-of-the-art results in video understanding, image Q&A, OCR, and document parsing, with strong gains in front-end web coding, grounding, and spatial reasoning. It offers a hybrid inference mode: a \"thinking mode\" for deep reasoning and a \"non-thinking mode\" for fast responses.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 20.1,
        "artificial_analysis_intelligence_index": 26,
        "artificial_analysis_math_index": 15.3,
        "drop": null,
        "gpqa": 57.3,
        "hle": 3.5999999999999996,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 35.199999999999996,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 75.1,
        "mmmu": null,
        "scicode": 18.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 41.65,
        "finance": 20.65,
        "marketing": 32.82,
        "maths": 15.3,
        "programming": 20.1,
        "science": 58.25555555555555,
        "writing": 34.879999999999995
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-11",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-02-12",
    "is_private": false
  },
  {
    "model": "glm-4.5-x",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "zai",
      "model_name": "glm-4.5-x",
      "endpoint": "https://api.z.ai/api/paas/v4"
    },
    "price": {
      "per_input_token": 2.2,
      "per_output_token": 8.9,
      "per_cached_input_token": 0.45
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "GLM-4.5-X is a high-performance variant of GLM-4.5 optimized for ultra-fast responses while maintaining the same capabilities and context length as the base model.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 87.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 43.3,
        "artificial_analysis_intelligence_index": 51.3,
        "artificial_analysis_math_index": 73.7,
        "drop": null,
        "gpqa": 78.64999999999999,
        "hle": 12.2,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 73.8,
        "math_500": 97.9,
        "mmlu": null,
        "mmlu_pro": 83.5,
        "mmmu": null,
        "scicode": 34.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 14,
        "finance": 17,
        "maths": 15,
        "programming": 13
      },
      "scores": {
        "academia": 64.975,
        "finance": 62.5,
        "marketing": 57.65749999999999,
        "maths": 73.7,
        "programming": 43.3,
        "science": 73.15277777777777,
        "writing": 56.99249999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-07-28",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-01-29",
    "is_private": false
  },
  {
    "model": "glm-4.6",
    "model_provider": "z-ai",
    "inference_provider": {
      "provider": "zai",
      "model_name": "glm-4.6\t",
      "endpoint": "https://api.z.ai/api/paas/v4"
    },
    "price": {
      "per_input_token": 0.6,
      "per_output_token": 2.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "GLM-4.6 achieves comprehensive enhancements across multiple domains, including real-world coding, long-context processing, reasoning, searching, writing, and agentic applications.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "reasoning": {
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "temperature": {
        "default": 1,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2,
        "min": 0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 38.7,
        "artificial_analysis_intelligence_index": 44.7,
        "artificial_analysis_math_index": 44.3,
        "drop": null,
        "gpqa": 81.0,
        "hle": 5.2,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 56.10000000000001,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 78.4,
        "mmmu": null,
        "scicode": 33.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 18
      },
      "scores": {
        "academia": 62.85,
        "finance": 44.5,
        "marketing": 47.02,
        "maths": 44.3,
        "programming": 38.7,
        "science": 71.56666666666668,
        "writing": 48.02
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-30",
    "license": "MIT",
    "knowledge_cutoff_date": "2025-04-03",
    "is_private": false
  },
  {
    "model": "glm-z1-32b",
    "model_provider": "thudm",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "thudm/glm-z1-32b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.01999188,
      "per_output_token": 0.0800064
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "GLM-Z1-32B-0414 is an enhanced reasoning variant of GLM-4-32B, built for deep mathematical, logical, and code-oriented problem solving. It applies extended reinforcement learning—both task-specific and general pairwise preference-based—to improve performance on complex multi-step tasks. Compared to the base GLM-4-32B model, Z1 significantly boosts capabilities in structured reasoning and formal domains.\n\nThe model supports enforced “thinking” steps via prompt engineering and offers improved coherence for long-form outputs. It’s optimized for use in agentic workflows, and includes support for long context (via YaRN), JSON tool calling, and fine-grained sampling configuration for stable inference. Ideal for use cases requiring deliberate, multi-step reasoning or formal derivations.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "goliath-120b",
    "model_provider": "alpindale",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "alpindale/goliath-120b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 7.000000000000001,
      "per_output_token": 8.625
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 6144
    },
    "description": "A large LLM created by combining two fine-tuned Llama 70B models into one 120B model. Combines Xwin and Euryale.\n\nCredits to\n- [@chargoddard](https://huggingface.co/chargoddard) for developing the framework used to merge the model - [mergekit](https://github.com/cg123/mergekit).\n- [@Undi95](https://huggingface.co/Undi95) for helping with the merge ratios.\n\n#merge",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_a": {
        "default": 0.0,
        "description": "Consider only tokens with sufficiently high probabilities relative to the top token. A lower value focuses the selection on tokens near the top probability, acting like a dynamic Top-P filter.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "gpt-oss-120b",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "groq",
      "model_name": "openai/gpt-oss-120b",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.75,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "gpt-oss-120b is an open-weight, 117B-parameter Mixture-of-Experts (MoE) language model from OpenAI designed for high-reasoning, agentic, and general-purpose production use cases. It activates 5.1B parameters per forward pass and is optimized to run on a single H100 GPU with native MXFP4 quantization. The model supports configurable reasoning depth, full chain-of-thought access, and native tool use, including function calling, browsing, and structured output generation.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 41.2,
        "artificial_analysis_intelligence_index": 58,
        "artificial_analysis_math_index": 93.4,
        "drop": null,
        "gpqa": 79.15,
        "hle": 18.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 65.3,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 80.80000000000001,
        "mmmu": null,
        "scicode": 36.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 9,
        "finance": 5,
        "marketing": 13,
        "maths": 2,
        "programming": 15,
        "writing": 19
      },
      "scores": {
        "academia": 68.575,
        "finance": 75.7,
        "marketing": 65.8675,
        "maths": 93.4,
        "programming": 41.2,
        "science": 73.05277777777779,
        "writing": 63.8475
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-05",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-02-06",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "gpt-oss-120b",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-gpt-oss-120b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "gpt-oss-120b is an open-weight, 117B-parameter Mixture-of-Experts (MoE) language model from OpenAI designed for high-reasoning, agentic, and general-purpose production use cases. It activates 5.1B parameters per forward pass and is optimized to run on a single H100 GPU with native MXFP4 quantization. The model supports configurable reasoning depth, full chain-of-thought access, and native tool use, including function calling, browsing, and structured output generation.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 41.2,
        "artificial_analysis_intelligence_index": 58,
        "artificial_analysis_math_index": 93.4,
        "drop": null,
        "gpqa": 79.15,
        "hle": 18.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 65.3,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 80.80000000000001,
        "mmmu": null,
        "scicode": 36.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 9,
        "finance": 5,
        "marketing": 13,
        "maths": 2,
        "programming": 15,
        "writing": 19
      },
      "scores": {
        "academia": 68.575,
        "finance": 75.7,
        "marketing": 65.8675,
        "maths": 93.4,
        "programming": 41.2,
        "science": 73.05277777777779,
        "writing": 63.8475
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-05",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-02-06",
    "langdb_release_date": "2025-08-05",
    "is_private": false
  },
  {
    "model": "gpt-oss-20b",
    "model_provider": "openai",
    "inference_provider": {
      "provider": "groq",
      "model_name": "openai/gpt-oss-20b",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.5,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "gpt-oss-20b is an open-weight 21B parameter model released by OpenAI under the Apache 2.0 license. It uses a Mixture-of-Experts (MoE) architecture with 3.6B active parameters per forward pass, optimized for lower-latency inference and deployability on consumer or single-GPU hardware. The model is trained in OpenAI’s Harmony response format and supports reasoning level configuration, fine-tuning, and agentic capabilities including function calling, tool use, and structured outputs.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 40.7,
        "artificial_analysis_intelligence_index": 52.4,
        "artificial_analysis_math_index": 89.3,
        "drop": null,
        "gpqa": 70.15,
        "hle": 9.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 77.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 74.8,
        "mmmu": null,
        "scicode": 34.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 10,
        "maths": 6,
        "programming": 16
      },
      "scores": {
        "academia": 61.275000000000006,
        "finance": 70.85,
        "marketing": 57.267500000000005,
        "maths": 89.3,
        "programming": 40.7,
        "science": 65.25277777777778,
        "writing": 55.0525
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-05",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-02-06",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "grok-3-beta",
    "model_provider": "xai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "x-ai/grok-3-beta",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 4.000000000000001,
      "per_output_token": 20.0,
      "per_cached_input_token": 1.0000000000000002
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Grok 3 is the latest model from xAI. It's their flagship model that excels at enterprise use cases like data extraction, coding, and text summarization. Possesses deep domain knowledge in finance, healthcare, law, and science.\n\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "grok-3-mini-beta",
    "model_provider": "xai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "x-ai/grok-3-mini-beta",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.45,
      "per_output_token": 2.25,
      "per_cached_input_token": 0.1125
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "A lightweight model that thinks before responding. Fast, smart, and great for logic-based tasks that do not require deep domain knowledge. The raw thinking traces are accessible.",
    "parameters": {
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 84.0,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 2,
        "writing": 2
      },
      "scores": {
        "science": 84.0,
        "writing": 84.0
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-02-17",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-11-17",
    "is_private": false
  },
  {
    "model": "grok-4-fast",
    "model_provider": "x-ai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "x-ai/grok-4-fast",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.5,
      "per_cached_input_token": 0.05
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 2000000
    },
    "description": "Grok 4 Fast is xAI's latest multimodal model with SOTA cost-efficiency and a 2M token context window. It comes in two flavors: non-reasoning and reasoning. Read more about the model on xAI's [news post](http://x.ai/news/grok-4-fast). Reasoning can be enabled using the `reasoning` `enabled` parameter in the API. [Learn more in our docs](https://openrouter.ai/docs/use-cases/reasoning-tokens#controlling-reasoning-tokens)\n\nPrompts and completions on Grok 4 Fast Free may be used by xAI or OpenRouter to improve future models.",
    "parameters": {
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 28.1,
        "artificial_analysis_intelligence_index": 38.6,
        "artificial_analysis_math_index": 41.3,
        "drop": null,
        "gpqa": 85.7,
        "hle": 5.0,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 40.1,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 73.0,
        "mmmu": null,
        "scicode": 32.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 19
      },
      "scores": {
        "academia": 62.150000000000006,
        "finance": 39.95,
        "marketing": 43.705,
        "maths": 41.3,
        "programming": 28.1,
        "science": 71.79444444444445,
        "writing": 46.03
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-08-28",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-03-01",
    "is_private": false
  },
  {
    "model": "hermes-2-pro-llama-3-8b",
    "model_provider": "nousresearch",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "nousresearch/hermes-2-pro-llama-3-8b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.06333333333333332,
      "per_output_token": 0.08666666666666668
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Hermes 2 Pro is an upgraded, retrained version of Nous Hermes 2, consisting of an updated and cleaned version of the OpenHermes 2.5 Dataset, as well as a newly introduced Function Calling and JSON Mode dataset developed in-house.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "hermes-4-405b",
    "model_provider": "nousresearch",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "nousresearch/hermes-4-405b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.5999594,
      "per_output_token": 1.900032
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Hermes 4 is a large-scale reasoning model built on Meta-Llama-3.1-405B and released by Nous Research. It introduces a hybrid reasoning mode, where the model can choose to deliberate internally with <think>...</think> traces or respond directly, offering flexibility between speed and depth. Users can control the reasoning behaviour with the `reasoning` `enabled` boolean. [Learn more in our docs](https://openrouter.ai/docs/use-cases/reasoning-tokens#enable-reasoning-with-default-config)\n\nThe model is instruction-tuned with an expanded post-training corpus (~60B tokens) emphasizing reasoning traces, improving performance in math, code, STEM, and logical reasoning, while retaining broad assistant utility. It also supports structured outputs, including JSON mode, schema adherence, function calling, and tool use. Hermes 4 is trained for steerability, lower refusal rates, and alignment toward neutral, user-directed behavior.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "hermes-4-70b",
    "model_provider": "nousresearch",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "nousresearch/hermes-4-70b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.11164772,
      "per_output_token": 0.3866816
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Hermes 4 70B is a hybrid reasoning model from Nous Research, built on Meta-Llama-3.1-70B. It introduces the same hybrid mode as the larger 405B release, allowing the model to either respond directly or generate explicit <think>...</think> reasoning traces before answering. Users can control the reasoning behaviour with the `reasoning` `enabled` boolean. [Learn more in our docs](https://openrouter.ai/docs/use-cases/reasoning-tokens#enable-reasoning-with-default-config)\n\nThis 70B variant is trained with the expanded post-training corpus (~60B tokens) emphasizing verified reasoning data, leading to improvements in mathematics, coding, STEM, logic, and structured outputs while maintaining general assistant performance. It supports JSON mode, schema adherence, function calling, and tool use, and is designed for greater steerability with reduced refusal rates.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "hunyuan-a13b-instruct",
    "model_provider": "tencent",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "tencent/hunyuan-a13b-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.03,
      "per_output_token": 0.03
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Hunyuan-A13B is a 13B active parameter Mixture-of-Experts (MoE) language model developed by Tencent, with a total parameter count of 80B and support for reasoning via Chain-of-Thought. It offers competitive benchmark performance across mathematics, science, coding, and multi-turn reasoning tasks, while maintaining high inference efficiency via Grouped Query Attention (GQA) and quantization support (FP8, GPTQ, etc.).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "inflection-3-pi",
    "model_provider": "inflection",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "inflection/inflection-3-pi",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 2.5,
      "per_output_token": 10.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8000
    },
    "description": "Inflection 3 Pi powers Inflection's [Pi](https://pi.ai) chatbot, including backstory, emotional intelligence, productivity, and safety. It has access to recent news, and excels in scenarios like customer support and roleplay.\n\nPi has been trained to mirror your tone and style, if you use more emojis, so will Pi! Try experimenting with various prompts and conversation styles.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "inflection-3-productivity",
    "model_provider": "inflection",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "inflection/inflection-3-productivity",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 2.5,
      "per_output_token": 10.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8000
    },
    "description": "Inflection 3 Productivity is optimized for following instructions. It is better for tasks requiring JSON output or precise adherence to provided guidelines. It has access to recent news.\n\nFor emotional intelligence similar to Pi, see [Inflect 3 Pi](/inflection/inflection-3-pi)\n\nSee [Inflection's announcement](https://inflection.ai/blog/enterprise) for more details.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "internvl3-78b",
    "model_provider": "opengvlab",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "opengvlab/internvl3-78b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.07,
      "per_output_token": 0.26
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "The InternVL3 series is an advanced multimodal large language model (MLLM). Compared to InternVL 2.5, InternVL3 demonstrates stronger multimodal perception and reasoning capabilities. \n\nIn addition, InternVL3 is benchmarked against the Qwen2.5 Chat models, whose pre-trained base models serve as the initialization for its language component. Benefiting from Native Multimodal Pre-Training, the InternVL3 series surpasses the Qwen2.5 series in overall text performance.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "jamba-large-1.7",
    "model_provider": "ai21",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "ai21/jamba-large-1.7",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 8.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 256000
    },
    "description": "Jamba Large 1.7 is the latest model in the Jamba open family, offering improvements in grounding, instruction-following, and overall efficiency. Built on a hybrid SSM-Transformer architecture with a 256K context window, it delivers more accurate, contextually grounded responses and better steerability than previous versions.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "jamba-mini-1.7",
    "model_provider": "ai21",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "ai21/jamba-mini-1.7",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.4
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 256000
    },
    "description": "Jamba Mini 1.7 is a compact and efficient member of the Jamba open model family, incorporating key improvements in grounding and instruction-following while maintaining the benefits of the SSM-Transformer hybrid architecture and 256K context window. Despite its compact size, it delivers accurate, contextually grounded responses and improved steerability.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "kimi-dev-72b",
    "model_provider": "moonshotai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "moonshotai/kimi-dev-72b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.29,
      "per_output_token": 1.15
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Kimi-Dev-72B is an open-source large language model fine-tuned for software engineering and issue resolution tasks. Based on Qwen2.5-72B, it is optimized using large-scale reinforcement learning that applies code patches in real repositories and validates them via full test suite execution—rewarding only correct, robust completions. The model achieves 60.4% on SWE-bench Verified, setting a new benchmark among open-source models for software bug fixing and code reasoning.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "kimi-k2",
    "model_provider": "moonshotai",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-kimi-k2-instruct",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.99,
      "per_output_token": 2.99
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Kimi K2 Instruct is a large-scale Mixture-of-Experts (MoE) language model developed by Moonshot AI, featuring 1 trillion total parameters with 32 billion active per forward pass. It is optimized for agentic capabilities, including advanced tool use, reasoning, and code synthesis. Kimi K2 excels across a broad range of benchmarks, particularly in coding (LiveCodeBench, SWE-bench), reasoning (ZebraLogic, GPQA), and tool-use (Tau2, AceBench) tasks. It supports long-context inference up to 128K tokens and is designed with a novel training stack that includes the MuonClip optimizer for stable large-scale MoE training.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 38.1,
        "artificial_analysis_intelligence_index": 50.4,
        "artificial_analysis_math_index": 57.3,
        "drop": null,
        "gpqa": 76.25,
        "hle": 6.3,
        "humaneval": 94.5,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 61.0,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 81.89999999999999,
        "mmmu": null,
        "scicode": 30.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 16
      },
      "scores": {
        "academia": 63.325,
        "finance": 53.849999999999994,
        "marketing": 57.52749999999999,
        "maths": 57.3,
        "programming": 38.1,
        "science": 70.675,
        "writing": 56.0425
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-01",
    "license": "Modified MIT License",
    "knowledge_cutoff_date": "2024-07-05",
    "langdb_release_date": "2025-01-01",
    "is_private": false
  },
  {
    "model": "kimi-k2",
    "model_provider": "moonshotai",
    "inference_provider": {
      "provider": "groq",
      "model_name": "moonshotai/kimi-k2-instruct",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 3.0,
      "per_cached_input_token": 0.5,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Kimi K2 Instruct is a large-scale Mixture-of-Experts (MoE) language model developed by Moonshot AI, featuring 1 trillion total parameters with 32 billion active per forward pass. It is optimized for agentic capabilities, including advanced tool use, reasoning, and code synthesis. Kimi K2 excels across a broad range of benchmarks, particularly in coding (LiveCodeBench, SWE-bench), reasoning (ZebraLogic, GPQA), and tool-use (Tau2, AceBench) tasks. It supports long-context inference up to 128K tokens and is designed with a novel training stack that includes the MuonClip optimizer for stable large-scale MoE training.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 38.1,
        "artificial_analysis_intelligence_index": 50.4,
        "artificial_analysis_math_index": 57.3,
        "drop": null,
        "gpqa": 76.25,
        "hle": 6.3,
        "humaneval": 94.5,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 61.0,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 81.89999999999999,
        "mmmu": null,
        "scicode": 30.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 16
      },
      "scores": {
        "academia": 63.325,
        "finance": 53.849999999999994,
        "marketing": 57.52749999999999,
        "maths": 57.3,
        "programming": 38.1,
        "science": 70.675,
        "writing": 56.0425
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-05",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-03-09",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "kimi-k2-0905",
    "model_provider": "moonshotai",
    "inference_provider": {
      "provider": "groq",
      "model_name": "moonshotai/kimi-k2-instruct-0905",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 3.0,
      "per_cached_input_token": 0.5,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Kimi K2 0905 is the September update of [Kimi K2 0711](moonshotai/kimi-k2). It is a large-scale Mixture-of-Experts (MoE) language model developed by Moonshot AI, featuring 1 trillion total parameters with 32 billion active per forward pass. It supports long-context inference up to 256k tokens, extended from the previous 128k.\n\nThis update improves agentic coding with higher accuracy and better generalization across scaffolds, and enhances frontend coding with more aesthetic and functional outputs for web, 3D, and related tasks. Kimi K2 is optimized for agentic capabilities, including advanced tool use, reasoning, and code synthesis. It excels across coding (LiveCodeBench, SWE-bench), reasoning (ZebraLogic, GPQA), and tool-use (Tau2, AceBench) benchmarks. The model is trained with a novel stack incorporating the MuonClip optimizer for stable large-scale MoE training.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 38.1,
        "artificial_analysis_intelligence_index": 50.4,
        "artificial_analysis_math_index": 57.3,
        "drop": null,
        "gpqa": 76.25,
        "hle": 6.3,
        "humaneval": 94.5,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 61.0,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 81.89999999999999,
        "mmmu": null,
        "scicode": 30.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 16
      },
      "scores": {
        "academia": 63.325,
        "finance": 53.849999999999994,
        "marketing": 57.52749999999999,
        "maths": 57.3,
        "programming": 38.1,
        "science": 70.675,
        "writing": 56.0425
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-05",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2025-03-09",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "l3-euryale-70b",
    "model_provider": "sao10k",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "sao10k/l3-euryale-70b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.48,
      "per_output_token": 1.48
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Euryale 70B v2.1 is a model focused on creative roleplay from [Sao10k](https://ko-fi.com/sao10k).\n\n- Better prompt adherence.\n- Better anatomy / spatial awareness.\n- Adapts much better to unique and custom formatting / reply formats.\n- Very creative, lots of unique swipes.\n- Is not restrictive during roleplays.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "lfm-3b",
    "model_provider": "liquid",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "liquid/lfm-3b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.02,
      "per_output_token": 0.02
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Liquid's LFM 3B delivers incredible performance for its size. It positions itself as first place among 3B parameter transformers, hybrids, and RNN models It is also on par with Phi-3.5-mini on multiple benchmarks, while being 18.4% smaller.\n\nLFM-3B is the ideal choice for mobile and other edge text-based applications.\n\nSee the [launch announcement](https://www.liquid.ai/liquid-foundation-models) for benchmarks and more info.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "lfm-7b",
    "model_provider": "liquid",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "liquid/lfm-7b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.015,
      "per_output_token": 0.02
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "LFM-7B, a new best-in-class language model. LFM-7B is designed for exceptional chat capabilities, including languages like Arabic and Japanese. Powered by the Liquid Foundation Model (LFM) architecture, it exhibits unique features like low memory footprint and fast inference speed. \n\nLFM-7B is the world’s best-in-class multilingual language model in English, Arabic, and Japanese.\n\nSee the [launch announcement](https://www.liquid.ai/lfm-7b) for benchmarks and more info.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-3.1-405b",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "meta-llama/llama-3.1-405b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 3.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Meta's latest class of model (Llama 3.1) launched with a variety of sizes & flavors. This is the base 405B pre-trained version.\n\nIt has demonstrated strong performance compared to leading closed-source models in human evaluations.\n\nTo read more about the model release, [click here](https://ai.meta.com/blog/meta-llama-3/). Usage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 21.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 22.2,
        "artificial_analysis_intelligence_index": 28.1,
        "artificial_analysis_math_index": 3,
        "drop": 84.8,
        "gpqa": 51.1,
        "hle": 4.2,
        "humaneval": 89.0,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 30.5,
        "math_500": 70.3,
        "mmlu": null,
        "mmlu_pro": 73.2,
        "mmmu": null,
        "scicode": 29.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 39.6,
        "finance": 15.55,
        "marketing": 42.655,
        "maths": 3,
        "programming": 22.2,
        "science": 54.48333333333334,
        "writing": 42.21000000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-23",
    "license": "Meta Llama Community",
    "knowledge_cutoff_date": "2024-01-25",
    "is_private": false
  },
  {
    "model": "llama-3.1-8b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "groq",
      "model_name": "llama-3.1-8b-instant",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.08,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Meta's latest class of model (Llama 3.1) launched with a variety of sizes & flavors. This 8B instruct-tuned version is fast and efficient.\n\nIt has demonstrated strong performance compared to leading closed-source models in human evaluations.\n\nTo read more about the model release, [click here](https://ai.meta.com/blog/meta-llama-3-1/). Usage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 7.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 8.5,
        "artificial_analysis_intelligence_index": 16.9,
        "artificial_analysis_math_index": 4.3,
        "drop": 59.5,
        "gpqa": 28.15,
        "hle": 5.1,
        "humaneval": 72.6,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 11.6,
        "math_500": 51.9,
        "mmlu": null,
        "mmlu_pro": 47.599999999999994,
        "mmmu": null,
        "scicode": 13.2,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 22.525,
        "finance": 10.6,
        "marketing": 28.28749999999999,
        "maths": 4.3,
        "programming": 8.5,
        "science": 33.15277777777778,
        "writing": 27.7075
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-23",
    "license": "Meta Llama Community",
    "knowledge_cutoff_date": "2023-12-31",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "llama-3.1-lumimaid-8b",
    "model_provider": "neversleep",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "positron-internal-lumimaid-v02-8b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.17,
      "per_output_token": 0.99
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 40000
    },
    "description": "Lumimaid v0.2 8B is a finetune of [Llama 3.1 8B](/models/meta-llama/llama-3.1-8b-instruct) with a \"HUGE step up dataset wise\" compared to Lumimaid v0.1. Sloppy chats output were purged.\n\nUsage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-3.1-nemotron-ultra-253b-v1",
    "model_provider": "nvidia",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "nvidia/llama-3.1-nemotron-ultra-253b-v1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.6,
      "per_output_token": 1.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Llama-3.1-Nemotron-Ultra-253B-v1 is a large language model (LLM) optimized for advanced reasoning, human-interactive chat, retrieval-augmented generation (RAG), and tool-calling tasks. Derived from Meta’s Llama-3.1-405B-Instruct, it has been significantly customized using Neural Architecture Search (NAS), resulting in enhanced efficiency, reduced memory usage, and improved inference latency. The model supports a context length of up to 128K tokens and can operate efficiently on an 8x NVIDIA H100 node.\n\nNote: you must include `detailed thinking on` in the system prompt to enable reasoning. Please see [Usage Recommendations](https://huggingface.co/nvidia/Llama-3_1-Nemotron-Ultra-253B-v1#quick-start-and-usage-recommendations) for more.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 74.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 33.7,
        "artificial_analysis_intelligence_index": 38.5,
        "artificial_analysis_math_index": 63.7,
        "drop": null,
        "gpqa": 74.405,
        "hle": 8.1,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 64.1,
        "math_500": 95.2,
        "mmlu": null,
        "mmlu_pro": 82.5,
        "mmmu": null,
        "scicode": 34.699999999999996,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "maths": 18
      },
      "scores": {
        "academia": 56.4525,
        "finance": 51.1,
        "marketing": 41.84525,
        "maths": 63.7,
        "programming": 33.7,
        "science": 70.18583333333333,
        "writing": 43.97075000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-07",
    "license": "llama_3_1_community_license",
    "knowledge_cutoff_date": "2023-12-01",
    "langdb_release_date": "2025-04-07",
    "is_private": false
  },
  {
    "model": "llama-3.3-70b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-llama-33-70b-fp8",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "The Meta Llama 3.3 multilingual large language model (LLM) is a pretrained and instruction tuned generative model in 70B (text in/text out). The Llama 3.3 instruction tuned text only model is optimized for multilingual dialogue use cases and outperforms many of the available open source and closed chat models on common industry benchmarks.\n\nSupported languages: English, German, French, Italian, Portuguese, Hindi, Spanish, and Thai.\n\n[Model Card](https://github.com/meta-llama/llama-models/blob/main/models/llama3_3/MODEL_CARD.md)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 30.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.2,
        "artificial_analysis_intelligence_index": 27.9,
        "artificial_analysis_math_index": 7.7,
        "drop": null,
        "gpqa": 50.150000000000006,
        "hle": 4.0,
        "humaneval": 88.4,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 28.799999999999997,
        "math_500": 77.3,
        "mmlu": null,
        "mmlu_pro": 71.3,
        "mmmu": null,
        "scicode": 26.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 39.025000000000006,
        "finance": 17.8,
        "marketing": 41.7525,
        "maths": 7.7,
        "programming": 19.2,
        "science": 53.24722222222223,
        "writing": 41.2725
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-06",
    "license": "llama_3_3_community_license_agreement",
    "knowledge_cutoff_date": "2024-06-09",
    "langdb_release_date": "2024-12-06",
    "is_private": false
  },
  {
    "model": "llama-3.3-70b-instruct",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "groq",
      "model_name": "llama-3.3-70b-versatile",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.59,
      "per_output_token": 0.79,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "The Meta Llama 3.3 multilingual large language model (LLM) is a pretrained and instruction tuned generative model in 70B (text in/text out). The Llama 3.3 instruction tuned text only model is optimized for multilingual dialogue use cases and outperforms many of the available open source and closed chat models on common industry benchmarks.\n\nSupported languages: English, German, French, Italian, Portuguese, Hindi, Spanish, and Thai.\n\n[Model Card](https://github.com/meta-llama/llama-models/blob/main/models/llama3_3/MODEL_CARD.md)",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 30.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 19.2,
        "artificial_analysis_intelligence_index": 27.9,
        "artificial_analysis_math_index": 7.7,
        "drop": null,
        "gpqa": 50.150000000000006,
        "hle": 4.0,
        "humaneval": 88.4,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 28.799999999999997,
        "math_500": 77.3,
        "mmlu": null,
        "mmlu_pro": 71.3,
        "mmmu": null,
        "scicode": 26.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 39.025000000000006,
        "finance": 17.8,
        "marketing": 41.7525,
        "maths": 7.7,
        "programming": 19.2,
        "science": 53.24722222222223,
        "writing": 41.2725
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-12-06",
    "license": "Meta Llama Community",
    "knowledge_cutoff_date": "2024-06-09",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "llama-4-maverick",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-llama-4-maverick-instruct-fp8",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.85
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1048576
    },
    "description": "Llama 4 Maverick 17B Instruct (128E) is a high-capacity multimodal language model from Meta, built on a mixture-of-experts (MoE) architecture with 128 experts and 17 billion active parameters per forward pass (400B total). It supports multilingual text and image input, and produces multilingual text and code output across 12 supported languages. Optimized for vision-language tasks, Maverick is instruction-tuned for assistant-like behavior, image reasoning, and general-purpose multimodal interaction.\n\nMaverick features early fusion for native multimodality and a 1 million token context window. It was trained on a curated mixture of public, licensed, and Meta-platform data, covering ~22 trillion tokens, with a knowledge cutoff in August 2024. Released on April 5, 2025 under the Llama 4 Community License, Maverick is suited for research and commercial applications requiring advanced multimodal understanding and high model throughput.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 39.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 26.4,
        "artificial_analysis_intelligence_index": 35.8,
        "artificial_analysis_math_index": 19.3,
        "drop": null,
        "gpqa": 68.45,
        "hle": 4.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 39.7,
        "math_500": 88.9,
        "mmlu": null,
        "mmlu_pro": 80.9,
        "mmmu": 73.4,
        "scicode": 33.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 9
      },
      "scores": {
        "academia": 52.125,
        "finance": 27.549999999999997,
        "marketing": 53.9275,
        "maths": 19.3,
        "programming": 26.4,
        "science": 66.9375,
        "vision": 73.4,
        "writing": 53.2225
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-05",
    "license": "llama_4_community_license_agreement",
    "knowledge_cutoff_date": "2024-10-07",
    "langdb_release_date": "2025-04-05",
    "is_private": false
  },
  {
    "model": "llama-4-maverick",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "groq",
      "model_name": "meta-llama/llama-4-maverick-17b-128e-instruct",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.6,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Llama 4 Maverick 17B Instruct (128E) is a high-capacity multimodal language model from Meta, built on a mixture-of-experts (MoE) architecture with 128 experts and 17 billion active parameters per forward pass (400B total). It supports multilingual text and image input, and produces multilingual text and code output across 12 supported languages. Optimized for vision-language tasks, Maverick is instruction-tuned for assistant-like behavior, image reasoning, and general-purpose multimodal interaction.\n\nMaverick features early fusion for native multimodality and a 1 million token context window. It was trained on a curated mixture of public, licensed, and Meta-platform data, covering ~22 trillion tokens, with a knowledge cutoff in August 2024. Released on April 5, 2025 under the Llama 4 Community License, Maverick is suited for research and commercial applications requiring advanced multimodal understanding and high model throughput.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 39.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 26.4,
        "artificial_analysis_intelligence_index": 35.8,
        "artificial_analysis_math_index": 19.3,
        "drop": null,
        "gpqa": 68.45,
        "hle": 4.8,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 39.7,
        "math_500": 88.9,
        "mmlu": null,
        "mmlu_pro": 80.9,
        "mmmu": 73.4,
        "scicode": 33.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 9
      },
      "scores": {
        "academia": 52.125,
        "finance": 27.549999999999997,
        "marketing": 53.9275,
        "maths": 19.3,
        "programming": 26.4,
        "science": 66.9375,
        "vision": 73.4,
        "writing": 53.2225
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-05",
    "license": "Meta Llama Community",
    "knowledge_cutoff_date": "2024-10-07",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "llama-4-scout",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "groq",
      "model_name": "meta-llama/llama-4-scout",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.11,
      "per_output_token": 0.34,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Llama 4 Scout 17B Instruct (16E) is a mixture-of-experts (MoE) language model developed by Meta, activating 17 billion parameters out of a total of 109B. It supports native multimodal input (text and image) and multilingual output (text and code) across 12 supported languages. Designed for assistant-style interaction and visual reasoning, Scout uses 16 experts per forward pass and features a context length of 10 million tokens, with a training corpus of ~40 trillion tokens.\n\nBuilt for high efficiency and local or commercial deployment, Llama 4 Scout incorporates early fusion for seamless modality integration. It is instruction-tuned for use in multilingual chat, captioning, and image understanding tasks. Released under the Llama 4 Community License, it was last trained on data up to August 2024 and launched publicly on April 5, 2025.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 28.299999999999997,
        "aime_25": null,
        "artificial_analysis_coding_index": 16.1,
        "artificial_analysis_intelligence_index": 28.1,
        "artificial_analysis_math_index": 14,
        "drop": null,
        "gpqa": 57.94999999999999,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 29.9,
        "math_500": 84.39999999999999,
        "mmlu": null,
        "mmlu_pro": 75.2,
        "mmmu": 69.39999999999999,
        "scicode": 17.0,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 13
      },
      "scores": {
        "academia": 43.02499999999999,
        "finance": 21.05,
        "marketing": 44.0975,
        "maths": 14,
        "programming": 16.1,
        "science": 59.76749999999999,
        "vision": 69.39999999999999,
        "writing": 44.2475
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-05",
    "license": "Meta Llama Community",
    "knowledge_cutoff_date": "2024-10-07",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "llama-guard-2-8b",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "meta-llama/llama-guard-2-8b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "This safeguard model has 8B parameters and is based on the Llama 3 family. Just like is predecessor, [LlamaGuard 1](https://huggingface.co/meta-llama/LlamaGuard-7b), it can do both prompt and response classification.\n\nLlamaGuard 2 acts as a normal LLM would, generating text that indicates whether the given input/output is safe/unsafe. If deemed unsafe, it will also share the content categories violated.\n\nFor best results, please use raw prompt input or the `/completions` endpoint, instead of the chat API.\n\nIt has demonstrated strong performance compared to leading closed-source models in human evaluations.\n\nTo read more about the model release, [click here](https://ai.meta.com/blog/meta-llama-3/). Usage of this model is subject to [Meta's Acceptable Use Policy](https://llama.meta.com/llama3/use-policy/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "llama-guard-4-12b",
    "model_provider": "meta",
    "inference_provider": {
      "provider": "groq",
      "model_name": "meta-llama/llama-guard-4-12b",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.2,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "image",
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Llama Guard 4 is a Llama 4 Scout-derived multimodal pretrained model, fine-tuned for content safety classification. Similar to previous versions, it can be used to classify content in both LLM inputs (prompt classification) and in LLM responses (response classification). It acts as an LLM—generating text in its output that indicates whether a given prompt or response is safe or unsafe, and if unsafe, it also lists the content categories violated.\n\nLlama Guard 4 was aligned to safeguard against the standardized MLCommons hazards taxonomy and designed to support multimodal Llama 4 capabilities. Specifically, it combines features from previous Llama Guard models, providing content moderation for English and multiple supported languages, along with enhanced capabilities to handle mixed text-and-image prompts, including multiple images. Additionally, Llama Guard 4 is integrated into the Llama Moderations API, extending robust safety classification to text and images.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "llemma_7b",
    "model_provider": "eleutherai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "eleutherai/llemma_7b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.8,
      "per_output_token": 1.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 4096
    },
    "description": "Llemma 7B is a language model for mathematics. It was initialized with Code Llama 7B weights, and trained on the Proof-Pile-2 for 200B tokens. Llemma models are particularly strong at chain-of-thought mathematical reasoning and using computational tools for mathematics, such as Python and formal theorem provers.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "longcat-flash-chat",
    "model_provider": "meituan",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "meituan/longcat-flash-chat",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.75
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "LongCat-Flash-Chat is a large-scale Mixture-of-Experts (MoE) model with 560B total parameters, of which 18.6B–31.3B (≈27B on average) are dynamically activated per input. It introduces a shortcut-connected MoE design to reduce communication overhead and achieve high throughput while maintaining training stability through advanced scaling strategies such as hyperparameter transfer, deterministic computation, and multi-stage optimization.\n\nThis release, LongCat-Flash-Chat, is a non-thinking foundation model optimized for conversational and agentic tasks. It supports long context windows up to 128K tokens and shows competitive performance across reasoning, coding, instruction following, and domain benchmarks, with particular strengths in tool use and complex multi-step interactions.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "maestro-reasoning",
    "model_provider": "arcee-ai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "arcee-ai/maestro-reasoning",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.9,
      "per_output_token": 3.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Maestro Reasoning is Arcee's flagship analysis model: a 32 B‑parameter derivative of Qwen 2.5‑32 B tuned with DPO and chain‑of‑thought RL for step‑by‑step logic. Compared to the earlier 7 B preview, the production 32 B release widens the context window to 128 k tokens and doubles pass‑rate on MATH and GSM‑8K, while also lifting code completion accuracy. Its instruction style encourages structured \"thought → answer\" traces that can be parsed or hidden according to user preference. That transparency pairs well with audit‑focused industries like finance or healthcare where seeing the reasoning path matters. In Arcee Conductor, Maestro is automatically selected for complex, multi‑constraint queries that smaller SLMs bounce. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "magistral-medium-1",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "magistral-medium-2506",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 5.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 40000
    },
    "description": "Magistral is Mistral's first reasoning model. It is ideal for general purpose use requiring longer thought processing and better accuracy than with non-reasoning LLMs. From legal research and financial forecasting to software development and creative storytelling — this model solves multi-step challenges where transparency and precision are critical.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "magistral-small-1",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "magistral-small-2506",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 1.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 40000
    },
    "description": "Magistral Small is a 24B parameter instruction-tuned model based on Mistral-Small-3.1 (2503), enhanced through supervised fine-tuning on traces from Magistral Medium and further refined via reinforcement learning. It is optimized for reasoning and supports a wide multilingual range, including over 20 languages.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "license": "Apache-2.0",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "magnum-v2-72b",
    "model_provider": "anthracite-org",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "anthracite-org/magnum-v2-72b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 3.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "From the maker of [Goliath](https://openrouter.ai/models/alpindale/goliath-120b), Magnum 72B is the seventh in a family of models designed to achieve the prose quality of the Claude 3 models, notably Opus & Sonnet.\n\nThe model is based on [Qwen2 72B](https://openrouter.ai/models/qwen/qwen-2-72b-instruct) and trained with 55 million tokens of highly curated roleplay (RP) data.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "magnum-v4-72b",
    "model_provider": "anthracite-org",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "anthracite-org/magnum-v4-72b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.25,
      "per_output_token": 1.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 16384
    },
    "description": "This is a series of models designed to replicate the prose quality of the Claude 3 models, specifically Sonnet(https://openrouter.ai/anthropic/claude-3.5-sonnet) and Opus(https://openrouter.ai/anthropic/claude-3-opus).\n\nThe model is fine-tuned on top of [Qwen2.5 72B](https://openrouter.ai/qwen/qwen-2.5-72b-instruct).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_a": {
        "default": 0.0,
        "description": "Consider only tokens with sufficiently high probabilities relative to the top token. A lower value focuses the selection on tokens near the top probability, acting like a dynamic Top-P filter.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "mai-ds-r1",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "microsoft/mai-ds-r1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1999188,
      "per_output_token": 0.800064
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 163840
    },
    "description": "MAI-DS-R1 is a post-trained variant of DeepSeek-R1 developed by the Microsoft AI team to improve the model’s responsiveness on previously blocked topics while enhancing its safety profile. Built on top of DeepSeek-R1’s reasoning foundation, it integrates 110k examples from the Tulu-3 SFT dataset and 350k internally curated multilingual safety-alignment samples. The model retains strong reasoning, coding, and problem-solving capabilities, while unblocking a wide range of prompts previously restricted in R1.\n\nMAI-DS-R1 demonstrates improved performance on harm mitigation benchmarks and maintains competitive results across general reasoning tasks. It surpasses R1-1776 in satisfaction metrics for blocked queries and reduces leakage in harmful content categories. The model is based on a transformer MoE architecture and is suitable for general-purpose use cases, excluding high-stakes domains such as legal, medical, or autonomous systems.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "mercury",
    "model_provider": "inception",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "inception/mercury",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.25,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mercury is the first diffusion large language model (dLLM). Applying a breakthrough discrete diffusion approach, the model runs 5-10x faster than even speed optimized models like GPT-4.1 Nano and Claude 3.5 Haiku while matching their performance. Mercury's speed enables developers to provide responsive user experiences, including with voice agents, search interfaces, and chatbots. Read more in the blog post here. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "mercury-coder",
    "model_provider": "inception",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "inception/mercury-coder",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.25,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mercury Coder is the first diffusion large language model (dLLM). Applying a breakthrough discrete diffusion approach, the model runs 5-10x faster than even speed optimized models like Claude 3.5 Haiku and GPT-4o Mini while matching their performance. Mercury Coder's speed means that developers can stay in the flow while coding, enjoying rapid chat-based iteration and responsive code completion suggestions. On Copilot Arena, Mercury Coder ranks 1st in speed and ties for 2nd in quality. Read more in the [blog post here](https://www.inceptionlabs.ai/introducing-mercury).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "minimax-01",
    "model_provider": "minimax",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "minimax/minimax-01",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 1.1
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 1000192
    },
    "description": "MiniMax-01 is a combines MiniMax-Text-01 for text generation and MiniMax-VL-01 for image understanding. It has 456 billion parameters, with 45.9 billion parameters activated per inference, and can handle a context of up to 4 million tokens.\n\nThe text model adopts a hybrid architecture that combines Lightning Attention, Softmax Attention, and Mixture-of-Experts (MoE). The image model adopts the “ViT-MLP-LLM” framework and is trained on top of the text model.\n\nTo read more about the release, see: https://www.minimaxi.com/en/news/minimax-01-series-2",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "minimax-m1",
    "model_provider": "minimax",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "minimax/minimax-m1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.425,
      "per_output_token": 1.925
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "MiniMax-M1 is a large-scale, open-weight reasoning model designed for extended context and high-efficiency inference. It leverages a hybrid Mixture-of-Experts (MoE) architecture paired with a custom \"lightning attention\" mechanism, allowing it to process long sequences—up to 1 million tokens—while maintaining competitive FLOP efficiency. With 456 billion total parameters and 45.9B active per token, this variant is optimized for complex, multi-step reasoning tasks.\n\nTrained via a custom reinforcement learning pipeline (CISPO), M1 excels in long-context understanding, software engineering, agentic tool use, and mathematical reasoning. Benchmarks show strong performance across FullStackBench, SWE-bench, MATH, GPQA, and TAU-Bench, often outperforming other open models like DeepSeek R1 and Qwen3-235B.",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 84.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 37.1,
        "artificial_analysis_intelligence_index": 46.2,
        "artificial_analysis_math_index": 61,
        "drop": null,
        "gpqa": 69.69999999999999,
        "hle": 8.200000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 71.1,
        "math_500": 98.0,
        "mmlu": null,
        "mmlu_pro": 81.6,
        "mmmu": null,
        "scicode": 37.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 57.95,
        "finance": 53.6,
        "marketing": 57.335,
        "maths": 61,
        "programming": 37.1,
        "science": 67.49444444444444,
        "writing": 55.7
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-06-17",
    "knowledge_cutoff_date": "2024-12-19",
    "langdb_release_date": "2025-06-17",
    "is_private": false
  },
  {
    "model": "ministral-3b",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "ministral-3b-latest",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.04,
      "per_output_token": 0.04
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Ministral 3B is a 3B parameter model optimized for on-device and edge computing. It excels in knowledge, commonsense reasoning, and function-calling, outperforming larger models like Mistral 7B on most benchmarks. Supporting up to 128k context length, it’s ideal for orchestrating agentic workflows and specialist tasks with efficient inference.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0,
        "aime_25": null,
        "artificial_analysis_coding_index": 5.4,
        "artificial_analysis_intelligence_index": 10.9,
        "artificial_analysis_math_index": 0.3,
        "drop": null,
        "gpqa": 26.0,
        "hle": 5.5,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 6.9,
        "math_500": 53.7,
        "mmlu": null,
        "mmlu_pro": 33.900000000000006,
        "mmmu": null,
        "scicode": 9.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 18.45,
        "finance": 5.6000000000000005,
        "marketing": 19.025,
        "maths": 0.3,
        "programming": 5.4,
        "science": 26.794444444444448,
        "writing": 19.725
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-10-16",
    "knowledge_cutoff_date": "2024-04-19",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "ministral-8b",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "ministral-8b-latest",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Ministral 8B is an 8B parameter model featuring a unique interleaved sliding-window attention pattern for faster, memory-efficient inference. Designed for edge use cases, it supports up to 128k context length and excels in knowledge and reasoning tasks. It outperforms peers in the sub-10B category, making it perfect for low-latency, privacy-first applications.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-large",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-large-latest",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 6.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "This is Mistral AI's flagship model, Mistral Large 2 (version `mistral-large-2407`). It's a proprietary weights-available model and excels at reasoning, code, JSON, chat, and more. Read the launch announcement [here](https://mistral.ai/news/mistral-large-2407/).\n\nIt supports dozens of languages including French, German, Spanish, Italian, Portuguese, Arabic, Hindi, Russian, Chinese, Japanese, and Korean, along with 80+ coding languages including Python, Java, C, C++, JavaScript, and Bash. Its long context window allows precise information recall from large documents.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 11.9,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 35.099999999999994,
        "hle": 3.4000000000000004,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 17.8,
        "math_500": 52.7,
        "mmlu": null,
        "mmlu_pro": 51.5,
        "mmmu": null,
        "scicode": 20.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 23.499999999999996,
        "marketing": 39.55,
        "science": 37.95555555555556,
        "writing": 36.96
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-02-26",
    "knowledge_cutoff_date": "2023-08-30",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-large-2.1",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-large-2411",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 6.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mistral Large 2 2411 is an update of [Mistral Large 2](/mistralai/mistral-large) released together with [Pixtral Large 2411](/mistralai/pixtral-large-2411)\n\nIt provides a significant upgrade on the previous [Mistral Large 24.07](/mistralai/mistral-large-2407), with notable improvements in long context understanding, a new system prompt, and more accurate function calling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 11.9,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 35.099999999999994,
        "hle": 3.4000000000000004,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 17.8,
        "math_500": 52.7,
        "mmlu": null,
        "mmlu_pro": 51.5,
        "mmmu": null,
        "scicode": 20.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 23.499999999999996,
        "marketing": 39.55,
        "science": 37.95555555555556,
        "writing": 36.96
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-02-26",
    "knowledge_cutoff_date": "2023-08-30",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-large-2407",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-large-2407",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 6.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "This is Mistral AI's flagship model, Mistral Large 2 (version mistral-large-2407). It's a proprietary weights-available model and excels at reasoning, code, JSON, chat, and more. Read the launch announcement [here](https://mistral.ai/news/mistral-large-2407/).\n\nIt supports dozens of languages including French, German, Spanish, Italian, Portuguese, Arabic, Hindi, Russian, Chinese, Japanese, and Korean, along with 80+ coding languages including Python, Java, C, C++, JavaScript, and Bash. Its long context window allows precise information recall from large documents.\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 9.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 22.3,
        "artificial_analysis_math_index": 0,
        "drop": null,
        "gpqa": 47.2,
        "hle": 3.2,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 26.700000000000003,
        "math_500": 71.39999999999999,
        "mmlu": null,
        "mmlu_pro": 68.30000000000001,
        "mmmu": null,
        "scicode": 27.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 34.75,
        "finance": 11.15,
        "marketing": 31.655,
        "maths": 0,
        "science": 50.51666666666667,
        "writing": 32.8
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2024-07-24",
    "knowledge_cutoff_date": "2024-01-26",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-medium-3",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-medium-2505",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.4,
      "per_output_token": 2.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mistral Medium 3 is a high-performance enterprise-grade language model designed to deliver frontier-level capabilities at significantly reduced operational cost. It balances state-of-the-art reasoning and multimodal performance with 8× lower cost compared to traditional large models, making it suitable for scalable deployments across professional and industrial use cases.\n\nThe model excels in domains such as coding, STEM reasoning, and enterprise adaptation. It supports hybrid, on-prem, and in-VPC deployments and is optimized for integration into custom workflows. Mistral Medium 3 offers competitive accuracy relative to larger models like Claude Sonnet 3.5/3.7, Llama 4 Maverick, and Command R+, while maintaining broad compatibility across cloud environments.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 44.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 25.6,
        "artificial_analysis_intelligence_index": 33.6,
        "artificial_analysis_math_index": 30.3,
        "drop": null,
        "gpqa": 57.8,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 40.0,
        "math_500": 90.7,
        "mmlu": null,
        "mmlu_pro": 76.0,
        "mmmu": null,
        "scicode": 33.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 45.7,
        "finance": 31.950000000000003,
        "marketing": 45.440000000000005,
        "maths": 30.3,
        "programming": 25.6,
        "science": 58.93333333333334,
        "writing": 44.925
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-05-07",
    "knowledge_cutoff_date": "2024-11-08",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-medium-3.1",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-medium-latest",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.4,
      "per_output_token": 2.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mistral Medium 3.1 is an updated version of Mistral Medium 3, which is a high-performance enterprise-grade language model designed to deliver frontier-level capabilities at significantly reduced operational cost. It balances state-of-the-art reasoning and multimodal performance with 8× lower cost compared to traditional large models, making it suitable for scalable deployments across professional and industrial use cases.\n\nThe model excels in domains such as coding, STEM reasoning, and enterprise adaptation. It supports hybrid, on-prem, and in-VPC deployments and is optimized for integration into custom workflows. Mistral Medium 3.1 offers competitive accuracy relative to larger models like Claude Sonnet 3.5/3.7, Llama 4 Maverick, and Command R+, while maintaining broad compatibility across cloud environments.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 3.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 8.4,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 34.9,
        "hle": 3.4000000000000004,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 9.9,
        "math_500": 40.5,
        "mmlu": null,
        "mmlu_pro": 49.1,
        "mmmu": null,
        "scicode": 11.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 21.65,
        "marketing": 37.15,
        "science": 36.92222222222223,
        "writing": 35.699999999999996
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2023-12-11",
    "knowledge_cutoff_date": "2023-06-14",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-nemo",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-mistral-nemo",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.03,
      "per_output_token": 0.11
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "A 12B parameter model with a 128k token context length built by Mistral in collaboration with NVIDIA.\n\nThe model is multilingual, supporting English, French, German, Spanish, Italian, Portuguese, Chinese, Japanese, Korean, Arabic, and Hindi.\n\nIt supports function calling and is released under the Apache 2.0 license.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 5.2,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 31.4,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 5.7,
        "math_500": 39.5,
        "mmlu": null,
        "mmlu_pro": 39.900000000000006,
        "mmmu": null,
        "scicode": 10.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 18.3,
        "marketing": 30.162500000000005,
        "science": 31.705555555555556,
        "writing": 30.250000000000004
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-18",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-01-20",
    "langdb_release_date": "2024-07-18",
    "is_private": false
  },
  {
    "model": "mistral-nemo",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "open-mistral-nemo",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.15
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "A 12B parameter model with a 128k token context length built by Mistral in collaboration with NVIDIA.\n\nThe model is multilingual, supporting English, French, German, Spanish, Italian, Portuguese, Chinese, Japanese, Korean, Arabic, and Hindi.\n\nIt supports function calling and is released under the Apache 2.0 license.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 0.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 5.2,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 31.4,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 5.7,
        "math_500": 39.5,
        "mmlu": null,
        "mmlu_pro": 39.900000000000006,
        "mmmu": null,
        "scicode": 10.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 18.3,
        "marketing": 30.162500000000005,
        "science": 31.705555555555556,
        "writing": 30.250000000000004
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-07-18",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-01-20",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-saba",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-saba-latest",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Mistral Saba is a 24B-parameter language model specifically designed for the Middle East and South Asia, delivering accurate and contextually relevant responses while maintaining efficient performance. Trained on curated regional datasets, it supports multiple Indian-origin languages—including Tamil and Malayalam—alongside Arabic. This makes it a versatile option for a range of regional and multilingual applications. Read more at the blog post [here](https://mistral.ai/en/news/mistral-saba)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 13.0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 19.6,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 42.4,
        "hle": 4.1000000000000005,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": 67.7,
        "mmlu": null,
        "mmlu_pro": 61.1,
        "mmmu": null,
        "scicode": 24.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 31.0,
        "marketing": 48.3875,
        "science": 45.41666666666667,
        "writing": 44.09
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-02-17",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-08-21",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-small",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-small-latest",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "With 22 billion parameters, Mistral Small v24.09 offers a convenient mid-point between (Mistral NeMo 12B)[/mistralai/mistral-nemo] and (Mistral Large 2)[/mistralai/mistral-large], providing a cost-effective solution that can be deployed across various platforms and environments. It has better reasoning, exhibits more capabilities, can produce and reason about code, and is multiligual, supporting English, French, German, Italian, and Spanish.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 13,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 38.1,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 14.099999999999998,
        "math_500": 56.3,
        "mmlu": null,
        "mmlu_pro": 52.900000000000006,
        "mmmu": null,
        "scicode": 15.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.55,
        "marketing": 41.075,
        "science": 40.1,
        "writing": 38.74
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-17",
    "knowledge_cutoff_date": "2024-03-21",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-small-3",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-small-2501",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Mistral Small 3 is a 24B-parameter language model optimized for low-latency performance across common AI tasks. Released under the Apache 2.0 license, it features both pre-trained and instruction-tuned versions designed for efficient local deployment.\n\nThe model achieves 81% accuracy on the MMLU benchmark and performs competitively with larger models like Llama 3.3 70B and Qwen 32B, while operating at three times the speed on equivalent hardware. [Read the blog post about the model here.](https://mistral.ai/news/mistral-small-3/)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 13,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 38.1,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 14.099999999999998,
        "math_500": 56.3,
        "mmlu": null,
        "mmlu_pro": 52.900000000000006,
        "mmmu": null,
        "scicode": 15.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.55,
        "marketing": 41.075,
        "science": 40.1,
        "writing": 38.74
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-17",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-03-21",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-small-3.1",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-small-2503",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mistral Small 3.1 24B Instruct is an upgraded variant of Mistral Small 3 (2501), featuring 24 billion parameters with advanced multimodal capabilities. It provides state-of-the-art performance in text-based reasoning and vision tasks, including image analysis, programming, mathematical reasoning, and multilingual support across dozens of languages. Equipped with an extensive 128k token context window and optimized for efficient local inference, it supports use cases such as conversational agents, function calling, long-document comprehension, and privacy-sensitive deployments. The updated version is [Mistral Small 3.2](mistralai/mistral-small-3.2-24b-instruct)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 13,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 38.1,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 14.099999999999998,
        "math_500": 56.3,
        "mmlu": null,
        "mmlu_pro": 52.900000000000006,
        "mmmu": null,
        "scicode": 15.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.55,
        "marketing": 41.075,
        "science": 40.1,
        "writing": 38.74
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-17",
    "knowledge_cutoff_date": "2024-03-21",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-small-3.2",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistral-small-2506",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Mistral-Small-3.2-24B-Instruct-2506 is an updated 24B parameter model from Mistral optimized for instruction following, repetition reduction, and improved function calling. Compared to the 3.1 release, version 3.2 significantly improves accuracy on WildBench and Arena Hard, reduces infinite generations, and delivers gains in tool use and structured output tasks.\n\nIt supports image and text inputs with structured outputs, function/tool calling, and strong performance across coding (HumanEval+, MBPP), STEM (MMLU, MATH, GPQA), and vision benchmarks (ChartQA, DocVQA).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 13,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 38.1,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 14.099999999999998,
        "math_500": 56.3,
        "mmlu": null,
        "mmlu_pro": 52.900000000000006,
        "mmmu": null,
        "scicode": 15.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.55,
        "marketing": 41.075,
        "science": 40.1,
        "writing": 38.74
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-17",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-03-21",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mistral-small-3.2-24b-instruct",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-mistral-small-32-24b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.09,
      "per_output_token": 0.3
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Mistral-Small-3.2-24B-Instruct-2506 is an updated 24B parameter model from Mistral optimized for instruction following, repetition reduction, and improved function calling. Compared to the 3.1 release, version 3.2 significantly improves accuracy on WildBench and Arena Hard, reduces infinite generations, and delivers gains in tool use and structured output tasks.\n\nIt supports image and text inputs with structured outputs, function/tool calling, and strong performance across coding (HumanEval+, MBPP), STEM (MMLU, MATH, GPQA), and vision benchmarks (ChartQA, DocVQA).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 6.3,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 13,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 38.1,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 14.099999999999998,
        "math_500": 56.3,
        "mmlu": null,
        "mmlu_pro": 52.900000000000006,
        "mmmu": null,
        "scicode": 15.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 25.55,
        "marketing": 41.075,
        "science": 40.1,
        "writing": 38.74
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-17",
    "knowledge_cutoff_date": "2024-03-21",
    "langdb_release_date": "2024-09-17",
    "is_private": false
  },
  {
    "model": "mixtral-8x22b-instruct",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "open-mixtral-8x22b",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 6.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "Mistral's official instruct fine-tuned version of [Mixtral 8x22B](/models/mistralai/mixtral-8x22b). It uses 39B active parameters out of 141B, offering unparalleled cost efficiency for its size. Its strengths include:\n- strong math, coding, and reasoning\n- large context length (64k)\n- fluency in English, French, Italian, German, and Spanish\n\nSee benchmarks on the launch announcement [here](https://mistral.ai/news/mixtral-8x22b/).\n#moe",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "license": "Apache-2.0",
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "mn-inferor-12b",
    "model_provider": "infermatic",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "positron-internal-nemo-inferor12b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.6,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Inferor 12B is a merge of top roleplay models, expert on immersive narratives and storytelling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "molmo-7b-d",
    "model_provider": "allenai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "allenai/molmo-7b-d",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.2
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 4096
    },
    "description": "Molmo is a family of open vision-language models developed by the Allen Institute for AI. Molmo models are trained on PixMo, a dataset of 1 million, highly-curated image-text pairs. It has state-of-the-art performance among multimodal models with a similar size while being fully open-source. You can find all models in the Molmo family [here](https://huggingface.co/collections/allenai/molmo-66f379e6fe3b8ef090a8ca19). Learn more about the Molmo family [in the announcement blog post](https://molmo.allenai.org/blog) or the [paper](https://huggingface.co/papers/2409.17146).\n\nMolmo 7B-D is based on [Qwen2-7B](https://huggingface.co/Qwen/Qwen2-7B) and uses [OpenAI CLIP](https://huggingface.co/openai/clip-vit-large-patch14-336) as vision backbone. It performs comfortably between GPT-4V and GPT-4o on both academic benchmarks and human evaluation.\n\nThis checkpoint is a preview of the Molmo release. All artifacts used in creating Molmo (PixMo dataset, training code, evaluations, intermediate checkpoints) will be made available at a later date, furthering our commitment to open-source AI development and reproducibility.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "morph-v3-fast",
    "model_provider": "morph",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "morph/morph-v3-fast",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.9,
      "per_output_token": 1.9
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 81920
    },
    "description": "Morph's fastest apply model for code edits. 4500+ tokens/sec with 96% accuracy for rapid code transformations.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "morph-v3-large",
    "model_provider": "morph",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "morph/morph-v3-large",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.9,
      "per_output_token": 1.9
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 81920
    },
    "description": "Morph's high-accuracy apply model for complex code edits. 2000+ tokens/sec with 98% accuracy for precise code transformations.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "mythalion-13b",
    "model_provider": "pygmalionai",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "positron-internal-mythalion13b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.7,
      "per_output_token": 1.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 4096
    },
    "description": "A blend of the new Pygmalion-13b and MythoMax. #merge",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "mythomax-l2-13b",
    "model_provider": "gryphe",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-mythomax-13b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.08,
      "per_output_token": 0.11
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 4096
    },
    "description": "One of the highest performing and most popular fine-tunes of Llama 2 13B, with rich descriptions and roleplay. #merge",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "noromaid-20b",
    "model_provider": "neversleep",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "neversleep/noromaid-20b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.8125000000000001,
      "per_output_token": 1.375
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "A collab between IkariDev and Undi. This merge is suitable for RP, ERP, and general knowledge.\n\n#merge #uncensored",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_a": {
        "default": 0.0,
        "description": "Consider only tokens with sufficiently high probabilities relative to the top token. A lower value focuses the selection on tokens near the top probability, acting like a dynamic Top-P filter.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "nova-lite-v1",
    "model_provider": "amazon",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "amazon/nova-lite-v1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.06,
      "per_output_token": 0.24
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 300000
    },
    "description": "Amazon Nova Lite 1.0 is a very low-cost multimodal model from Amazon that focused on fast processing of image, video, and text inputs to generate text output. Amazon Nova Lite can handle real-time customer interactions, document analysis, and visual question-answering tasks with high accuracy.\n\nWith an input context of 300K tokens, it can analyze multiple images or up to 30 minutes of video in a single input.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 10.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 10.4,
        "artificial_analysis_intelligence_index": 21.4,
        "artificial_analysis_math_index": 7,
        "drop": 80.2,
        "gpqa": 42.65,
        "hle": 4.6,
        "humaneval": 85.39999999999999,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 16.7,
        "math_500": 76.5,
        "mmlu": null,
        "mmlu_pro": 59.0,
        "mmmu": 56.2,
        "scicode": 13.900000000000002,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 19
      },
      "scores": {
        "academia": 32.025,
        "finance": 14.2,
        "marketing": 34.5625,
        "maths": 7,
        "programming": 10.4,
        "science": 45.9225,
        "vision": 56.2,
        "writing": 34.5575
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-11-20",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-05-24",
    "langdb_release_date": "2024-11-20",
    "is_private": false
  },
  {
    "model": "nova-micro-v1",
    "model_provider": "amazon",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "amazon/nova-micro-v1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.035,
      "per_output_token": 0.14
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Amazon Nova Micro 1.0 is a text-only model that delivers the lowest latency responses in the Amazon Nova family of models at a very low cost. With a context length of 128K tokens and optimized for speed and cost, Amazon Nova Micro excels at tasks such as text summarization, translation, content classification, interactive chat, and brainstorming. It has  simple mathematical reasoning and coding abilities.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 8.0,
        "aime_25": null,
        "artificial_analysis_coding_index": 8.3,
        "artificial_analysis_intelligence_index": 17.7,
        "artificial_analysis_math_index": 6,
        "drop": 79.3,
        "gpqa": 37.9,
        "hle": 4.7,
        "humaneval": 81.10000000000001,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 14.000000000000002,
        "math_500": 70.3,
        "mmlu": null,
        "mmlu_pro": 53.1,
        "mmmu": null,
        "scicode": 9.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 27.799999999999997,
        "finance": 11.85,
        "marketing": 28.67,
        "maths": 6,
        "programming": 8.3,
        "science": 40.12222222222223,
        "writing": 29.205
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-11-20",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-05-24",
    "langdb_release_date": "2024-11-20",
    "is_private": false
  },
  {
    "model": "nova-pro-v1",
    "model_provider": "amazon",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "amazon/nova-pro-v1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.8,
      "per_output_token": 3.2
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 300000
    },
    "description": "Amazon Nova Pro 1.0 is a capable multimodal model from Amazon focused on providing a combination of accuracy, speed, and cost for a wide range of tasks. As of December 2024, it achieves state-of-the-art performance on key benchmarks including visual question answering (TextVQA) and video understanding (VATEX).\n\nAmazon Nova Pro demonstrates strong capabilities in processing both visual and textual information and at analyzing financial documents.\n\n**NOTE**: Video input is not supported at this time.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 10.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 16.6,
        "artificial_analysis_intelligence_index": 25,
        "artificial_analysis_math_index": 7,
        "drop": 85.39999999999999,
        "gpqa": 48.4,
        "hle": 3.4000000000000004,
        "humaneval": 89.0,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 23.3,
        "math_500": 78.60000000000001,
        "mmlu": null,
        "mmlu_pro": 69.1,
        "mmmu": 61.7,
        "scicode": 20.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "vision": 17
      },
      "scores": {
        "academia": 36.7,
        "finance": 16.0,
        "marketing": 39.325,
        "maths": 7,
        "programming": 16.6,
        "science": 52.475,
        "vision": 61.7,
        "writing": 39.15
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-11-20",
    "license": "Proprietary",
    "knowledge_cutoff_date": "2024-05-24",
    "langdb_release_date": "2024-11-20",
    "is_private": false
  },
  {
    "model": "olmo-2-0325-32b-instruct",
    "model_provider": "allenai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "allenai/olmo-2-0325-32b-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 1.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 4096
    },
    "description": "OLMo-2 32B Instruct is a supervised instruction-finetuned variant of the OLMo-2 32B March 2025 base model. It excels in complex reasoning and instruction-following tasks across diverse benchmarks such as GSM8K, MATH, IFEval, and general NLP evaluation. Developed by AI2, OLMo-2 32B is part of an open, research-oriented initiative, trained primarily on English-language datasets to advance the understanding and development of open-source language models.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "phi-3.5-mini-128k-instruct",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "microsoft/phi-3.5-mini-128k-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Phi-3.5 models are lightweight, state-of-the-art open models. These models were trained with Phi-3 datasets that include both synthetic data and the filtered, publicly available websites data, with a focus on high quality and reasoning-dense properties. Phi-3.5 Mini uses 3.8B parameters, and is a dense decoder-only transformer model using the same tokenizer as [Phi-3 Mini](/models/microsoft/phi-3-mini-128k-instruct).\n\nThe models underwent a rigorous enhancement process, incorporating both supervised fine-tuning, proximal policy optimization, and direct preference optimization to ensure precise instruction adherence and robust safety measures. When assessed against benchmarks that test common sense, language understanding, math, code, long context and logical reasoning, Phi-3.5 models showcased robust and state-of-the-art performance among models with less than 13 billion parameters.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "phi-3-medium-128k-instruct",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "microsoft/phi-3-medium-128k-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Phi-3 128K Medium is a powerful 14-billion parameter model designed for advanced language understanding, reasoning, and instruction following. Optimized through supervised fine-tuning and preference adjustments, it excels in tasks involving common sense, mathematics, logical reasoning, and code processing.\n\nAt time of release, Phi-3 Medium demonstrated state-of-the-art performance among lightweight models. In the MMLU-Pro eval, the model even comes close to a Llama3 70B level of performance.\n\nFor 4k context length, try [Phi-3 Medium 4K](/models/microsoft/phi-3-medium-4k-instruct).",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "phi-3-mini-128k-instruct",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "microsoft/phi-3-mini-128k-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Phi-3 Mini is a powerful 3.8B parameter model designed for advanced language understanding, reasoning, and instruction following. Optimized through supervised fine-tuning and preference adjustments, it excels in tasks involving common sense, mathematics, logical reasoning, and code processing.\n\nAt time of release, Phi-3 Medium demonstrated state-of-the-art performance among lightweight models. This model is static, trained on an offline dataset with an October 2023 cutoff date.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "pixtral-12b",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "mistralai/pixtral-12b",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.15
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "The first multi-modal, text+image-to-text model from Mistral AI. Its weights were launched via torrent: https://x.com/mistralai/status/1833758285167722836.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "pixtral-large-2411",
    "model_provider": "mistralai",
    "inference_provider": {
      "provider": "mistralai",
      "model_name": "pixtral-large-2411",
      "endpoint": "https://api.mistral.ai/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 6.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Pixtral Large is a 124B parameter, open-weight, multimodal model built on top of [Mistral Large 2](/mistralai/mistral-large-2411). The model is able to understand documents, charts and natural images.\n\nThe model is available under the Mistral Research License (MRL) for research and educational use, and the Mistral Commercial License for experimentation, testing, and production for commercial purposes.\n\n",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "langdb_release_date": "2025-09-17",
    "is_private": false
  },
  {
    "model": "qwen-2.5-coder-32b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-2.5-coder-32b-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.06333333333333332,
      "per_output_token": 0.1633333333333333
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen2.5-Coder is the latest series of Code-Specific Qwen large language models (formerly known as CodeQwen). Qwen2.5-Coder brings the following improvements upon CodeQwen1.5:\n\n- Significantly improvements in **code generation**, **code reasoning** and **code fixing**. \n- A more comprehensive foundation for real-world applications such as **Code Agents**. Not only enhancing coding capabilities but also maintaining its strengths in mathematics and general competencies.\n\nTo read more about its evaluation results, check out [Qwen 2.5 Coder's blog](https://qwenlm.github.io/blog/qwen2.5-coder-family/).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 12.0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 21.8,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 41.7,
        "hle": 3.8,
        "humaneval": 92.7,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 29.5,
        "math_500": 76.7,
        "mmlu": null,
        "mmlu_pro": 63.5,
        "mmmu": null,
        "scicode": 27.1,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 31.75,
        "marketing": 50.35,
        "science": 45.96666666666667,
        "writing": 45.02
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-09-19",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-03-23",
    "langdb_release_date": "2024-09-19",
    "is_private": false
  },
  {
    "model": "qwen2.5-coder-7b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen2.5-coder-7b-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.03,
      "per_output_token": 0.09
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen2.5-Coder-7B-Instruct is a 7B parameter instruction-tuned language model optimized for code-related tasks such as code generation, reasoning, and bug fixing. Based on the Qwen2.5 architecture, it incorporates enhancements like RoPE, SwiGLU, RMSNorm, and GQA attention with support for up to 128K tokens using YaRN-based extrapolation. It is trained on a large corpus of source code, synthetic data, and text-code grounding, providing robust performance across programming languages and agentic coding workflows.\n\nThis model is part of the Qwen2.5-Coder family and offers strong compatibility with tools like vLLM for efficient deployment. Released under the Apache 2.0 license.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen2.5-vl-72b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-qwen25-vl-72b-instruct",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.8,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Qwen2.5-VL is proficient in recognizing common objects such as flowers, birds, fish, and insects. It is also highly capable of analyzing texts, charts, icons, graphics, and layouts within images.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen-2.5-vl-7b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-2.5-vl-7b-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.2
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen2.5 VL 7B is a multimodal LLM from the Qwen Team with the following key enhancements:\n\n- SoTA understanding of images of various resolution & ratio: Qwen2.5-VL achieves state-of-the-art performance on visual understanding benchmarks, including MathVista, DocVQA, RealWorldQA, MTVQA, etc.\n\n- Understanding videos of 20min+: Qwen2.5-VL can understand videos over 20 minutes for high-quality video-based question answering, dialog, content creation, etc.\n\n- Agent that can operate your mobiles, robots, etc.: with the abilities of complex reasoning and decision making, Qwen2.5-VL can be integrated with devices like mobile phones, robots, etc., for automatic operation based on visual environment and text instructions.\n\n- Multilingual Support: to serve global users, besides English and Chinese, Qwen2.5-VL now supports the understanding of texts in different languages inside images, including most European languages, Japanese, Korean, Arabic, Vietnamese, etc.\n\nFor more details, see this [blog post](https://qwenlm.github.io/blog/qwen2-vl/) and [GitHub repo](https://github.com/QwenLM/Qwen2-VL).\n\nUsage of this model is subject to [Tongyi Qianwen LICENSE AGREEMENT](https://huggingface.co/Qwen/Qwen1.5-110B-Chat/blob/main/LICENSE).",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen3-14b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-qwen-3-14b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.06,
      "per_output_token": 0.25
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 40960
    },
    "description": "Qwen3-14B is a dense 14.8B parameter causal language model from the Qwen3 series, designed for both complex reasoning and efficient dialogue. It supports seamless switching between a \"thinking\" mode for tasks like math, programming, and logical inference, and a \"non-thinking\" mode for general-purpose conversation. The model is fine-tuned for instruction-following, agent tool use, creative writing, and multilingual tasks across 100+ languages and dialects. It natively handles 32K token contexts and can extend to 131K tokens using YaRN-based scaling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 76.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 29.1,
        "artificial_analysis_intelligence_index": 36,
        "artificial_analysis_math_index": 55.7,
        "drop": null,
        "gpqa": 60.4,
        "hle": 4.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 52.3,
        "math_500": 96.1,
        "mmlu": null,
        "mmlu_pro": 77.4,
        "mmmu": null,
        "scicode": 31.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 48.2,
        "finance": 45.85,
        "marketing": 38.120000000000005,
        "maths": 55.7,
        "programming": 29.1,
        "science": 60.777777777777786,
        "writing": 38.965
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-28",
    "knowledge_cutoff_date": "2024-10-30",
    "langdb_release_date": "2025-04-28",
    "is_private": false
  },
  {
    "model": "qwen3-235b-a22b-2507",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-qwen3-235b-a22b-instruct-2507",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.15,
      "per_output_token": 0.85
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-235B-A22B-Instruct-2507 is a multilingual, instruction-tuned mixture-of-experts language model based on the Qwen3-235B architecture, with 22B active parameters per forward pass. It is optimized for general-purpose text generation, including instruction following, logical reasoning, math, code, and tool usage. The model supports a native 262K context length and does not implement \"thinking mode\" (<think> blocks).\n\nCompared to its base variant, this version delivers significant gains in knowledge coverage, long-context reasoning, coding benchmarks, and alignment with open-ended tasks. It is particularly strong on multilingual understanding, math reasoning (e.g., AIME, HMMT), and alignment evaluations like Arena-Hard and WritingBench.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 32.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 23.3,
        "artificial_analysis_intelligence_index": 29.9,
        "artificial_analysis_math_index": 23.7,
        "drop": null,
        "gpqa": 61.3,
        "hle": 4.7,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 34.300000000000004,
        "math_500": 90.2,
        "mmlu": null,
        "mmlu_pro": 76.2,
        "mmmu": null,
        "scicode": 29.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 45.599999999999994,
        "finance": 26.799999999999997,
        "marketing": 36.085,
        "maths": 23.7,
        "programming": 23.3,
        "science": 60.80555555555557,
        "writing": 37.864999999999995
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-235b-a22b-thinking-2507",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-qwen3-235b-a22b-thinking-2507",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.65,
      "per_output_token": 3.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-235B-A22B-Thinking-2507 is a high-performance, open-weight Mixture-of-Experts (MoE) language model optimized for complex reasoning tasks. It activates 22B of its 235B parameters per forward pass and natively supports up to 262,144 tokens of context. This \"thinking-only\" variant enhances structured logical reasoning, mathematics, science, and long-form generation, showing strong benchmark performance across AIME, SuperGPQA, LiveCodeBench, and MMLU-Redux. It enforces a special reasoning mode (</think>) and is designed for high-token outputs (up to 81,920 tokens) in challenging domains.\n\nThe model is instruction-tuned and excels at step-by-step reasoning, tool use, agentic workflows, and multilingual tasks. This release represents the most capable open-source variant in the Qwen3-235B series, surpassing many closed models in structured reasoning use cases.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 81.10000000000001,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 3,
        "writing": 3
      },
      "scores": {
        "science": 81.10000000000001,
        "writing": 81.10000000000001
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-30b-a3b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-qwen3-30b-a3b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.09,
      "per_output_token": 0.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 40960
    },
    "description": "Qwen3, the latest generation in the Qwen large language model series, features both dense and mixture-of-experts (MoE) architectures to excel in reasoning, multilingual support, and advanced agent tasks. Its unique ability to switch seamlessly between a thinking mode for complex reasoning and a non-thinking mode for efficient dialogue ensures versatile, high-quality performance.\n\nSignificantly outperforming prior models like QwQ and Qwen2.5, Qwen3 delivers superior mathematics, coding, commonsense reasoning, creative writing, and interactive dialogue capabilities. The Qwen3-30B-A3B variant includes 30.5 billion parameters (3.3 billion activated), 48 layers, 128 experts (8 activated per task), and supports up to 131K token contexts with YaRN, setting a new standard among open-source models.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 72.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 29.2,
        "artificial_analysis_intelligence_index": 37,
        "artificial_analysis_math_index": 66.3,
        "drop": null,
        "gpqa": 65.85000000000001,
        "hle": 6.800000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 51.5,
        "math_500": 97.5,
        "mmlu": null,
        "mmlu_pro": 77.7,
        "mmmu": null,
        "scicode": 30.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "maths": 17
      },
      "scores": {
        "academia": 51.425,
        "finance": 51.65,
        "marketing": 43.1575,
        "maths": 66.3,
        "programming": 29.2,
        "science": 63.89722222222223,
        "writing": 43.9325
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-30b-a3b-instruct-2507",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-30b-a3b-instruct-2507",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.2,
      "per_output_token": 0.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Qwen3-30B-A3B-Instruct-2507 is a 30.5B-parameter mixture-of-experts language model from Qwen, with 3.3B active parameters per inference. It operates in non-thinking mode and is designed for high-quality instruction following, multilingual understanding, and agentic tool use. Post-trained on instruction data, it demonstrates competitive performance across reasoning (AIME, ZebraLogic), coding (MultiPL-E, LiveCodeBench), and alignment (IFEval, WritingBench) benchmarks. It outperforms its non-instruct variant on subjective and open-ended tasks while retaining strong factual and coding performance.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 72.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 29.2,
        "artificial_analysis_intelligence_index": 37,
        "artificial_analysis_math_index": 66.3,
        "drop": null,
        "gpqa": 65.85000000000001,
        "hle": 6.800000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 51.5,
        "math_500": 97.5,
        "mmlu": null,
        "mmlu_pro": 77.7,
        "mmmu": null,
        "scicode": 30.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "maths": 17
      },
      "scores": {
        "academia": 51.425,
        "finance": 51.65,
        "marketing": 43.1575,
        "maths": 66.3,
        "programming": 29.2,
        "science": 63.89722222222223,
        "writing": 43.9325
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-30b-a3b-thinking-2507",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-30b-a3b-thinking-2507",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.12376666666666666,
      "per_output_token": 0.9950666666666668
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-30B-A3B-Thinking-2507 is a 30B parameter Mixture-of-Experts reasoning model optimized for complex tasks requiring extended multi-step thinking. The model is designed specifically for “thinking mode,” where internal reasoning traces are separated from final answers.\n\nCompared to earlier Qwen3-30B releases, this version improves performance across logical reasoning, mathematics, science, coding, and multilingual benchmarks. It also demonstrates stronger instruction following, tool use, and alignment with human preferences. With higher reasoning efficiency and extended output budgets, it is best suited for advanced research, competitive problem solving, and agentic applications requiring structured long-context reasoning.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 72.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 29.2,
        "artificial_analysis_intelligence_index": 37,
        "artificial_analysis_math_index": 66.3,
        "drop": null,
        "gpqa": 65.85000000000001,
        "hle": 6.800000000000001,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 51.5,
        "math_500": 97.5,
        "mmlu": null,
        "mmlu_pro": 77.7,
        "mmmu": null,
        "scicode": 30.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "maths": 17
      },
      "scores": {
        "academia": 51.425,
        "finance": 51.65,
        "marketing": 43.1575,
        "maths": 66.3,
        "programming": 29.2,
        "science": 63.89722222222223,
        "writing": 43.9325
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-32b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-qwen3-32b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 40960
    },
    "description": "Qwen3-32B is a dense 32.8B parameter causal language model from the Qwen3 series, optimized for both complex reasoning and efficient dialogue. It supports seamless switching between a \"thinking\" mode for tasks like math, coding, and logical inference, and a \"non-thinking\" mode for faster, general-purpose conversation. The model demonstrates strong performance in instruction-following, agent tool use, creative writing, and multilingual tasks across 100+ languages and dialects. It natively handles 32K token contexts and can extend to 131K tokens using YaRN-based scaling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 80.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 30.9,
        "artificial_analysis_intelligence_index": 38.7,
        "artificial_analysis_math_index": 73,
        "drop": null,
        "gpqa": 66.8,
        "hle": 8.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 54.6,
        "math_500": 96.1,
        "mmlu": null,
        "mmlu_pro": 79.80000000000001,
        "mmmu": null,
        "scicode": 35.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 18,
        "maths": 16
      },
      "scores": {
        "academia": 52.75,
        "finance": 55.85,
        "marketing": 38.05,
        "maths": 73,
        "programming": 30.9,
        "science": 65.35555555555555,
        "writing": 39.875
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-04-29",
    "is_private": false
  },
  {
    "model": "qwen3-32b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "groq",
      "model_name": "qwen/qwen3-32b",
      "endpoint": "https://api.groq.com/openai/v1"
    },
    "price": {
      "per_input_token": 0.29,
      "per_output_token": 0.59,
      "per_cached_input_token": 0.0,
      "per_cached_input_write_token": 0.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Qwen3-32B is a dense 32.8B parameter causal language model from the Qwen3 series, optimized for both complex reasoning and efficient dialogue. It supports seamless switching between a \"thinking\" mode for tasks like math, coding, and logical inference, and a \"non-thinking\" mode for faster, general-purpose conversation. The model demonstrates strong performance in instruction-following, agent tool use, creative writing, and multilingual tasks across 100+ languages and dialects. It natively handles 32K token contexts and can extend to 131K tokens using YaRN-based scaling. ",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 80.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 30.9,
        "artificial_analysis_intelligence_index": 38.7,
        "artificial_analysis_math_index": 73,
        "drop": null,
        "gpqa": 66.8,
        "hle": 8.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 54.6,
        "math_500": 96.1,
        "mmlu": null,
        "mmlu_pro": 79.80000000000001,
        "mmmu": null,
        "scicode": 35.4,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 18,
        "maths": 16
      },
      "scores": {
        "academia": 52.75,
        "finance": 55.85,
        "marketing": 38.05,
        "maths": 73,
        "programming": 30.9,
        "science": 65.35555555555555,
        "writing": 39.875
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-29",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2024-10-31",
    "langdb_release_date": "2025-09-25",
    "is_private": false
  },
  {
    "model": "qwen3-8b",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-8b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.035,
      "per_output_token": 0.138
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Qwen3-8B is a dense 8.2B parameter causal language model from the Qwen3 series, designed for both reasoning-heavy tasks and efficient dialogue. It supports seamless switching between \"thinking\" mode for math, coding, and logical inference, and \"non-thinking\" mode for general conversation. The model is fine-tuned for instruction-following, agent integration, creative writing, and multilingual use across 100+ languages and dialects. It natively supports a 32K token context window and can extend to 131K tokens with YaRN scaling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 24.3,
        "aime_25": null,
        "artificial_analysis_coding_index": 13,
        "artificial_analysis_intelligence_index": 22.9,
        "artificial_analysis_math_index": 24.3,
        "drop": null,
        "gpqa": 45.2,
        "hle": 2.8000000000000003,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 20.200000000000003,
        "math_500": 82.8,
        "mmlu": null,
        "mmlu_pro": 64.3,
        "mmmu": null,
        "scicode": 16.8,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 34.05,
        "finance": 23.6,
        "marketing": 29.205,
        "maths": 24.3,
        "programming": 13,
        "science": 47.91666666666667,
        "writing": 30.285
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-04-28",
    "knowledge_cutoff_date": "2024-10-30",
    "langdb_release_date": "2025-04-28",
    "is_private": false
  },
  {
    "model": "qwen3-coder",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-qwen3-coder-480b-a35b-instruct",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.39,
      "per_output_token": 1.6
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-Coder-480B-A35B-Instruct is a Mixture-of-Experts (MoE) code generation model developed by the Qwen team. It is optimized for agentic coding tasks such as function calling, tool use, and long-context reasoning over repositories. The model features 480 billion total parameters, with 35 billion active per forward pass (8 out of 160 experts).\n\nPricing for the Alibaba endpoints varies by context length. Once a request is greater than 128k input tokens, the higher pricing is used.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 47.7,
        "aime_25": null,
        "artificial_analysis_coding_index": 37.4,
        "artificial_analysis_intelligence_index": 42.3,
        "artificial_analysis_math_index": 39.3,
        "drop": null,
        "gpqa": 61.8,
        "hle": 4.3999999999999995,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 58.5,
        "math_500": 94.2,
        "mmlu": null,
        "mmlu_pro": 78.8,
        "mmmu": null,
        "scicode": 35.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 52.05,
        "finance": 40.8,
        "marketing": 51.86,
        "maths": 39.3,
        "programming": 37.4,
        "science": 62.03333333333334,
        "writing": 50.11
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-07-22",
    "knowledge_cutoff_date": "2025-01-23",
    "langdb_release_date": "2025-07-22",
    "is_private": false
  },
  {
    "model": "qwen3-coder-30b-a3b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-coder-30b-a3b-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.4009154,
      "per_output_token": 1.978712
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-Coder-30B-A3B-Instruct is a 30.5B parameter Mixture-of-Experts (MoE) model with 128 experts (8 active per forward pass), designed for advanced code generation, repository-scale understanding, and agentic tool use. Built on the Qwen3 architecture, it supports a native context length of 256K tokens (extendable to 1M with Yarn) and performs strongly in tasks involving function calls, browser use, and structured code completion.\n\nThis model is optimized for instruction-following without “thinking mode”, and integrates well with OpenAI-compatible tool-use formats. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen3-coder-flash",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-coder-flash",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.3,
      "per_output_token": 1.5,
      "per_cached_input_token": 0.08
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Qwen3 Coder Flash is Alibaba's fast and cost efficient version of their proprietary Qwen3 Coder Plus. It is a powerful coding agent model specializing in autonomous programming via tool calling and environment interaction, combining coding proficiency with versatile general-purpose abilities.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen3-coder-plus",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-coder-plus",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 5.0,
      "per_cached_input_token": 0.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Qwen3 Coder Plus is Alibaba's proprietary version of the Open Source Qwen3 Coder 480B A35B. It is a powerful coding agent model specializing in autonomous programming via tool calling and environment interaction, combining coding proficiency with versatile general-purpose abilities.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "qwen3-max",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-max",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.2,
      "per_output_token": 6.0,
      "per_cached_input_token": 0.24
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 256000
    },
    "description": "Qwen3-Max is an updated release built on the Qwen3 series, offering major improvements in reasoning, instruction following, multilingual support, and long-tail knowledge coverage compared to the January 2025 version. It delivers higher accuracy in math, coding, logic, and science tasks, follows complex instructions in Chinese and English more reliably, reduces hallucinations, and produces higher-quality responses for open-ended Q&A, writing, and conversation. The model supports over 100 languages with stronger translation and commonsense reasoning, and is optimized for retrieval-augmented generation (RAG) and tool calling, though it does not include a dedicated “thinking” mode.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 44.7,
        "artificial_analysis_intelligence_index": 55.1,
        "artificial_analysis_math_index": 80.7,
        "drop": null,
        "gpqa": 76.4,
        "hle": 11.1,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 76.7,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 84.1,
        "mmmu": null,
        "scicode": 38.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "academia": 13,
        "finance": 12,
        "maths": 11,
        "programming": 11
      },
      "scores": {
        "academia": 65.75,
        "finance": 67.9,
        "marketing": 57.595,
        "maths": 80.7,
        "programming": 44.7,
        "science": 72.1388888888889,
        "writing": 56.295
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-09-05",
    "knowledge_cutoff_date": "2025-03-09",
    "langdb_release_date": "2025-09-05",
    "is_private": false
  },
  {
    "model": "qwen3-next-80b-a3b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-next-80b-a3b-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.1266666666666667,
      "per_output_token": 1.1
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-Next-80B-A3B-Instruct is an instruction-tuned chat model in the Qwen3-Next series optimized for fast, stable responses without “thinking” traces. It targets complex tasks across reasoning, code generation, knowledge QA, and multilingual use, while remaining robust on alignment and formatting. Compared with prior Qwen3 instruct variants, it focuses on higher throughput and stability on ultra-long inputs and multi-turn dialogues, making it well-suited for RAG, tool use, and agentic workflows that require consistent final answers rather than visible chain-of-thought.\n\nThe model employs scaling-efficient training and decoding to improve parameter efficiency and inference speed, and has been validated on a broad set of public benchmarks where it reaches or approaches larger Qwen3 systems in several categories while outperforming earlier mid-sized baselines. It is best used as a general assistant, code helper, and long-context task solver in production settings where deterministic, instruction-following outputs are preferred.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": 35.4,
        "artificial_analysis_intelligence_index": 44.8,
        "artificial_analysis_math_index": 66.3,
        "drop": null,
        "gpqa": 73.35000000000001,
        "hle": 7.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 68.4,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": 81.89999999999999,
        "mmmu": null,
        "scicode": 30.7,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "finance": 19,
        "maths": 17
      },
      "scores": {
        "academia": 59.075,
        "finance": 55.55,
        "marketing": 55.9225,
        "maths": 66.3,
        "programming": 35.4,
        "science": 69.33611111111112,
        "writing": 54.9575
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-10",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-03-14",
    "is_private": false
  },
  {
    "model": "qwen3-next-80b-a3b-thinking",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-next-80b-a3b-thinking",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.14666666666666667,
      "per_output_token": 1.3
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 262144
    },
    "description": "Qwen3-Next-80B-A3B-Thinking is a reasoning-first chat model in the Qwen3-Next line that outputs structured “thinking” traces by default. It’s designed for hard multi-step problems; math proofs, code synthesis/debugging, logic, and agentic planning, and reports strong results across knowledge, reasoning, coding, alignment, and multilingual evaluations. Compared with prior Qwen3 variants, it emphasizes stability under long chains of thought and efficient scaling during inference, and it is tuned to follow complex instructions while reducing repetitive or off-task behavior.\n\nThe model is suitable for agent frameworks and tool use (function calling), retrieval-heavy workflows, and standardized benchmarking where step-by-step solutions are required. It supports long, detailed completions and leverages throughput-oriented techniques (e.g., multi-token prediction) for faster generation. Note that it operates in thinking-only mode.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": null,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 77.2,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": null,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "science": 10,
        "writing": 5
      },
      "scores": {
        "science": 77.2,
        "writing": 77.2
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-09-10",
    "license": "Apache-2.0",
    "knowledge_cutoff_date": "2025-03-14",
    "is_private": false
  },
  {
    "model": "qwen3-vl-235b-a22b-instruct",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-vl-235b-a22b-instruct",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.3666666666666667,
      "per_output_token": 1.7333333333333334
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Qwen3-VL-235B-A22B Instruct is an open-weight multimodal model that unifies strong text generation with visual understanding across images and video. The Instruct model targets general vision-language use (VQA, document parsing, chart/table extraction, multilingual OCR). The series emphasizes robust perception (recognition of diverse real-world and synthetic categories), spatial understanding (2D/3D grounding), and long-form visual comprehension, with competitive results on public multimodal benchmarks for both perception and reasoning.\n\nBeyond analysis, Qwen3-VL supports agentic interaction and tool use: it can follow complex instructions over multi-image, multi-turn dialogues; align text to video timelines for precise temporal queries; and operate GUI elements for automation tasks. The models also enable visual coding workflows—turning sketches or mockups into code and assisting with UI debugging—while maintaining strong text-only performance comparable to the flagship Qwen3 language models. This makes Qwen3-VL suitable for production scenarios spanning document AI, multilingual OCR, software/UI assistance, spatial/embodied tasks, and research on vision-language agents.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen3-vl-235b-a22b-thinking",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen3-vl-235b-a22b-thinking",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.7266666666666667,
      "per_output_token": 5.283333333333333
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "Qwen3-VL-235B-A22B Thinking is a multimodal model that unifies strong text generation with visual understanding across images and video. The Thinking model is optimized for multimodal reasoning in STEM and math. The series emphasizes robust perception (recognition of diverse real-world and synthetic categories), spatial understanding (2D/3D grounding), and long-form visual comprehension, with competitive results on public multimodal benchmarks for both perception and reasoning.\n\nBeyond analysis, Qwen3-VL supports agentic interaction and tool use: it can follow complex instructions over multi-image, multi-turn dialogues; align text to video timelines for precise temporal queries; and operate GUI elements for automation tasks. The models also enable visual coding workflows, turning sketches or mockups into code and assisting with UI debugging, while maintaining strong text-only performance comparable to the flagship Qwen3 language models. This makes Qwen3-VL suitable for production scenarios spanning document AI, multilingual OCR, software/UI assistance, spatial/embodied tasks, and research on vision-language agents.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "qwen-max",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-max",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.6,
      "per_output_token": 6.4,
      "per_cached_input_token": 0.64
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Qwen-Max, based on Qwen2.5, provides the best inference performance among [Qwen models](/qwen), especially for complex multi-step tasks. It's a large-scale MoE model that has been pretrained on over 20 trillion tokens and further post-trained with curated Supervised Fine-Tuning (SFT) and Reinforcement Learning from Human Feedback (RLHF) methodologies. The parameter count is unknown.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "qwen-plus",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-plus",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.4,
      "per_output_token": 1.2,
      "per_cached_input_token": 0.16
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Qwen-Plus, based on the Qwen2.5 foundation model, is a 131K context model with a balanced performance, speed, and cost combination.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen-plus-2025-07-28",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-plus-2025-07-28",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.4,
      "per_output_token": 1.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Qwen Plus 0728, based on the Qwen3 foundation model, is a 1 million context hybrid reasoning model with a balanced performance, speed, and cost combination.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen-plus-2025-07-28:thinking",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-plus-2025-07-28:thinking",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.4,
      "per_output_token": 4.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Qwen Plus 0728, based on the Qwen3 foundation model, is a 1 million context hybrid reasoning model with a balanced performance, speed, and cost combination.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen-turbo",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-turbo",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.05,
      "per_output_token": 0.2,
      "per_cached_input_token": 0.02
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 1000000
    },
    "description": "Qwen-Turbo, based on Qwen2.5, is a 1M context model that provides fast speed and low cost, suitable for simple tasks.",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 12.0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 19.1,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 41.0,
        "hle": 4.2,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 16.3,
        "math_500": 80.5,
        "mmlu": null,
        "mmlu_pro": 63.3,
        "mmmu": null,
        "scicode": 15.3,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 30.05,
        "marketing": 49.4625,
        "science": 45.58333333333334,
        "writing": 44.79
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2024-11-18",
    "knowledge_cutoff_date": "2024-05-22",
    "langdb_release_date": "2024-11-18",
    "is_private": false
  },
  {
    "model": "qwen-vl-max",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-vl-max",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.8,
      "per_output_token": 3.2
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 7500
    },
    "description": "Qwen VL Max is a visual understanding model with 7500 tokens context length. It excels in delivering optimal performance for a broader spectrum of complex tasks.\n",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwen-vl-plus",
    "model_provider": "qwen",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "qwen/qwen-vl-plus",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.21,
      "per_output_token": 0.63
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 7500
    },
    "description": "Qwen's Enhanced Large Visual Language Model. Significantly upgraded for detailed recognition capabilities and text recognition abilities, supporting ultra-high pixel resolutions up to millions of pixels and extreme aspect ratios for image input. It delivers significant performance across a broad range of visual tasks.\n",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "qwq-32b-arliai-rpr-v1",
    "model_provider": "arliai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "arliai/qwq-32b-arliai-rpr-v1",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.01,
      "per_output_token": 0.0400032
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "QwQ-32B-ArliAI-RpR-v1 is a 32B parameter model fine-tuned from Qwen/QwQ-32B using a curated creative writing and roleplay dataset originally developed for the RPMax series. It is designed to maintain coherence and reasoning across long multi-turn conversations by introducing explicit reasoning steps per dialogue turn, generated and refined using the base model itself.\n\nThe model was trained using RS-QLORA+ on 8K sequence lengths and supports up to 128K context windows (with practical performance around 32K). It is optimized for creative roleplay and dialogue generation, with an emphasis on minimizing cross-context repetition while preserving stylistic diversity.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "r1-1776",
    "model_provider": "perplexity",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "perplexity/r1-1776",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 2.5,
      "per_output_token": 7.499999999999999
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "R1 1776 is a version of DeepSeek-R1 that has been post-trained to remove censorship constraints related to topics restricted by the Chinese government. The model retains its original reasoning capabilities while providing direct responses to a wider range of queries. R1 1776 is an offline chat model that does not use the perplexity search subsystem.\n\nThe model was tested on a multilingual dataset of over 1,000 examples covering sensitive topics to measure its likelihood of refusal or overly filtered responses. [Evaluation Results](https://cdn-uploads.huggingface.co/production/uploads/675c8332d01f593dc90817f5/GiN2VqC5hawUgAGJ6oHla.png) Its performance on math and reasoning benchmarks remains similar to the base R1 model. [Reasoning Performance](https://cdn-uploads.huggingface.co/production/uploads/675c8332d01f593dc90817f5/n4Z9Byqp2S7sKUvCvI40R.png)\n\nRead more on the [Blog Post](https://perplexity.ai/hub/blog/open-sourcing-r1-1776)",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": null,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 19.1,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": null,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": 95.4,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "marketing": 19.1
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-02-18",
    "knowledge_cutoff_date": "2024-08-22",
    "langdb_release_date": "2025-02-18",
    "is_private": false
  },
  {
    "model": "relace-apply-3",
    "model_provider": "relace",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "relace/relace-apply-3",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.85,
      "per_output_token": 1.25
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 256000
    },
    "description": "Relace Apply 3 is a specialized code-patching LLM that merges AI-suggested edits straight into your source files. It can apply updates from GPT-4o, Claude, and others into your files at 7,500 tokens/sec on average.\n\nThe model requires the prompt to be in the following format: \n<instruction>{instruction}</instruction>\n<code>{initial_code}</code>\n<update>{edit_snippet}</update>\n\nZero Data Retention is enabled for Relace. Learn more about this model in their [documentation](https://docs.relace.ai/api-reference/instant-apply/apply)",
    "parameters": {
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "remm-slerp-l2-13b",
    "model_provider": "undi95",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "undi95/remm-slerp-l2-13b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.6,
      "per_output_token": 0.875
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 6144
    },
    "description": "A recreation trial of the original MythoMax-L2-B13 but with updated models. #merge",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_a": {
        "default": 0.0,
        "description": "Consider only tokens with sufficiently high probabilities relative to the top token. A lower value focuses the selection on tokens near the top probability, acting like a dynamic Top-P filter.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "rocinante-12b",
    "model_provider": "thedrummer",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "positron-internal-rocinante12b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.19,
      "per_output_token": 0.45
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8192
    },
    "description": "Rocinante 12B is designed for engaging storytelling and rich prose.\n\nEarly testers have reported:\n- Expanded vocabulary with unique and expressive word choices\n- Enhanced creativity for vivid narratives\n- Adventure-filled and captivating stories",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "router",
    "model_provider": "switchpoint",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "switchpoint/router",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.85,
      "per_output_token": 3.4
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Switchpoint AI's router instantly analyzes your request and directs it to the optimal AI from an ever-evolving library. \n\nAs the world of LLMs advances, our router gets smarter, ensuring you always benefit from the industry's newest models without changing your workflow.\n\nThis model is configured for a simple, flat rate per response here on OpenRouter. It's powered by the full routing engine from [Switchpoint AI](https://www.switchpoint.dev).",
    "parameters": {
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "shisa-v2-llama3.3-70b",
    "model_provider": "shisa-ai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "shisa-ai/shisa-v2-llama3.3-70b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.01999188,
      "per_output_token": 0.0800064
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Shisa V2 Llama 3.3 70B is a bilingual Japanese-English chat model fine-tuned by Shisa.AI on Meta’s Llama-3.3-70B-Instruct base. It prioritizes Japanese language performance while retaining strong English capabilities. The model was optimized entirely through post-training, using a refined mix of supervised fine-tuning (SFT) and DPO datasets including regenerated ShareGPT-style data, translation tasks, roleplaying conversations, and instruction-following prompts. Unlike earlier Shisa releases, this version avoids tokenizer modifications or extended pretraining.\n\nShisa V2 70B achieves leading Japanese task performance across a wide range of custom and public benchmarks, including JA MT Bench, ELYZA 100, and Rakuda. It supports a 128K token context length and integrates smoothly with inference frameworks like vLLM and SGLang. While it inherits safety characteristics from its base model, no additional alignment was applied. The model is intended for high-performance bilingual chat, instruction following, and translation tasks across JA/EN.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "logprobs": {
        "default": false,
        "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned.",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_logprobs": {
        "default": null,
        "description": "Specifies the number of most likely tokens (from 0 to 20) to return at each token position, each with its associated log probability. (Requires that logprobs is enabled.)",
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "skyfall-36b-v2",
    "model_provider": "thedrummer",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-skyfall-36b-v2-fp8",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.5,
      "per_output_token": 0.8
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "Skyfall 36B v2 is an enhanced iteration of Mistral Small 2501, specifically fine-tuned for improved creativity, nuanced writing, role-playing, and coherent storytelling.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "sonar",
    "model_provider": "perplexity",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "perplexity/sonar",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 1.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 127072
    },
    "description": "Sonar is lightweight, affordable, fast, and simple to use — now featuring citations and the ability to customize sources. It is designed for companies seeking to integrate lightweight question-and-answer features optimized for speed.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 48.7,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 28.8,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 47.099999999999994,
        "hle": 7.3,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 29.5,
        "math_500": 81.69999999999999,
        "mmlu": null,
        "mmlu_pro": 68.89999999999999,
        "mmmu": null,
        "scicode": 22.9,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 37.95,
        "marketing": 56.14999999999999,
        "science": 51.15555555555555,
        "writing": 50.03999999999999
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "release_date": "2025-01-21",
    "knowledge_cutoff_date": "2024-07-25",
    "langdb_release_date": "2025-01-21",
    "is_private": false
  },
  {
    "model": "sonar-deep-research",
    "model_provider": "perplexity",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "perplexity/sonar-deep-research",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 8.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Sonar Deep Research is a research-focused model designed for multi-step retrieval, synthesis, and reasoning across complex topics. It autonomously searches, reads, and evaluates sources, refining its approach as it gathers information. This enables comprehensive report generation across domains like finance, technology, health, and current events.\n\nNotes on Pricing ([Source](https://docs.perplexity.ai/guides/pricing#detailed-pricing-breakdown-for-sonar-deep-research)) \n- Input tokens comprise of Prompt tokens (user prompt) + Citation tokens (these are processed tokens from running searches)\n- Deep Research runs multiple searches to conduct exhaustive research. Searches are priced at $5/1000 searches. A request that does 30 searches will cost $0.15 in this step.\n- Reasoning is a distinct step in Deep Research since it does extensive automated reasoning through all the material it gathers during its research phase. Reasoning tokens here are a bit different than the CoTs in the answer - these are tokens that we use to reason through the research material prior to generating the outputs via the CoTs. Reasoning tokens are priced at $3/1M tokens",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "is_private": false
  },
  {
    "model": "sonar-pro",
    "model_provider": "perplexity",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "perplexity/sonar-pro",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 3.0,
      "per_output_token": 15.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 200000
    },
    "description": "Note: Sonar Pro pricing includes Perplexity search pricing. See [details here](https://docs.perplexity.ai/guides/pricing#detailed-pricing-breakdown-for-sonar-reasoning-pro-and-sonar-pro)\n\nFor enterprises seeking more advanced capabilities, the Sonar Pro API can handle in-depth, multi-step queries with added extensibility, like double the number of citations per search as Sonar on average. Plus, with a larger context window, it can handle longer and more nuanced searches and follow-up questions. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 28.999999999999996,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 28.2,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 57.8,
        "hle": 7.9,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": 27.500000000000004,
        "math_500": 74.5,
        "mmlu": null,
        "mmlu_pro": 75.5,
        "mmmu": null,
        "scicode": 22.6,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {
        "marketing": 16
      },
      "scores": {
        "academia": 43.0,
        "marketing": 61.4625,
        "science": 59.13888888888889,
        "writing": 56.67
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-01-21",
    "knowledge_cutoff_date": "2024-07-25",
    "langdb_release_date": "2025-01-21",
    "is_private": false
  },
  {
    "model": "sonar-reasoning",
    "model_provider": "perplexity",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "perplexity/sonar-reasoning",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 1.0,
      "per_output_token": 5.0
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 127000
    },
    "description": "Sonar Reasoning is a reasoning model provided by Perplexity based on [DeepSeek R1](/deepseek/deepseek-r1).\n\nIt allows developers to utilize long chain of thought with built-in web search. Sonar Reasoning is uncensored and hosted in US datacenters. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 77.0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 34.2,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": 62.3,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": 92.1,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "academia": 48.25,
        "marketing": 43.56666666666668,
        "science": 62.3,
        "writing": 62.3
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-01-28",
    "knowledge_cutoff_date": "2024-08-01",
    "langdb_release_date": "2025-01-28",
    "is_private": false
  },
  {
    "model": "sonar-reasoning-pro",
    "model_provider": "perplexity",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "perplexity/sonar-reasoning-pro",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 2.0,
      "per_output_token": 8.0
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "Note: Sonar Pro pricing includes Perplexity search pricing. See [details here](https://docs.perplexity.ai/guides/pricing#detailed-pricing-breakdown-for-sonar-reasoning-pro-and-sonar-pro)\n\nSonar Reasoning Pro is a premier reasoning model powered by DeepSeek R1 with Chain of Thought (CoT). Designed for advanced use cases, it supports in-depth, multi-step queries with a larger context window and can surface more citations per search, enabling more comprehensive and extensible responses.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "include_reasoning": {
        "default": false,
        "description": "If the endpoint can return reasoning explicitly, setting this parameter will include reasoning tokens in the response (available in a separate field).",
        "required": false,
        "type": "boolean"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "benchmark_info": {
      "benchmark_score": {
        "aime": 79.0,
        "aime_25": null,
        "artificial_analysis_coding_index": null,
        "artificial_analysis_intelligence_index": 46.3,
        "artificial_analysis_math_index": null,
        "drop": null,
        "gpqa": null,
        "hle": null,
        "humaneval": null,
        "ifbench": null,
        "lcr": null,
        "livecodebench": null,
        "math_500": 95.7,
        "mmlu": null,
        "mmlu_pro": null,
        "mmmu": null,
        "scicode": null,
        "tau2": null,
        "terminalbench_hard": null
      },
      "rank": {},
      "scores": {
        "marketing": 46.3
      }
    },
    "virtual_model_id": null,
    "min_service_level": 1,
    "release_date": "2025-01-28",
    "knowledge_cutoff_date": "2024-08-01",
    "langdb_release_date": "2025-01-28",
    "is_private": false
  },
  {
    "model": "sorcererlm-8x22b",
    "model_provider": "raifle",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "raifle/sorcererlm-8x22b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 4.5,
      "per_output_token": 4.5
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 16000
    },
    "description": "SorcererLM is an advanced RP and storytelling model, built as a Low-rank 16-bit LoRA fine-tuned on [WizardLM-2 8x22B](/microsoft/wizardlm-2-8x22b).\n\n- Advanced reasoning and emotional intelligence for engaging and immersive interactions\n- Vivid writing capabilities enriched with spatial and contextual awareness\n- Enhanced narrative depth, promoting creative and dynamic storytelling",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "spotlight",
    "model_provider": "arcee-ai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "arcee-ai/spotlight",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.18,
      "per_output_token": 0.18
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Spotlight is a 7‑billion‑parameter vision‑language model derived from Qwen 2.5‑VL and fine‑tuned by Arcee AI for tight image‑text grounding tasks. It offers a 32 k‑token context window, enabling rich multimodal conversations that combine lengthy documents with one or more images. Training emphasized fast inference on consumer GPUs while retaining strong captioning, visual‐question‑answering, and diagram‑analysis accuracy. As a result, Spotlight slots neatly into agent workflows where screenshots, charts or UI mock‑ups need to be interpreted on the fly. Early benchmarks show it matching or out‑scoring larger VLMs such as LLaVA‑1.6 13 B on popular VQA and POPE alignment tests. ",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "step3",
    "model_provider": "stepfun-ai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "stepfun-ai/step3",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.57,
      "per_output_token": 1.42
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "Step3 is a cutting-edge multimodal reasoning model—built on a Mixture-of-Experts architecture with 321B total parameters and 38B active. It is designed end-to-end to minimize decoding costs while delivering top-tier performance in vision–language reasoning. Through the co-design of Multi-Matrix Factorization Attention (MFA) and Attention-FFN Disaggregation (AFD), Step3 maintains exceptional efficiency across both flagship and low-end accelerators.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "tongyi-deepresearch-30b-a3b",
    "model_provider": "alibaba",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "alibaba/tongyi-deepresearch-30b-a3b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.09,
      "per_output_token": 0.42499999999999993
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools",
      "reasoning"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Tongyi DeepResearch is an agentic large language model developed by Tongyi Lab, with 30 billion total parameters activating only 3 billion per token. It's optimized for long-horizon, deep information-seeking tasks and delivers state-of-the-art performance on benchmarks like Humanity's Last Exam, BrowserComp, BrowserComp-ZH, WebWalkerQA, GAIA, xbench-DeepSearch, and FRAMES. This makes it superior for complex agentic search, reasoning, and multi-step problem-solving compared to prior models.\n\nThe model includes a fully automated synthetic data pipeline for scalable pre-training, fine-tuning, and reinforcement learning. It uses large-scale continual pre-training on diverse agentic data to boost reasoning and stay fresh. It also features end-to-end on-policy RL with a customized Group Relative Policy Optimization, including token-level gradients and negative sample filtering for stable training. The model supports ReAct for core ability checks and an IterResearch-based 'Heavy' mode for max performance through test-time scaling. It's ideal for advanced research agents, tool use, and heavy inference workflows.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "reasoning": {
        "effort": {
          "default": null,
          "description": "Reasoning effort level. Can be 'high', 'medium', or 'low' (OpenAI-style). Mutually exclusive with max_tokens.",
          "enum": [
            "high",
            "medium",
            "low"
          ],
          "required": false,
          "type": "string"
        },
        "enabled": {
          "default": true,
          "description": "Enable reasoning with default parameters. Default is inferred from effort or max_tokens.",
          "required": false,
          "type": "boolean"
        },
        "exclude": {
          "default": false,
          "description": "Set to true to exclude reasoning tokens from response. Default is false.",
          "required": false,
          "type": "boolean"
        },
        "max_tokens": {
          "default": null,
          "description": "Specific token limit for reasoning (Anthropic-style). Mutually exclusive with effort.",
          "max": null,
          "min": 1,
          "required": false,
          "type": "int"
        }
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "ui-tars-1.5-7b",
    "model_provider": "bytedance",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-ui-tars-1p5-7b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.1,
      "per_output_token": 0.2
    },
    "input_formats": [
      "text",
      "image"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 128000
    },
    "description": "UI-TARS-1.5 is a multimodal vision-language agent optimized for GUI-based environments, including desktop interfaces, web browsers, mobile systems, and games. Built by ByteDance, it builds upon the UI-TARS framework with reinforcement learning-based reasoning, enabling robust action planning and execution across virtual interfaces.\n\nThis model achieves state-of-the-art results on a range of interactive and grounding benchmarks, including OSworld, WebVoyager, AndroidWorld, and ScreenSpot. It also demonstrates perfect task completion across diverse Poki games and outperforms prior models in Minecraft agent tasks. UI-TARS-1.5 supports thought decomposition during inference and shows strong scaling across variants, with the 1.5 version notably exceeding the performance of earlier 72B and 7B checkpoints.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "unslopnemo-12b",
    "model_provider": "thedrummer",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "thedrummer/unslopnemo-12b",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.4333333333333333,
      "per_output_token": 0.4333333333333333
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 32768
    },
    "description": "UnslopNemo v4.1 is the latest addition from the creator of Rocinante, designed for adventure writing and role-play scenarios.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "response_format": {
        "default": {
          "type": "json_object"
        },
        "description": "Forces the model to produce output in a specific format. For example, setting this to { 'type': 'json_object' } enables JSON mode, ensuring the response is valid JSON.",
        "required": false,
        "type": "object"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "structured_outputs": {
        "default": false,
        "description": "If true, instructs the model to return structured outputs (e.g., in JSON format) using the response_format provided.",
        "required": false,
        "type": "boolean"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "virtuoso-large",
    "model_provider": "arcee-ai",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "arcee-ai/virtuoso-large",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.75,
      "per_output_token": 1.2
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [
      "tools"
    ],
    "type": "completions",
    "limits": {
      "max_context_size": 131072
    },
    "description": "Virtuoso‑Large is Arcee's top‑tier general‑purpose LLM at 72 B parameters, tuned to tackle cross‑domain reasoning, creative writing and enterprise QA. Unlike many 70 B peers, it retains the 128 k context inherited from Qwen 2.5, letting it ingest books, codebases or financial filings wholesale. Training blended DeepSeek R1 distillation, multi‑epoch supervised fine‑tuning and a final DPO/RLHF alignment stage, yielding strong performance on BIG‑Bench‑Hard, GSM‑8K and long‑context Needle‑In‑Haystack tests. Enterprises use Virtuoso‑Large as the \"fallback\" brain in Conductor pipelines when other SLMs flag low confidence. Despite its size, aggressive KV‑cache optimizations keep first‑token latency in the low‑second range on 8× H100 nodes, making it a practical production‑grade powerhouse.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "tool_choice": {
        "default": "none",
        "description": "Controls which (if any) tool is called by the model. Accepted values include 'none' (no tool call), 'auto' (model decides), 'required' (must call a tool), or a specific tool identifier/object.",
        "required": false,
        "type": "string"
      },
      "tools": {
        "default": [],
        "description": "A list of tools available for or used during the generation process. This follows a specific tool-calling schema.",
        "required": false,
        "type": "array"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "weaver",
    "model_provider": "mancer",
    "inference_provider": {
      "provider": "openrouter",
      "model_name": "mancer/weaver",
      "endpoint": "https://openrouter.ai/api/v1"
    },
    "price": {
      "per_input_token": 0.75,
      "per_output_token": 0.75
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 8000
    },
    "description": "An attempt to recreate Claude-style verbosity, but don't expect the same level of coherence or memory. Meant for use in roleplay/narrative situations.",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "logit_bias": {
        "default": {},
        "description": "A JSON object mapping token IDs to bias values. These biases (typically between -100 and 100) are added to the logits before sampling, affecting token selection.",
        "required": false,
        "type": "object"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered, relative to the most likely token. For example, a value of 0.1 means only tokens with at least 10% of the top token’s probability are allowed.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounter any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_a": {
        "default": 0.0,
        "description": "Consider only tokens with sufficiently high probabilities relative to the top token. A lower value focuses the selection on tokens near the top probability, acting like a dynamic Top-P filter.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens. A value of 0 disables this setting, allowing the model to consider all tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  },
  {
    "model": "wizardlm-2-8x22b",
    "model_provider": "microsoft",
    "inference_provider": {
      "provider": "parasail",
      "model_name": "parasail-wizardlm-2-8x22b",
      "endpoint": "https://api.parasail.io/v1"
    },
    "price": {
      "per_input_token": 0.48,
      "per_output_token": 0.48
    },
    "input_formats": [
      "text"
    ],
    "output_formats": [
      "text"
    ],
    "capabilities": [],
    "type": "completions",
    "limits": {
      "max_context_size": 65536
    },
    "description": "WizardLM-2 8x22B is Microsoft AI's most advanced Wizard model. It demonstrates highly competitive performance compared to leading proprietary models, and it consistently outperforms all existing state-of-the-art opensource models.\n\nIt is an instruct finetune of [Mixtral 8x22B](/models/mistralai/mixtral-8x22b).\n\nTo read more about the model release, [click here](https://wizardlm.github.io/WizardLM2/).\n\n#moe",
    "parameters": {
      "frequency_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency.",
        "max": 2,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "max_tokens": {
        "default": 1000,
        "description": "The maximum number of tokens that can be generated in the completion.",
        "max": null,
        "min": null,
        "required": false,
        "type": "int"
      },
      "min_p": {
        "default": 0.0,
        "description": "Represents the minimum probability for a token to be considered.",
        "max": 1.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "presence_penalty": {
        "default": 0,
        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far.",
        "max": 1.999,
        "min": -2,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "repetition_penalty": {
        "default": 1.0,
        "description": "Helps reduce repetition in the output. Higher values (up to 2.0) make the model less likely to repeat tokens, whereas values closer to 0.0 encourage token reuse.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "seed": {
        "default": null,
        "description": "If specified, our system will make a best effort to sample deterministically.",
        "max": null,
        "min": null,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "stop": {
        "default": null,
        "description": "Stop generation immediately if the model encounters any token specified in the stop array.",
        "max": null,
        "min": null,
        "required": false,
        "type": "string/array"
      },
      "temperature": {
        "default": 1.0,
        "description": "What sampling temperature to use, between 0 and 2.",
        "max": 2.0,
        "min": 0.0,
        "required": false,
        "step": 0.1,
        "type": "float"
      },
      "top_k": {
        "default": 0,
        "description": "Limits the token sampling to only the top K tokens.",
        "min": 0,
        "required": false,
        "step": 1,
        "type": "int"
      },
      "top_p": {
        "default": 1,
        "description": "An alternative to sampling with temperature, called nucleus sampling.",
        "max": 1,
        "min": 0,
        "required": false,
        "step": 0.05,
        "type": "float"
      }
    },
    "virtual_model_id": null,
    "min_service_level": 0,
    "is_private": false
  }
]